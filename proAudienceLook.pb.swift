// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proAudienceLook.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_ProAudienceLook: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: RVData_UUID {
    get {return _uuid ?? RVData_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var name: String = String()

  var screenLooks: [RVData_ProAudienceLook.ProScreenLook] = []

  var originalLookUuid: RVData_UUID {
    get {return _originalLookUuid ?? RVData_UUID()}
    set {_originalLookUuid = newValue}
  }
  /// Returns true if `originalLookUuid` has been explicitly set.
  var hasOriginalLookUuid: Bool {return self._originalLookUuid != nil}
  /// Clears the value of `originalLookUuid`. Subsequent reads from it will return its default value.
  mutating func clearOriginalLookUuid() {self._originalLookUuid = nil}

  var transitionDuration: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ProScreenLook: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var proScreenUuid: RVData_UUID {
      get {return _storage._proScreenUuid ?? RVData_UUID()}
      set {_uniqueStorage()._proScreenUuid = newValue}
    }
    /// Returns true if `proScreenUuid` has been explicitly set.
    var hasProScreenUuid: Bool {return _storage._proScreenUuid != nil}
    /// Clears the value of `proScreenUuid`. Subsequent reads from it will return its default value.
    mutating func clearProScreenUuid() {_uniqueStorage()._proScreenUuid = nil}

    var propsEnabled: Bool {
      get {return _storage._propsEnabled}
      set {_uniqueStorage()._propsEnabled = newValue}
    }

    var liveVideoEnabled: Bool {
      get {return _storage._liveVideoEnabled}
      set {_uniqueStorage()._liveVideoEnabled = newValue}
    }

    var presentationBackgroundEnabled: Bool {
      get {return _storage._presentationBackgroundEnabled}
      set {_uniqueStorage()._presentationBackgroundEnabled = newValue}
    }

    var templateDocumentFilePath: RVData_URL {
      get {return _storage._templateDocumentFilePath ?? RVData_URL()}
      set {_uniqueStorage()._templateDocumentFilePath = newValue}
    }
    /// Returns true if `templateDocumentFilePath` has been explicitly set.
    var hasTemplateDocumentFilePath: Bool {return _storage._templateDocumentFilePath != nil}
    /// Clears the value of `templateDocumentFilePath`. Subsequent reads from it will return its default value.
    mutating func clearTemplateDocumentFilePath() {_uniqueStorage()._templateDocumentFilePath = nil}

    var templateSlideUuid: RVData_UUID {
      get {return _storage._templateSlideUuid ?? RVData_UUID()}
      set {_uniqueStorage()._templateSlideUuid = newValue}
    }
    /// Returns true if `templateSlideUuid` has been explicitly set.
    var hasTemplateSlideUuid: Bool {return _storage._templateSlideUuid != nil}
    /// Clears the value of `templateSlideUuid`. Subsequent reads from it will return its default value.
    mutating func clearTemplateSlideUuid() {_uniqueStorage()._templateSlideUuid = nil}

    var presentationForegroundEnabled: Bool {
      get {return _storage._presentationForegroundEnabled}
      set {_uniqueStorage()._presentationForegroundEnabled = newValue}
    }

    var maskUuid: RVData_UUID {
      get {return _storage._maskUuid ?? RVData_UUID()}
      set {_uniqueStorage()._maskUuid = newValue}
    }
    /// Returns true if `maskUuid` has been explicitly set.
    var hasMaskUuid: Bool {return _storage._maskUuid != nil}
    /// Clears the value of `maskUuid`. Subsequent reads from it will return its default value.
    mutating func clearMaskUuid() {_uniqueStorage()._maskUuid = nil}

    var announcementsEnabled: Bool {
      get {return _storage._announcementsEnabled}
      set {_uniqueStorage()._announcementsEnabled = newValue}
    }

    var propsLayerEnabled: Bool {
      get {return _storage._propsLayerEnabled}
      set {_uniqueStorage()._propsLayerEnabled = newValue}
    }

    var messagesLayerEnabled: Bool {
      get {return _storage._messagesLayerEnabled}
      set {_uniqueStorage()._messagesLayerEnabled = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _uuid: RVData_UUID? = nil
  fileprivate var _originalLookUuid: RVData_UUID? = nil
}

struct RVData_AudienceLookCollection: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collection: [RVData_ProAudienceLook] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_ProAudienceLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProAudienceLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .standard(proto: "screen_looks"),
    4: .standard(proto: "original_look_uuid"),
    5: .standard(proto: "transition_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.screenLooks) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._originalLookUuid) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.transitionDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.screenLooks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screenLooks, fieldNumber: 3)
    }
    try { if let v = self._originalLookUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.transitionDuration.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.transitionDuration, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProAudienceLook, rhs: RVData_ProAudienceLook) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.screenLooks != rhs.screenLooks {return false}
    if lhs._originalLookUuid != rhs._originalLookUuid {return false}
    if lhs.transitionDuration != rhs.transitionDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ProAudienceLook.ProScreenLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_ProAudienceLook.protoMessageName + ".ProScreenLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pro_screen_uuid"),
    2: .standard(proto: "props_enabled"),
    3: .standard(proto: "live_video_enabled"),
    4: .standard(proto: "presentation_background_enabled"),
    5: .standard(proto: "template_document_file_path"),
    6: .standard(proto: "template_slide_uuid"),
    7: .standard(proto: "presentation_foreground_enabled"),
    8: .standard(proto: "mask_uuid"),
    9: .standard(proto: "announcements_enabled"),
    10: .standard(proto: "props_layer_enabled"),
    11: .standard(proto: "messages_layer_enabled"),
  ]

  fileprivate class _StorageClass {
    var _proScreenUuid: RVData_UUID? = nil
    var _propsEnabled: Bool = false
    var _liveVideoEnabled: Bool = false
    var _presentationBackgroundEnabled: Bool = false
    var _templateDocumentFilePath: RVData_URL? = nil
    var _templateSlideUuid: RVData_UUID? = nil
    var _presentationForegroundEnabled: Bool = false
    var _maskUuid: RVData_UUID? = nil
    var _announcementsEnabled: Bool = false
    var _propsLayerEnabled: Bool = false
    var _messagesLayerEnabled: Bool = false

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _proScreenUuid = source._proScreenUuid
      _propsEnabled = source._propsEnabled
      _liveVideoEnabled = source._liveVideoEnabled
      _presentationBackgroundEnabled = source._presentationBackgroundEnabled
      _templateDocumentFilePath = source._templateDocumentFilePath
      _templateSlideUuid = source._templateSlideUuid
      _presentationForegroundEnabled = source._presentationForegroundEnabled
      _maskUuid = source._maskUuid
      _announcementsEnabled = source._announcementsEnabled
      _propsLayerEnabled = source._propsLayerEnabled
      _messagesLayerEnabled = source._messagesLayerEnabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._proScreenUuid) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._propsEnabled) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._liveVideoEnabled) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._presentationBackgroundEnabled) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._templateDocumentFilePath) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._templateSlideUuid) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._presentationForegroundEnabled) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._maskUuid) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._announcementsEnabled) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._propsLayerEnabled) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._messagesLayerEnabled) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._proScreenUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._propsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._propsEnabled, fieldNumber: 2)
      }
      if _storage._liveVideoEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._liveVideoEnabled, fieldNumber: 3)
      }
      if _storage._presentationBackgroundEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._presentationBackgroundEnabled, fieldNumber: 4)
      }
      try { if let v = _storage._templateDocumentFilePath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._templateSlideUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._presentationForegroundEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._presentationForegroundEnabled, fieldNumber: 7)
      }
      try { if let v = _storage._maskUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._announcementsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._announcementsEnabled, fieldNumber: 9)
      }
      if _storage._propsLayerEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._propsLayerEnabled, fieldNumber: 10)
      }
      if _storage._messagesLayerEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._messagesLayerEnabled, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProAudienceLook.ProScreenLook, rhs: RVData_ProAudienceLook.ProScreenLook) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._proScreenUuid != rhs_storage._proScreenUuid {return false}
        if _storage._propsEnabled != rhs_storage._propsEnabled {return false}
        if _storage._liveVideoEnabled != rhs_storage._liveVideoEnabled {return false}
        if _storage._presentationBackgroundEnabled != rhs_storage._presentationBackgroundEnabled {return false}
        if _storage._templateDocumentFilePath != rhs_storage._templateDocumentFilePath {return false}
        if _storage._templateSlideUuid != rhs_storage._templateSlideUuid {return false}
        if _storage._presentationForegroundEnabled != rhs_storage._presentationForegroundEnabled {return false}
        if _storage._maskUuid != rhs_storage._maskUuid {return false}
        if _storage._announcementsEnabled != rhs_storage._announcementsEnabled {return false}
        if _storage._propsLayerEnabled != rhs_storage._propsLayerEnabled {return false}
        if _storage._messagesLayerEnabled != rhs_storage._messagesLayerEnabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_AudienceLookCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AudienceLookCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "collection"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collection.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collection, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_AudienceLookCollection, rhs: RVData_AudienceLookCollection) -> Bool {
    if lhs.collection != rhs.collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
