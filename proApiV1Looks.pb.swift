// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Looks.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Look: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: RVData_API_v1_Identifier {
    get {return _id ?? RVData_API_v1_Identifier()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var screens: [RVData_API_v1_Screen] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: RVData_API_v1_Identifier? = nil
}

struct RVData_API_v1_Screen: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoInput: Bool = false

  var media: Bool = false

  var slide: Bool = false

  var announcements: Bool = false

  var props: Bool = false

  var messages: Bool = false

  var presentation: String = String()

  var mask: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RVData_API_v1_Looks_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Looks_Request.OneOf_Request? = nil

  var looks: RVData_API_v1_Looks_Request.Looks {
    get {
      if case .looks(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.Looks()
    }
    set {request = .looks(newValue)}
  }

  var createLook: RVData_API_v1_Looks_Request.CreateLook {
    get {
      if case .createLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.CreateLook()
    }
    set {request = .createLook(newValue)}
  }

  var getCurrentLook: RVData_API_v1_Looks_Request.GetCurrentLook {
    get {
      if case .getCurrentLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.GetCurrentLook()
    }
    set {request = .getCurrentLook(newValue)}
  }

  var putCurrentLook: RVData_API_v1_Looks_Request.PutCurrentLook {
    get {
      if case .putCurrentLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.PutCurrentLook()
    }
    set {request = .putCurrentLook(newValue)}
  }

  var getLook: RVData_API_v1_Looks_Request.GetLook {
    get {
      if case .getLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.GetLook()
    }
    set {request = .getLook(newValue)}
  }

  var putLook: RVData_API_v1_Looks_Request.PutLook {
    get {
      if case .putLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.PutLook()
    }
    set {request = .putLook(newValue)}
  }

  var deleteLook: RVData_API_v1_Looks_Request.DeleteLook {
    get {
      if case .deleteLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.DeleteLook()
    }
    set {request = .deleteLook(newValue)}
  }

  var triggerLook: RVData_API_v1_Looks_Request.TriggerLook {
    get {
      if case .triggerLook(let v)? = request {return v}
      return RVData_API_v1_Looks_Request.TriggerLook()
    }
    set {request = .triggerLook(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case looks(RVData_API_v1_Looks_Request.Looks)
    case createLook(RVData_API_v1_Looks_Request.CreateLook)
    case getCurrentLook(RVData_API_v1_Looks_Request.GetCurrentLook)
    case putCurrentLook(RVData_API_v1_Looks_Request.PutCurrentLook)
    case getLook(RVData_API_v1_Looks_Request.GetLook)
    case putLook(RVData_API_v1_Looks_Request.PutLook)
    case deleteLook(RVData_API_v1_Looks_Request.DeleteLook)
    case triggerLook(RVData_API_v1_Looks_Request.TriggerLook)

  }

  struct Looks: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CreateLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct GetCurrentLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutCurrentLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct GetLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct DeleteLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct TriggerLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Looks_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Looks_Response.OneOf_Response? = nil

  var looks: RVData_API_v1_Looks_Response.Looks {
    get {
      if case .looks(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.Looks()
    }
    set {response = .looks(newValue)}
  }

  var createLook: RVData_API_v1_Looks_Response.CreateLook {
    get {
      if case .createLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.CreateLook()
    }
    set {response = .createLook(newValue)}
  }

  var getCurrentLook: RVData_API_v1_Looks_Response.GetCurrentLook {
    get {
      if case .getCurrentLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.GetCurrentLook()
    }
    set {response = .getCurrentLook(newValue)}
  }

  var putCurrentLook: RVData_API_v1_Looks_Response.PutCurrentLook {
    get {
      if case .putCurrentLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.PutCurrentLook()
    }
    set {response = .putCurrentLook(newValue)}
  }

  var getLook: RVData_API_v1_Looks_Response.GetLook {
    get {
      if case .getLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.GetLook()
    }
    set {response = .getLook(newValue)}
  }

  var putLook: RVData_API_v1_Looks_Response.PutLook {
    get {
      if case .putLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.PutLook()
    }
    set {response = .putLook(newValue)}
  }

  var deleteLook: RVData_API_v1_Looks_Response.DeleteLook {
    get {
      if case .deleteLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.DeleteLook()
    }
    set {response = .deleteLook(newValue)}
  }

  var triggerLook: RVData_API_v1_Looks_Response.TriggerLook {
    get {
      if case .triggerLook(let v)? = response {return v}
      return RVData_API_v1_Looks_Response.TriggerLook()
    }
    set {response = .triggerLook(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case looks(RVData_API_v1_Looks_Response.Looks)
    case createLook(RVData_API_v1_Looks_Response.CreateLook)
    case getCurrentLook(RVData_API_v1_Looks_Response.GetCurrentLook)
    case putCurrentLook(RVData_API_v1_Looks_Response.PutCurrentLook)
    case getLook(RVData_API_v1_Looks_Response.GetLook)
    case putLook(RVData_API_v1_Looks_Response.PutLook)
    case deleteLook(RVData_API_v1_Looks_Response.DeleteLook)
    case triggerLook(RVData_API_v1_Looks_Response.TriggerLook)

  }

  struct Looks: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var looks: [RVData_API_v1_Look] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CreateLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct GetCurrentLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct PutCurrentLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct GetLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct PutLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var look: RVData_API_v1_Look {
      get {return _look ?? RVData_API_v1_Look()}
      set {_look = newValue}
    }
    /// Returns true if `look` has been explicitly set.
    var hasLook: Bool {return self._look != nil}
    /// Clears the value of `look`. Subsequent reads from it will return its default value.
    mutating func clearLook() {self._look = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _look: RVData_API_v1_Look? = nil
  }

  struct DeleteLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct TriggerLook: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Look: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Look"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "screens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.screens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.screens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screens, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Look, rhs: RVData_API_v1_Look) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.screens != rhs.screens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Screen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Screen"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_input"),
    2: .same(proto: "media"),
    3: .same(proto: "slide"),
    4: .same(proto: "announcements"),
    5: .same(proto: "props"),
    6: .same(proto: "messages"),
    7: .same(proto: "presentation"),
    8: .same(proto: "mask"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.videoInput) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.media) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.slide) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.announcements) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.props) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.messages) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.presentation) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.mask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.videoInput != false {
      try visitor.visitSingularBoolField(value: self.videoInput, fieldNumber: 1)
    }
    if self.media != false {
      try visitor.visitSingularBoolField(value: self.media, fieldNumber: 2)
    }
    if self.slide != false {
      try visitor.visitSingularBoolField(value: self.slide, fieldNumber: 3)
    }
    if self.announcements != false {
      try visitor.visitSingularBoolField(value: self.announcements, fieldNumber: 4)
    }
    if self.props != false {
      try visitor.visitSingularBoolField(value: self.props, fieldNumber: 5)
    }
    if self.messages != false {
      try visitor.visitSingularBoolField(value: self.messages, fieldNumber: 6)
    }
    if !self.presentation.isEmpty {
      try visitor.visitSingularStringField(value: self.presentation, fieldNumber: 7)
    }
    if !self.mask.isEmpty {
      try visitor.visitSingularStringField(value: self.mask, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Screen, rhs: RVData_API_v1_Screen) -> Bool {
    if lhs.videoInput != rhs.videoInput {return false}
    if lhs.media != rhs.media {return false}
    if lhs.slide != rhs.slide {return false}
    if lhs.announcements != rhs.announcements {return false}
    if lhs.props != rhs.props {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs.presentation != rhs.presentation {return false}
    if lhs.mask != rhs.mask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Looks_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "looks"),
    2: .standard(proto: "create_look"),
    3: .standard(proto: "get_current_look"),
    4: .standard(proto: "put_current_look"),
    5: .standard(proto: "get_look"),
    6: .standard(proto: "put_look"),
    7: .standard(proto: "delete_look"),
    8: .standard(proto: "trigger_look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Looks_Request.Looks?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .looks(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .looks(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Looks_Request.CreateLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .createLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .createLook(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Looks_Request.GetCurrentLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getCurrentLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getCurrentLook(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Looks_Request.PutCurrentLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .putCurrentLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .putCurrentLook(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Looks_Request.GetLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getLook(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Looks_Request.PutLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .putLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .putLook(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Looks_Request.DeleteLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .deleteLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .deleteLook(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Looks_Request.TriggerLook?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .triggerLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .triggerLook(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .looks?: try {
      guard case .looks(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .createLook?: try {
      guard case .createLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getCurrentLook?: try {
      guard case .getCurrentLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .putCurrentLook?: try {
      guard case .putCurrentLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .getLook?: try {
      guard case .getLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .putLook?: try {
      guard case .putLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .deleteLook?: try {
      guard case .deleteLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .triggerLook?: try {
      guard case .triggerLook(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request, rhs: RVData_API_v1_Looks_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.Looks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".Looks"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.Looks, rhs: RVData_API_v1_Looks_Request.Looks) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.CreateLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".CreateLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.CreateLook, rhs: RVData_API_v1_Looks_Request.CreateLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.GetCurrentLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".GetCurrentLook"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.GetCurrentLook, rhs: RVData_API_v1_Looks_Request.GetCurrentLook) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.PutCurrentLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".PutCurrentLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.PutCurrentLook, rhs: RVData_API_v1_Looks_Request.PutCurrentLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.GetLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".GetLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.GetLook, rhs: RVData_API_v1_Looks_Request.GetLook) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.PutLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".PutLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.PutLook, rhs: RVData_API_v1_Looks_Request.PutLook) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.DeleteLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".DeleteLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.DeleteLook, rhs: RVData_API_v1_Looks_Request.DeleteLook) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Request.TriggerLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Request.protoMessageName + ".TriggerLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Request.TriggerLook, rhs: RVData_API_v1_Looks_Request.TriggerLook) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Looks_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "looks"),
    2: .standard(proto: "create_look"),
    3: .standard(proto: "get_current_look"),
    4: .standard(proto: "put_current_look"),
    5: .standard(proto: "get_look"),
    6: .standard(proto: "put_look"),
    7: .standard(proto: "delete_look"),
    8: .standard(proto: "trigger_look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Looks_Response.Looks?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .looks(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .looks(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Looks_Response.CreateLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .createLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .createLook(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Looks_Response.GetCurrentLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getCurrentLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getCurrentLook(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Looks_Response.PutCurrentLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .putCurrentLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .putCurrentLook(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Looks_Response.GetLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getLook(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Looks_Response.PutLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .putLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .putLook(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Looks_Response.DeleteLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .deleteLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .deleteLook(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Looks_Response.TriggerLook?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .triggerLook(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .triggerLook(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .looks?: try {
      guard case .looks(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .createLook?: try {
      guard case .createLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getCurrentLook?: try {
      guard case .getCurrentLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .putCurrentLook?: try {
      guard case .putCurrentLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .getLook?: try {
      guard case .getLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .putLook?: try {
      guard case .putLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .deleteLook?: try {
      guard case .deleteLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .triggerLook?: try {
      guard case .triggerLook(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response, rhs: RVData_API_v1_Looks_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.Looks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".Looks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "looks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.looks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.looks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.looks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.Looks, rhs: RVData_API_v1_Looks_Response.Looks) -> Bool {
    if lhs.looks != rhs.looks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.CreateLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".CreateLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.CreateLook, rhs: RVData_API_v1_Looks_Response.CreateLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.GetCurrentLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".GetCurrentLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.GetCurrentLook, rhs: RVData_API_v1_Looks_Response.GetCurrentLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.PutCurrentLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".PutCurrentLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.PutCurrentLook, rhs: RVData_API_v1_Looks_Response.PutCurrentLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.GetLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".GetLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.GetLook, rhs: RVData_API_v1_Looks_Response.GetLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.PutLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".PutLook"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "look"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._look) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._look {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.PutLook, rhs: RVData_API_v1_Looks_Response.PutLook) -> Bool {
    if lhs._look != rhs._look {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.DeleteLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".DeleteLook"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.DeleteLook, rhs: RVData_API_v1_Looks_Response.DeleteLook) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Looks_Response.TriggerLook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Looks_Response.protoMessageName + ".TriggerLook"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Looks_Response.TriggerLook, rhs: RVData_API_v1_Looks_Response.TriggerLook) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
