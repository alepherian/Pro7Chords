// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_NetworkAPI_v1: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: RVData_NetworkAPI_v1.OneOf_Command? = nil

  var action: RVData_NetworkAPI_v1.Action {
    get {
      if case .action(let v)? = command {return v}
      return RVData_NetworkAPI_v1.Action()
    }
    set {command = .action(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Command: Equatable, Sendable {
    case action(RVData_NetworkAPI_v1.Action)

  }

  struct Action: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var request: OneOf_Request? {
      get {return _storage._request}
      set {_uniqueStorage()._request = newValue}
    }

    var audioRequest: RVData_API_v1_Audio_Request {
      get {
        if case .audioRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Audio_Request()
      }
      set {_uniqueStorage()._request = .audioRequest(newValue)}
    }

    var captureRequest: RVData_API_v1_Capture_Request {
      get {
        if case .captureRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Capture_Request()
      }
      set {_uniqueStorage()._request = .captureRequest(newValue)}
    }

    var clearingRequest: RVData_API_v1_Clear_Request {
      get {
        if case .clearingRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Clear_Request()
      }
      set {_uniqueStorage()._request = .clearingRequest(newValue)}
    }

    var groupsRequest: RVData_API_v1_Groups_Request {
      get {
        if case .groupsRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Groups_Request()
      }
      set {_uniqueStorage()._request = .groupsRequest(newValue)}
    }

    var linkRequest: RVData_API_v1_Link_Request {
      get {
        if case .linkRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Link_Request()
      }
      set {_uniqueStorage()._request = .linkRequest(newValue)}
    }

    var libraryRequest: RVData_API_v1_Library_Request {
      get {
        if case .libraryRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Library_Request()
      }
      set {_uniqueStorage()._request = .libraryRequest(newValue)}
    }

    var looksRequest: RVData_API_v1_Looks_Request {
      get {
        if case .looksRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Looks_Request()
      }
      set {_uniqueStorage()._request = .looksRequest(newValue)}
    }

    var macroRequest: RVData_API_v1_Macro_Request {
      get {
        if case .macroRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Macro_Request()
      }
      set {_uniqueStorage()._request = .macroRequest(newValue)}
    }

    var masksRequest: RVData_API_v1_Masks_Request {
      get {
        if case .masksRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Masks_Request()
      }
      set {_uniqueStorage()._request = .masksRequest(newValue)}
    }

    var mediaRequest: RVData_API_v1_Media_Request {
      get {
        if case .mediaRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Media_Request()
      }
      set {_uniqueStorage()._request = .mediaRequest(newValue)}
    }

    var messageRequest: RVData_API_v1_Message_Request {
      get {
        if case .messageRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Message_Request()
      }
      set {_uniqueStorage()._request = .messageRequest(newValue)}
    }

    var miscellaneousRequest: RVData_API_v1_Miscellaneous_Request {
      get {
        if case .miscellaneousRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Miscellaneous_Request()
      }
      set {_uniqueStorage()._request = .miscellaneousRequest(newValue)}
    }

    var playlistRequest: RVData_API_v1_Playlist_Request {
      get {
        if case .playlistRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Playlist_Request()
      }
      set {_uniqueStorage()._request = .playlistRequest(newValue)}
    }

    var prerollRequest: RVData_API_v1_Preroll_Request {
      get {
        if case .prerollRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Preroll_Request()
      }
      set {_uniqueStorage()._request = .prerollRequest(newValue)}
    }

    var presentationRequest: RVData_API_v1_Presentation_Request {
      get {
        if case .presentationRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Presentation_Request()
      }
      set {_uniqueStorage()._request = .presentationRequest(newValue)}
    }

    var propRequest: RVData_API_v1_Prop_Request {
      get {
        if case .propRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Prop_Request()
      }
      set {_uniqueStorage()._request = .propRequest(newValue)}
    }

    var stageRequest: RVData_API_v1_Stage_Request {
      get {
        if case .stageRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Stage_Request()
      }
      set {_uniqueStorage()._request = .stageRequest(newValue)}
    }

    var statusRequest: RVData_API_v1_Status_Request {
      get {
        if case .statusRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Status_Request()
      }
      set {_uniqueStorage()._request = .statusRequest(newValue)}
    }

    var themeRequest: RVData_API_v1_Theme_Request {
      get {
        if case .themeRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Theme_Request()
      }
      set {_uniqueStorage()._request = .themeRequest(newValue)}
    }

    var timerRequest: RVData_API_v1_Timer_Request {
      get {
        if case .timerRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Timer_Request()
      }
      set {_uniqueStorage()._request = .timerRequest(newValue)}
    }

    var transportRequest: RVData_API_v1_Transport_Request {
      get {
        if case .transportRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Transport_Request()
      }
      set {_uniqueStorage()._request = .transportRequest(newValue)}
    }

    var triggerRequest: RVData_API_v1_Trigger_Request {
      get {
        if case .triggerRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Trigger_Request()
      }
      set {_uniqueStorage()._request = .triggerRequest(newValue)}
    }

    var videoInputsRequest: RVData_API_v1_Video_Inputs_Request {
      get {
        if case .videoInputsRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Video_Inputs_Request()
      }
      set {_uniqueStorage()._request = .videoInputsRequest(newValue)}
    }

    var announcementRequest: RVData_API_v1_Announcement_Request {
      get {
        if case .announcementRequest(let v)? = _storage._request {return v}
        return RVData_API_v1_Announcement_Request()
      }
      set {_uniqueStorage()._request = .announcementRequest(newValue)}
    }

    var response: OneOf_Response? {
      get {return _storage._response}
      set {_uniqueStorage()._response = newValue}
    }

    var audioResponse: RVData_API_v1_Audio_Response {
      get {
        if case .audioResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Audio_Response()
      }
      set {_uniqueStorage()._response = .audioResponse(newValue)}
    }

    var captureResponse: RVData_API_v1_Capture_Response {
      get {
        if case .captureResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Capture_Response()
      }
      set {_uniqueStorage()._response = .captureResponse(newValue)}
    }

    var clearingResponse: RVData_API_v1_Clear_Response {
      get {
        if case .clearingResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Clear_Response()
      }
      set {_uniqueStorage()._response = .clearingResponse(newValue)}
    }

    var groupsResponse: RVData_API_v1_Groups_Response {
      get {
        if case .groupsResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Groups_Response()
      }
      set {_uniqueStorage()._response = .groupsResponse(newValue)}
    }

    var linkResponse: RVData_API_v1_Link_Response {
      get {
        if case .linkResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Link_Response()
      }
      set {_uniqueStorage()._response = .linkResponse(newValue)}
    }

    var libraryResponse: RVData_API_v1_Library_Response {
      get {
        if case .libraryResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Library_Response()
      }
      set {_uniqueStorage()._response = .libraryResponse(newValue)}
    }

    var looksResponse: RVData_API_v1_Looks_Response {
      get {
        if case .looksResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Looks_Response()
      }
      set {_uniqueStorage()._response = .looksResponse(newValue)}
    }

    var macroResponse: RVData_API_v1_Macro_Response {
      get {
        if case .macroResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Macro_Response()
      }
      set {_uniqueStorage()._response = .macroResponse(newValue)}
    }

    var masksResponse: RVData_API_v1_Masks_Response {
      get {
        if case .masksResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Masks_Response()
      }
      set {_uniqueStorage()._response = .masksResponse(newValue)}
    }

    var mediaResponse: RVData_API_v1_Media_Response {
      get {
        if case .mediaResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Media_Response()
      }
      set {_uniqueStorage()._response = .mediaResponse(newValue)}
    }

    var messageResponse: RVData_API_v1_Message_Response {
      get {
        if case .messageResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Message_Response()
      }
      set {_uniqueStorage()._response = .messageResponse(newValue)}
    }

    var miscellaneousResponse: RVData_API_v1_Miscellaneous_Response {
      get {
        if case .miscellaneousResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Miscellaneous_Response()
      }
      set {_uniqueStorage()._response = .miscellaneousResponse(newValue)}
    }

    var playlistResponse: RVData_API_v1_Playlist_Response {
      get {
        if case .playlistResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Playlist_Response()
      }
      set {_uniqueStorage()._response = .playlistResponse(newValue)}
    }

    var prerollResponse: RVData_API_v1_Preroll_Response {
      get {
        if case .prerollResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Preroll_Response()
      }
      set {_uniqueStorage()._response = .prerollResponse(newValue)}
    }

    var presentationResponse: RVData_API_v1_Presentation_Response {
      get {
        if case .presentationResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Presentation_Response()
      }
      set {_uniqueStorage()._response = .presentationResponse(newValue)}
    }

    var propResponse: RVData_API_v1_Prop_Response {
      get {
        if case .propResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Prop_Response()
      }
      set {_uniqueStorage()._response = .propResponse(newValue)}
    }

    var stageResponse: RVData_API_v1_Stage_Response {
      get {
        if case .stageResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Stage_Response()
      }
      set {_uniqueStorage()._response = .stageResponse(newValue)}
    }

    var statusResponse: RVData_API_v1_Status_Response {
      get {
        if case .statusResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Status_Response()
      }
      set {_uniqueStorage()._response = .statusResponse(newValue)}
    }

    var themeResponse: RVData_API_v1_Theme_Response {
      get {
        if case .themeResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Theme_Response()
      }
      set {_uniqueStorage()._response = .themeResponse(newValue)}
    }

    var timerResponse: RVData_API_v1_Timer_Response {
      get {
        if case .timerResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Timer_Response()
      }
      set {_uniqueStorage()._response = .timerResponse(newValue)}
    }

    var transportResponse: RVData_API_v1_Transport_Response {
      get {
        if case .transportResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Transport_Response()
      }
      set {_uniqueStorage()._response = .transportResponse(newValue)}
    }

    var triggerResponse: RVData_API_v1_Trigger_Response {
      get {
        if case .triggerResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Trigger_Response()
      }
      set {_uniqueStorage()._response = .triggerResponse(newValue)}
    }

    var videoInputsResponse: RVData_API_v1_Video_Inputs_Response {
      get {
        if case .videoInputsResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Video_Inputs_Response()
      }
      set {_uniqueStorage()._response = .videoInputsResponse(newValue)}
    }

    var announcementResponse: RVData_API_v1_Announcement_Response {
      get {
        if case .announcementResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Announcement_Response()
      }
      set {_uniqueStorage()._response = .announcementResponse(newValue)}
    }

    var errorResponse: RVData_API_v1_Error_Response {
      get {
        if case .errorResponse(let v)? = _storage._response {return v}
        return RVData_API_v1_Error_Response()
      }
      set {_uniqueStorage()._response = .errorResponse(newValue)}
    }

    var streamingUpdateIdentifier: OneOf_StreamingUpdateIdentifier? {
      get {return _storage._streamingUpdateIdentifier}
      set {_uniqueStorage()._streamingUpdateIdentifier = newValue}
    }

    var updateIdentifier: String {
      get {
        if case .updateIdentifier(let v)? = _storage._streamingUpdateIdentifier {return v}
        return String()
      }
      set {_uniqueStorage()._streamingUpdateIdentifier = .updateIdentifier(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Request: Equatable, Sendable {
      case audioRequest(RVData_API_v1_Audio_Request)
      case captureRequest(RVData_API_v1_Capture_Request)
      case clearingRequest(RVData_API_v1_Clear_Request)
      case groupsRequest(RVData_API_v1_Groups_Request)
      case linkRequest(RVData_API_v1_Link_Request)
      case libraryRequest(RVData_API_v1_Library_Request)
      case looksRequest(RVData_API_v1_Looks_Request)
      case macroRequest(RVData_API_v1_Macro_Request)
      case masksRequest(RVData_API_v1_Masks_Request)
      case mediaRequest(RVData_API_v1_Media_Request)
      case messageRequest(RVData_API_v1_Message_Request)
      case miscellaneousRequest(RVData_API_v1_Miscellaneous_Request)
      case playlistRequest(RVData_API_v1_Playlist_Request)
      case prerollRequest(RVData_API_v1_Preroll_Request)
      case presentationRequest(RVData_API_v1_Presentation_Request)
      case propRequest(RVData_API_v1_Prop_Request)
      case stageRequest(RVData_API_v1_Stage_Request)
      case statusRequest(RVData_API_v1_Status_Request)
      case themeRequest(RVData_API_v1_Theme_Request)
      case timerRequest(RVData_API_v1_Timer_Request)
      case transportRequest(RVData_API_v1_Transport_Request)
      case triggerRequest(RVData_API_v1_Trigger_Request)
      case videoInputsRequest(RVData_API_v1_Video_Inputs_Request)
      case announcementRequest(RVData_API_v1_Announcement_Request)

    }

    enum OneOf_Response: Equatable, Sendable {
      case audioResponse(RVData_API_v1_Audio_Response)
      case captureResponse(RVData_API_v1_Capture_Response)
      case clearingResponse(RVData_API_v1_Clear_Response)
      case groupsResponse(RVData_API_v1_Groups_Response)
      case linkResponse(RVData_API_v1_Link_Response)
      case libraryResponse(RVData_API_v1_Library_Response)
      case looksResponse(RVData_API_v1_Looks_Response)
      case macroResponse(RVData_API_v1_Macro_Response)
      case masksResponse(RVData_API_v1_Masks_Response)
      case mediaResponse(RVData_API_v1_Media_Response)
      case messageResponse(RVData_API_v1_Message_Response)
      case miscellaneousResponse(RVData_API_v1_Miscellaneous_Response)
      case playlistResponse(RVData_API_v1_Playlist_Response)
      case prerollResponse(RVData_API_v1_Preroll_Response)
      case presentationResponse(RVData_API_v1_Presentation_Response)
      case propResponse(RVData_API_v1_Prop_Response)
      case stageResponse(RVData_API_v1_Stage_Response)
      case statusResponse(RVData_API_v1_Status_Response)
      case themeResponse(RVData_API_v1_Theme_Response)
      case timerResponse(RVData_API_v1_Timer_Response)
      case transportResponse(RVData_API_v1_Transport_Response)
      case triggerResponse(RVData_API_v1_Trigger_Response)
      case videoInputsResponse(RVData_API_v1_Video_Inputs_Response)
      case announcementResponse(RVData_API_v1_Announcement_Response)
      case errorResponse(RVData_API_v1_Error_Response)

    }

    enum OneOf_StreamingUpdateIdentifier: Equatable, Sendable {
      case updateIdentifier(String)

    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_NetworkAPI_v1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NetworkAPI_v1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_NetworkAPI_v1.Action?
        var hadOneofValue = false
        if let current = self.command {
          hadOneofValue = true
          if case .action(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.command = .action(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .action(let v)? = self.command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_NetworkAPI_v1, rhs: RVData_NetworkAPI_v1) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_NetworkAPI_v1.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_NetworkAPI_v1.protoMessageName + ".Action"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "audio_request"),
    2: .standard(proto: "capture_request"),
    3: .standard(proto: "clearing_request"),
    4: .standard(proto: "groups_request"),
    5: .standard(proto: "link_request"),
    6: .standard(proto: "library_request"),
    7: .standard(proto: "looks_request"),
    8: .standard(proto: "macro_request"),
    9: .standard(proto: "masks_request"),
    10: .standard(proto: "media_request"),
    11: .standard(proto: "message_request"),
    12: .standard(proto: "miscellaneous_request"),
    13: .standard(proto: "playlist_request"),
    14: .standard(proto: "preroll_request"),
    15: .standard(proto: "presentation_request"),
    16: .standard(proto: "prop_request"),
    17: .standard(proto: "stage_request"),
    18: .standard(proto: "status_request"),
    19: .standard(proto: "theme_request"),
    20: .standard(proto: "timer_request"),
    21: .standard(proto: "transport_request"),
    22: .standard(proto: "trigger_request"),
    23: .standard(proto: "video_inputs_request"),
    24: .standard(proto: "announcement_request"),
    101: .standard(proto: "audio_response"),
    102: .standard(proto: "capture_response"),
    103: .standard(proto: "clearing_response"),
    104: .standard(proto: "groups_response"),
    105: .standard(proto: "link_response"),
    106: .standard(proto: "library_response"),
    107: .standard(proto: "looks_response"),
    108: .standard(proto: "macro_response"),
    109: .standard(proto: "masks_response"),
    110: .standard(proto: "media_response"),
    111: .standard(proto: "message_response"),
    112: .standard(proto: "miscellaneous_response"),
    113: .standard(proto: "playlist_response"),
    114: .standard(proto: "preroll_response"),
    115: .standard(proto: "presentation_response"),
    116: .standard(proto: "prop_response"),
    117: .standard(proto: "stage_response"),
    118: .standard(proto: "status_response"),
    119: .standard(proto: "theme_response"),
    120: .standard(proto: "timer_response"),
    121: .standard(proto: "transport_response"),
    122: .standard(proto: "trigger_response"),
    123: .standard(proto: "video_inputs_response"),
    124: .standard(proto: "announcement_response"),
    200: .standard(proto: "error_response"),
    201: .standard(proto: "update_identifier"),
  ]

  fileprivate class _StorageClass {
    var _request: RVData_NetworkAPI_v1.Action.OneOf_Request?
    var _response: RVData_NetworkAPI_v1.Action.OneOf_Response?
    var _streamingUpdateIdentifier: RVData_NetworkAPI_v1.Action.OneOf_StreamingUpdateIdentifier?

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
      _streamingUpdateIdentifier = source._streamingUpdateIdentifier
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: RVData_API_v1_Audio_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .audioRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .audioRequest(v)
          }
        }()
        case 2: try {
          var v: RVData_API_v1_Capture_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .captureRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .captureRequest(v)
          }
        }()
        case 3: try {
          var v: RVData_API_v1_Clear_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .clearingRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .clearingRequest(v)
          }
        }()
        case 4: try {
          var v: RVData_API_v1_Groups_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .groupsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .groupsRequest(v)
          }
        }()
        case 5: try {
          var v: RVData_API_v1_Link_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .linkRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .linkRequest(v)
          }
        }()
        case 6: try {
          var v: RVData_API_v1_Library_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .libraryRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .libraryRequest(v)
          }
        }()
        case 7: try {
          var v: RVData_API_v1_Looks_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .looksRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .looksRequest(v)
          }
        }()
        case 8: try {
          var v: RVData_API_v1_Macro_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .macroRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .macroRequest(v)
          }
        }()
        case 9: try {
          var v: RVData_API_v1_Masks_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .masksRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .masksRequest(v)
          }
        }()
        case 10: try {
          var v: RVData_API_v1_Media_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .mediaRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .mediaRequest(v)
          }
        }()
        case 11: try {
          var v: RVData_API_v1_Message_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .messageRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .messageRequest(v)
          }
        }()
        case 12: try {
          var v: RVData_API_v1_Miscellaneous_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .miscellaneousRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .miscellaneousRequest(v)
          }
        }()
        case 13: try {
          var v: RVData_API_v1_Playlist_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .playlistRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .playlistRequest(v)
          }
        }()
        case 14: try {
          var v: RVData_API_v1_Preroll_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .prerollRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .prerollRequest(v)
          }
        }()
        case 15: try {
          var v: RVData_API_v1_Presentation_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .presentationRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .presentationRequest(v)
          }
        }()
        case 16: try {
          var v: RVData_API_v1_Prop_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .propRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .propRequest(v)
          }
        }()
        case 17: try {
          var v: RVData_API_v1_Stage_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .stageRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .stageRequest(v)
          }
        }()
        case 18: try {
          var v: RVData_API_v1_Status_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .statusRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .statusRequest(v)
          }
        }()
        case 19: try {
          var v: RVData_API_v1_Theme_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .themeRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .themeRequest(v)
          }
        }()
        case 20: try {
          var v: RVData_API_v1_Timer_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .timerRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .timerRequest(v)
          }
        }()
        case 21: try {
          var v: RVData_API_v1_Transport_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .transportRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .transportRequest(v)
          }
        }()
        case 22: try {
          var v: RVData_API_v1_Trigger_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .triggerRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .triggerRequest(v)
          }
        }()
        case 23: try {
          var v: RVData_API_v1_Video_Inputs_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .videoInputsRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .videoInputsRequest(v)
          }
        }()
        case 24: try {
          var v: RVData_API_v1_Announcement_Request?
          var hadOneofValue = false
          if let current = _storage._request {
            hadOneofValue = true
            if case .announcementRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._request = .announcementRequest(v)
          }
        }()
        case 101: try {
          var v: RVData_API_v1_Audio_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .audioResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .audioResponse(v)
          }
        }()
        case 102: try {
          var v: RVData_API_v1_Capture_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .captureResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .captureResponse(v)
          }
        }()
        case 103: try {
          var v: RVData_API_v1_Clear_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .clearingResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .clearingResponse(v)
          }
        }()
        case 104: try {
          var v: RVData_API_v1_Groups_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .groupsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .groupsResponse(v)
          }
        }()
        case 105: try {
          var v: RVData_API_v1_Link_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .linkResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .linkResponse(v)
          }
        }()
        case 106: try {
          var v: RVData_API_v1_Library_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .libraryResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .libraryResponse(v)
          }
        }()
        case 107: try {
          var v: RVData_API_v1_Looks_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .looksResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .looksResponse(v)
          }
        }()
        case 108: try {
          var v: RVData_API_v1_Macro_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .macroResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .macroResponse(v)
          }
        }()
        case 109: try {
          var v: RVData_API_v1_Masks_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .masksResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .masksResponse(v)
          }
        }()
        case 110: try {
          var v: RVData_API_v1_Media_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .mediaResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .mediaResponse(v)
          }
        }()
        case 111: try {
          var v: RVData_API_v1_Message_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .messageResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .messageResponse(v)
          }
        }()
        case 112: try {
          var v: RVData_API_v1_Miscellaneous_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .miscellaneousResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .miscellaneousResponse(v)
          }
        }()
        case 113: try {
          var v: RVData_API_v1_Playlist_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .playlistResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .playlistResponse(v)
          }
        }()
        case 114: try {
          var v: RVData_API_v1_Preroll_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .prerollResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .prerollResponse(v)
          }
        }()
        case 115: try {
          var v: RVData_API_v1_Presentation_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .presentationResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .presentationResponse(v)
          }
        }()
        case 116: try {
          var v: RVData_API_v1_Prop_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .propResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .propResponse(v)
          }
        }()
        case 117: try {
          var v: RVData_API_v1_Stage_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .stageResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .stageResponse(v)
          }
        }()
        case 118: try {
          var v: RVData_API_v1_Status_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .statusResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .statusResponse(v)
          }
        }()
        case 119: try {
          var v: RVData_API_v1_Theme_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .themeResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .themeResponse(v)
          }
        }()
        case 120: try {
          var v: RVData_API_v1_Timer_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .timerResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .timerResponse(v)
          }
        }()
        case 121: try {
          var v: RVData_API_v1_Transport_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .transportResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .transportResponse(v)
          }
        }()
        case 122: try {
          var v: RVData_API_v1_Trigger_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .triggerResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .triggerResponse(v)
          }
        }()
        case 123: try {
          var v: RVData_API_v1_Video_Inputs_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .videoInputsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .videoInputsResponse(v)
          }
        }()
        case 124: try {
          var v: RVData_API_v1_Announcement_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .announcementResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .announcementResponse(v)
          }
        }()
        case 200: try {
          var v: RVData_API_v1_Error_Response?
          var hadOneofValue = false
          if let current = _storage._response {
            hadOneofValue = true
            if case .errorResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._response = .errorResponse(v)
          }
        }()
        case 201: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._streamingUpdateIdentifier != nil {try decoder.handleConflictingOneOf()}
            _storage._streamingUpdateIdentifier = .updateIdentifier(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      switch _storage._request {
      case .audioRequest?: try {
        guard case .audioRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .captureRequest?: try {
        guard case .captureRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .clearingRequest?: try {
        guard case .clearingRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .groupsRequest?: try {
        guard case .groupsRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .linkRequest?: try {
        guard case .linkRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .libraryRequest?: try {
        guard case .libraryRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .looksRequest?: try {
        guard case .looksRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .macroRequest?: try {
        guard case .macroRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .masksRequest?: try {
        guard case .masksRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .mediaRequest?: try {
        guard case .mediaRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .messageRequest?: try {
        guard case .messageRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .miscellaneousRequest?: try {
        guard case .miscellaneousRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .playlistRequest?: try {
        guard case .playlistRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case .prerollRequest?: try {
        guard case .prerollRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }()
      case .presentationRequest?: try {
        guard case .presentationRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .propRequest?: try {
        guard case .propRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .stageRequest?: try {
        guard case .stageRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      case .statusRequest?: try {
        guard case .statusRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }()
      case .themeRequest?: try {
        guard case .themeRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }()
      case .timerRequest?: try {
        guard case .timerRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }()
      case .transportRequest?: try {
        guard case .transportRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }()
      case .triggerRequest?: try {
        guard case .triggerRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }()
      case .videoInputsRequest?: try {
        guard case .videoInputsRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }()
      case .announcementRequest?: try {
        guard case .announcementRequest(let v)? = _storage._request else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }()
      case nil: break
      }
      switch _storage._response {
      case .audioResponse?: try {
        guard case .audioResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }()
      case .captureResponse?: try {
        guard case .captureResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      }()
      case .clearingResponse?: try {
        guard case .clearingResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      }()
      case .groupsResponse?: try {
        guard case .groupsResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      }()
      case .linkResponse?: try {
        guard case .linkResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      }()
      case .libraryResponse?: try {
        guard case .libraryResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      }()
      case .looksResponse?: try {
        guard case .looksResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      }()
      case .macroResponse?: try {
        guard case .macroResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      }()
      case .masksResponse?: try {
        guard case .masksResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      }()
      case .mediaResponse?: try {
        guard case .mediaResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      }()
      case .messageResponse?: try {
        guard case .messageResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      }()
      case .miscellaneousResponse?: try {
        guard case .miscellaneousResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .playlistResponse?: try {
        guard case .playlistResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      }()
      case .prerollResponse?: try {
        guard case .prerollResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
      }()
      case .presentationResponse?: try {
        guard case .presentationResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      }()
      case .propResponse?: try {
        guard case .propResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
      }()
      case .stageResponse?: try {
        guard case .stageResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      }()
      case .statusResponse?: try {
        guard case .statusResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
      }()
      case .themeResponse?: try {
        guard case .themeResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 119)
      }()
      case .timerResponse?: try {
        guard case .timerResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 120)
      }()
      case .transportResponse?: try {
        guard case .transportResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 121)
      }()
      case .triggerResponse?: try {
        guard case .triggerResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 122)
      }()
      case .videoInputsResponse?: try {
        guard case .videoInputsResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
      }()
      case .announcementResponse?: try {
        guard case .announcementResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
      }()
      case .errorResponse?: try {
        guard case .errorResponse(let v)? = _storage._response else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }()
      case nil: break
      }
      try { if case .updateIdentifier(let v)? = _storage._streamingUpdateIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 201)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_NetworkAPI_v1.Action, rhs: RVData_NetworkAPI_v1.Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        if _storage._streamingUpdateIdentifier != rhs_storage._streamingUpdateIdentifier {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
