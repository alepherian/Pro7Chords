// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsCreate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Create: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: Analytics_Create.OneOf_Component? = nil

  var library: Analytics_Create.Library {
    get {
      if case .library(let v)? = component {return v}
      return Analytics_Create.Library()
    }
    set {component = .library(newValue)}
  }

  var playlist: Analytics_Create.Playlist {
    get {
      if case .playlist(let v)? = component {return v}
      return Analytics_Create.Playlist()
    }
    set {component = .playlist(newValue)}
  }

  var presentation: Analytics_Create.Presentation {
    get {
      if case .presentation(let v)? = component {return v}
      return Analytics_Create.Presentation()
    }
    set {component = .presentation(newValue)}
  }

  var templatePlaylist: Analytics_Create.TemplatePlaylist {
    get {
      if case .templatePlaylist(let v)? = component {return v}
      return Analytics_Create.TemplatePlaylist()
    }
    set {component = .templatePlaylist(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Component: Equatable, Sendable {
    case library(Analytics_Create.Library)
    case playlist(Analytics_Create.Playlist)
    case presentation(Analytics_Create.Presentation)
    case templatePlaylist(Analytics_Create.TemplatePlaylist)

  }

  struct Library: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var source: Analytics_Create.Library.Source = .unknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Source: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case unknown // = 0
      case applicationMenu // = 1
      case libraryOutlineAddButton // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .applicationMenu
        case 2: self = .libraryOutlineAddButton
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .applicationMenu: return 1
        case .libraryOutlineAddButton: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Create.Library.Source] = [
        .unknown,
        .applicationMenu,
        .libraryOutlineAddButton,
      ]

    }

    init() {}
  }

  struct Playlist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var source: Analytics_Create.Playlist.Source = .unknown

    var type: Analytics_Create.Playlist.TypeEnum = .unknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Source: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case unknown // = 0
      case applicationMenu // = 1
      case libraryOutlineAddButton // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .applicationMenu
        case 2: self = .libraryOutlineAddButton
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .applicationMenu: return 1
        case .libraryOutlineAddButton: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Create.Playlist.Source] = [
        .unknown,
        .applicationMenu,
        .libraryOutlineAddButton,
      ]

    }

    enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case unknown // = 0
      case presentation // = 1
      case planningCenter // = 2
      case folder // = 3
      case templatePlaylist // = 4
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .presentation
        case 2: self = .planningCenter
        case 3: self = .folder
        case 4: self = .templatePlaylist
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .presentation: return 1
        case .planningCenter: return 2
        case .folder: return 3
        case .templatePlaylist: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Create.Playlist.TypeEnum] = [
        .unknown,
        .presentation,
        .planningCenter,
        .folder,
        .templatePlaylist,
      ]

    }

    init() {}
  }

  struct Presentation: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var source: Analytics_Create.Presentation.Source = .unknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Source: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case unknown // = 0
      case applicationMenu // = 1
      case libraryOutlineAddButton // = 2
      case detailAddButton // = 3
      case unlinkedHeader // = 4
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .applicationMenu
        case 2: self = .libraryOutlineAddButton
        case 3: self = .detailAddButton
        case 4: self = .unlinkedHeader
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .applicationMenu: return 1
        case .libraryOutlineAddButton: return 2
        case .detailAddButton: return 3
        case .unlinkedHeader: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Create.Presentation.Source] = [
        .unknown,
        .applicationMenu,
        .libraryOutlineAddButton,
        .detailAddButton,
        .unlinkedHeader,
      ]

    }

    init() {}
  }

  struct TemplatePlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var totalItemCount: Int32 = 0

    var headerCount: Int32 = 0

    var placeholderCount: Int32 = 0

    var presentationCount: Int32 = 0

    var mediaCount: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Create"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "library"),
    2: .same(proto: "playlist"),
    3: .same(proto: "presentation"),
    4: .standard(proto: "template_playlist"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Create.Library?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .library(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .library(v)
        }
      }()
      case 2: try {
        var v: Analytics_Create.Playlist?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .playlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .playlist(v)
        }
      }()
      case 3: try {
        var v: Analytics_Create.Presentation?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .presentation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .presentation(v)
        }
      }()
      case 4: try {
        var v: Analytics_Create.TemplatePlaylist?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .templatePlaylist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .templatePlaylist(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.component {
    case .library?: try {
      guard case .library(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .playlist?: try {
      guard case .playlist(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .presentation?: try {
      guard case .presentation(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .templatePlaylist?: try {
      guard case .templatePlaylist(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Create, rhs: Analytics_Create) -> Bool {
    if lhs.component != rhs.component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Create.Library: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Create.protoMessageName + ".Library"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Create.Library, rhs: Analytics_Create.Library) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Create.Library.Source: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_UNKNOWN"),
    1: .same(proto: "SOURCE_APPLICATION_MENU"),
    2: .same(proto: "SOURCE_LIBRARY_OUTLINE_ADD_BUTTON"),
  ]
}

extension Analytics_Create.Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Create.protoMessageName + ".Playlist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 1)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Create.Playlist, rhs: Analytics_Create.Playlist) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Create.Playlist.Source: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_UNKNOWN"),
    1: .same(proto: "SOURCE_APPLICATION_MENU"),
    2: .same(proto: "SOURCE_LIBRARY_OUTLINE_ADD_BUTTON"),
  ]
}

extension Analytics_Create.Playlist.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_PRESENTATION"),
    2: .same(proto: "TYPE_PLANNING_CENTER"),
    3: .same(proto: "TYPE_FOLDER"),
    4: .same(proto: "TYPE_TEMPLATE_PLAYLIST"),
  ]
}

extension Analytics_Create.Presentation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Create.protoMessageName + ".Presentation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Create.Presentation, rhs: Analytics_Create.Presentation) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Create.Presentation.Source: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_UNKNOWN"),
    1: .same(proto: "SOURCE_APPLICATION_MENU"),
    2: .same(proto: "SOURCE_LIBRARY_OUTLINE_ADD_BUTTON"),
    3: .same(proto: "SOURCE_DETAIL_ADD_BUTTON"),
    4: .same(proto: "SOURCE_UNLINKED_HEADER"),
  ]
}

extension Analytics_Create.TemplatePlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Create.protoMessageName + ".TemplatePlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_item_count"),
    2: .standard(proto: "header_count"),
    3: .standard(proto: "placeholder_count"),
    4: .standard(proto: "presentation_count"),
    5: .standard(proto: "media_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalItemCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.headerCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.placeholderCount) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.presentationCount) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.mediaCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalItemCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalItemCount, fieldNumber: 1)
    }
    if self.headerCount != 0 {
      try visitor.visitSingularInt32Field(value: self.headerCount, fieldNumber: 2)
    }
    if self.placeholderCount != 0 {
      try visitor.visitSingularInt32Field(value: self.placeholderCount, fieldNumber: 3)
    }
    if self.presentationCount != 0 {
      try visitor.visitSingularInt32Field(value: self.presentationCount, fieldNumber: 4)
    }
    if self.mediaCount != 0 {
      try visitor.visitSingularInt32Field(value: self.mediaCount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Create.TemplatePlaylist, rhs: Analytics_Create.TemplatePlaylist) -> Bool {
    if lhs.totalItemCount != rhs.totalItemCount {return false}
    if lhs.headerCount != rhs.headerCount {return false}
    if lhs.placeholderCount != rhs.placeholderCount {return false}
    if lhs.presentationCount != rhs.presentationCount {return false}
    if lhs.mediaCount != rhs.mediaCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
