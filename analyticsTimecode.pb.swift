// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsTimecode.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Timecode: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Analytics_Timecode.OneOf_Event? = nil

  var startup: Analytics_Timecode.Startup {
    get {
      if case .startup(let v)? = event {return v}
      return Analytics_Timecode.Startup()
    }
    set {event = .startup(newValue)}
  }

  var activate: Analytics_Timecode.Activate {
    get {
      if case .activate(let v)? = event {return v}
      return Analytics_Timecode.Activate()
    }
    set {event = .activate(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable, Sendable {
    case startup(Analytics_Timecode.Startup)
    case activate(Analytics_Timecode.Activate)

  }

  struct Startup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isInputConfigured: Bool = false

    var isEnabled: Bool = false

    var isPlaylistSelected: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Activate: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlistItemCount: Int32 = 0

    var cueCount: Int32 = 0

    var isStartup: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Timecode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Timecode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startup"),
    2: .same(proto: "activate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Timecode.Startup?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .startup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .startup(v)
        }
      }()
      case 2: try {
        var v: Analytics_Timecode.Activate?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .activate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .activate(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.event {
    case .startup?: try {
      guard case .startup(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .activate?: try {
      guard case .activate(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timecode, rhs: Analytics_Timecode) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Timecode.Startup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Timecode.protoMessageName + ".Startup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_input_configured"),
    2: .standard(proto: "is_enabled"),
    3: .standard(proto: "is_playlist_selected"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isInputConfigured) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isPlaylistSelected) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isInputConfigured != false {
      try visitor.visitSingularBoolField(value: self.isInputConfigured, fieldNumber: 1)
    }
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 2)
    }
    if self.isPlaylistSelected != false {
      try visitor.visitSingularBoolField(value: self.isPlaylistSelected, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timecode.Startup, rhs: Analytics_Timecode.Startup) -> Bool {
    if lhs.isInputConfigured != rhs.isInputConfigured {return false}
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.isPlaylistSelected != rhs.isPlaylistSelected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Timecode.Activate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Timecode.protoMessageName + ".Activate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "playlist_item_count"),
    2: .standard(proto: "cue_count"),
    3: .standard(proto: "is_startup"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playlistItemCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.cueCount) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isStartup) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playlistItemCount != 0 {
      try visitor.visitSingularInt32Field(value: self.playlistItemCount, fieldNumber: 1)
    }
    if self.cueCount != 0 {
      try visitor.visitSingularInt32Field(value: self.cueCount, fieldNumber: 2)
    }
    if self.isStartup != false {
      try visitor.visitSingularBoolField(value: self.isStartup, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timecode.Activate, rhs: Analytics_Timecode.Activate) -> Bool {
    if lhs.playlistItemCount != rhs.playlistItemCount {return false}
    if lhs.cueCount != rhs.cueCount {return false}
    if lhs.isStartup != rhs.isStartup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
