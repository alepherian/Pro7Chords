// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proworkspace.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_ProPresenterWorkspace: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var proScreens: [RVData_ProPresenterScreen] {
    get {return _storage._proScreens}
    set {_uniqueStorage()._proScreens = newValue}
  }

  var audienceLooks: [RVData_ProAudienceLook] {
    get {return _storage._audienceLooks}
    set {_uniqueStorage()._audienceLooks = newValue}
  }

  var liveAudienceLook: RVData_ProAudienceLook {
    get {return _storage._liveAudienceLook ?? RVData_ProAudienceLook()}
    set {_uniqueStorage()._liveAudienceLook = newValue}
  }
  /// Returns true if `liveAudienceLook` has been explicitly set.
  var hasLiveAudienceLook: Bool {return _storage._liveAudienceLook != nil}
  /// Clears the value of `liveAudienceLook`. Subsequent reads from it will return its default value.
  mutating func clearLiveAudienceLook() {_uniqueStorage()._liveAudienceLook = nil}

  var masks: [RVData_ProMask] {
    get {return _storage._masks}
    set {_uniqueStorage()._masks = newValue}
  }

  var videoInputs: [RVData_VideoInput] {
    get {return _storage._videoInputs}
    set {_uniqueStorage()._videoInputs = newValue}
  }

  var stageLayoutMappings: [RVData_Stage.ScreenAssignment] {
    get {return _storage._stageLayoutMappings}
    set {_uniqueStorage()._stageLayoutMappings = newValue}
  }

  var audioSettings: RVData_Audio.SettingsDocument {
    get {return _storage._audioSettings ?? RVData_Audio.SettingsDocument()}
    set {_uniqueStorage()._audioSettings = newValue}
  }
  /// Returns true if `audioSettings` has been explicitly set.
  var hasAudioSettings: Bool {return _storage._audioSettings != nil}
  /// Clears the value of `audioSettings`. Subsequent reads from it will return its default value.
  mutating func clearAudioSettings() {_uniqueStorage()._audioSettings = nil}

  var selectedLibraryName: String {
    get {return _storage._selectedLibraryName}
    set {_uniqueStorage()._selectedLibraryName = newValue}
  }

  var recordSettings: RVData_Recording.SettingsDocument {
    get {return _storage._recordSettings ?? RVData_Recording.SettingsDocument()}
    set {_uniqueStorage()._recordSettings = newValue}
  }
  /// Returns true if `recordSettings` has been explicitly set.
  var hasRecordSettings: Bool {return _storage._recordSettings != nil}
  /// Clears the value of `recordSettings`. Subsequent reads from it will return its default value.
  mutating func clearRecordSettings() {_uniqueStorage()._recordSettings = nil}

  var digitalAudioSetup: RVData_DigitalAudio.Setup {
    get {return _storage._digitalAudioSetup ?? RVData_DigitalAudio.Setup()}
    set {_uniqueStorage()._digitalAudioSetup = newValue}
  }
  /// Returns true if `digitalAudioSetup` has been explicitly set.
  var hasDigitalAudioSetup: Bool {return _storage._digitalAudioSetup != nil}
  /// Clears the value of `digitalAudioSetup`. Subsequent reads from it will return its default value.
  mutating func clearDigitalAudioSetup() {_uniqueStorage()._digitalAudioSetup = nil}

  var audioInputs: [RVData_AudioInput] {
    get {return _storage._audioInputs}
    set {_uniqueStorage()._audioInputs = newValue}
  }

  var audioInputTransitionTime: Double {
    get {return _storage._audioInputTransitionTime}
    set {_uniqueStorage()._audioInputTransitionTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_ProPresenterWorkspace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProPresenterWorkspace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pro_screens"),
    2: .standard(proto: "audience_looks"),
    3: .standard(proto: "live_audience_look"),
    4: .same(proto: "masks"),
    5: .same(proto: "videoInputs"),
    6: .standard(proto: "stage_layout_mappings"),
    7: .standard(proto: "audio_settings"),
    8: .standard(proto: "selected_library_name"),
    9: .standard(proto: "record_settings"),
    10: .standard(proto: "digital_audio_setup"),
    11: .standard(proto: "audio_inputs"),
    12: .standard(proto: "audio_input_transition_time"),
  ]

  fileprivate class _StorageClass {
    var _proScreens: [RVData_ProPresenterScreen] = []
    var _audienceLooks: [RVData_ProAudienceLook] = []
    var _liveAudienceLook: RVData_ProAudienceLook? = nil
    var _masks: [RVData_ProMask] = []
    var _videoInputs: [RVData_VideoInput] = []
    var _stageLayoutMappings: [RVData_Stage.ScreenAssignment] = []
    var _audioSettings: RVData_Audio.SettingsDocument? = nil
    var _selectedLibraryName: String = String()
    var _recordSettings: RVData_Recording.SettingsDocument? = nil
    var _digitalAudioSetup: RVData_DigitalAudio.Setup? = nil
    var _audioInputs: [RVData_AudioInput] = []
    var _audioInputTransitionTime: Double = 0

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _proScreens = source._proScreens
      _audienceLooks = source._audienceLooks
      _liveAudienceLook = source._liveAudienceLook
      _masks = source._masks
      _videoInputs = source._videoInputs
      _stageLayoutMappings = source._stageLayoutMappings
      _audioSettings = source._audioSettings
      _selectedLibraryName = source._selectedLibraryName
      _recordSettings = source._recordSettings
      _digitalAudioSetup = source._digitalAudioSetup
      _audioInputs = source._audioInputs
      _audioInputTransitionTime = source._audioInputTransitionTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._proScreens) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._audienceLooks) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._liveAudienceLook) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._masks) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._videoInputs) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._stageLayoutMappings) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._audioSettings) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._selectedLibraryName) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._recordSettings) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._digitalAudioSetup) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._audioInputs) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._audioInputTransitionTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._proScreens.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._proScreens, fieldNumber: 1)
      }
      if !_storage._audienceLooks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._audienceLooks, fieldNumber: 2)
      }
      try { if let v = _storage._liveAudienceLook {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._masks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._masks, fieldNumber: 4)
      }
      if !_storage._videoInputs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._videoInputs, fieldNumber: 5)
      }
      if !_storage._stageLayoutMappings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stageLayoutMappings, fieldNumber: 6)
      }
      try { if let v = _storage._audioSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._selectedLibraryName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._selectedLibraryName, fieldNumber: 8)
      }
      try { if let v = _storage._recordSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._digitalAudioSetup {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._audioInputs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._audioInputs, fieldNumber: 11)
      }
      if _storage._audioInputTransitionTime.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._audioInputTransitionTime, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProPresenterWorkspace, rhs: RVData_ProPresenterWorkspace) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._proScreens != rhs_storage._proScreens {return false}
        if _storage._audienceLooks != rhs_storage._audienceLooks {return false}
        if _storage._liveAudienceLook != rhs_storage._liveAudienceLook {return false}
        if _storage._masks != rhs_storage._masks {return false}
        if _storage._videoInputs != rhs_storage._videoInputs {return false}
        if _storage._stageLayoutMappings != rhs_storage._stageLayoutMappings {return false}
        if _storage._audioSettings != rhs_storage._audioSettings {return false}
        if _storage._selectedLibraryName != rhs_storage._selectedLibraryName {return false}
        if _storage._recordSettings != rhs_storage._recordSettings {return false}
        if _storage._digitalAudioSetup != rhs_storage._digitalAudioSetup {return false}
        if _storage._audioInputs != rhs_storage._audioInputs {return false}
        if _storage._audioInputTransitionTime != rhs_storage._audioInputTransitionTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
