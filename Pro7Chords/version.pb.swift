// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: version.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_Version: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var majorVersion: UInt32 = 0

  var minorVersion: UInt32 = 0

  var patchVersion: UInt32 = 0

  var build: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_Version: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Version"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "major_version"),
    2: .standard(proto: "minor_version"),
    3: .standard(proto: "patch_version"),
    4: .same(proto: "build"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.majorVersion) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.minorVersion) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.patchVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.build) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.majorVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.majorVersion, fieldNumber: 1)
    }
    if self.minorVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.minorVersion, fieldNumber: 2)
    }
    if self.patchVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.patchVersion, fieldNumber: 3)
    }
    if !self.build.isEmpty {
      try visitor.visitSingularStringField(value: self.build, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Version, rhs: RVData_Version) -> Bool {
    if lhs.majorVersion != rhs.majorVersion {return false}
    if lhs.minorVersion != rhs.minorVersion {return false}
    if lhs.patchVersion != rhs.patchVersion {return false}
    if lhs.build != rhs.build {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
