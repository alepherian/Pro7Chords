// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ccli.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_CCLIDocument: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var applicationInfo: RVData_ApplicationInfo {
    get {return _storage._applicationInfo ?? RVData_ApplicationInfo()}
    set {_uniqueStorage()._applicationInfo = newValue}
  }
  /// Returns true if `applicationInfo` has been explicitly set.
  var hasApplicationInfo: Bool {return _storage._applicationInfo != nil}
  /// Clears the value of `applicationInfo`. Subsequent reads from it will return its default value.
  mutating func clearApplicationInfo() {_uniqueStorage()._applicationInfo = nil}

  var enableCcliDisplay: Bool {
    get {return _storage._enableCcliDisplay}
    set {_uniqueStorage()._enableCcliDisplay = newValue}
  }

  var ccliLicense: String {
    get {return _storage._ccliLicense}
    set {_uniqueStorage()._ccliLicense = newValue}
  }

  var displayType: RVData_CCLIDocument.DisplayType {
    get {return _storage._displayType}
    set {_uniqueStorage()._displayType = newValue}
  }

  var template: RVData_Template.Slide {
    get {return _storage._template ?? RVData_Template.Slide()}
    set {_uniqueStorage()._template = newValue}
  }
  /// Returns true if `template` has been explicitly set.
  var hasTemplate: Bool {return _storage._template != nil}
  /// Clears the value of `template`. Subsequent reads from it will return its default value.
  mutating func clearTemplate() {_uniqueStorage()._template = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DisplayType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case firstSlide // = 0
    case lastSlide // = 1
    case firstAndLastSlide // = 2
    case allSlides // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .firstSlide
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .firstSlide
      case 1: self = .lastSlide
      case 2: self = .firstAndLastSlide
      case 3: self = .allSlides
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .firstSlide: return 0
      case .lastSlide: return 1
      case .firstAndLastSlide: return 2
      case .allSlides: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_CCLIDocument.DisplayType] = [
      .firstSlide,
      .lastSlide,
      .firstAndLastSlide,
      .allSlides,
    ]

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct RVData_CopyrightLayout: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokens: [RVData_CopyrightLayout.Token] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TokenType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case text // = 0
    case artist // = 1
    case author // = 2
    case publisher // = 3
    case title // = 4
    case copyrightYear // = 5
    case licenseNumber // = 6
    case songNumber // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .text
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .text
      case 1: self = .artist
      case 2: self = .author
      case 3: self = .publisher
      case 4: self = .title
      case 5: self = .copyrightYear
      case 6: self = .licenseNumber
      case 7: self = .songNumber
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .text: return 0
      case .artist: return 1
      case .author: return 2
      case .publisher: return 3
      case .title: return 4
      case .copyrightYear: return 5
      case .licenseNumber: return 6
      case .songNumber: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_CopyrightLayout.TokenType] = [
      .text,
      .artist,
      .author,
      .publisher,
      .title,
      .copyrightYear,
      .licenseNumber,
      .songNumber,
    ]

  }

  struct Token: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tokenType: RVData_CopyrightLayout.TokenType = .text

    var text: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_CCLIDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CCLIDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "application_info"),
    2: .standard(proto: "enable_ccli_display"),
    3: .standard(proto: "ccli_license"),
    4: .standard(proto: "display_type"),
    5: .same(proto: "template"),
  ]

  fileprivate class _StorageClass {
    var _applicationInfo: RVData_ApplicationInfo? = nil
    var _enableCcliDisplay: Bool = false
    var _ccliLicense: String = String()
    var _displayType: RVData_CCLIDocument.DisplayType = .firstSlide
    var _template: RVData_Template.Slide? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _applicationInfo = source._applicationInfo
      _enableCcliDisplay = source._enableCcliDisplay
      _ccliLicense = source._ccliLicense
      _displayType = source._displayType
      _template = source._template
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._applicationInfo) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._enableCcliDisplay) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ccliLicense) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._displayType) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._template) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._applicationInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._enableCcliDisplay != false {
        try visitor.visitSingularBoolField(value: _storage._enableCcliDisplay, fieldNumber: 2)
      }
      if !_storage._ccliLicense.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ccliLicense, fieldNumber: 3)
      }
      if _storage._displayType != .firstSlide {
        try visitor.visitSingularEnumField(value: _storage._displayType, fieldNumber: 4)
      }
      try { if let v = _storage._template {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_CCLIDocument, rhs: RVData_CCLIDocument) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._applicationInfo != rhs_storage._applicationInfo {return false}
        if _storage._enableCcliDisplay != rhs_storage._enableCcliDisplay {return false}
        if _storage._ccliLicense != rhs_storage._ccliLicense {return false}
        if _storage._displayType != rhs_storage._displayType {return false}
        if _storage._template != rhs_storage._template {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_CCLIDocument.DisplayType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISPLAY_TYPE_FIRST_SLIDE"),
    1: .same(proto: "DISPLAY_TYPE_LAST_SLIDE"),
    2: .same(proto: "DISPLAY_TYPE_FIRST_AND_LAST_SLIDE"),
    3: .same(proto: "DISPLAY_TYPE_ALL_SLIDES"),
  ]
}

extension RVData_CopyrightLayout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CopyrightLayout"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "tokens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tokens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokens, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_CopyrightLayout, rhs: RVData_CopyrightLayout) -> Bool {
    if lhs.tokens != rhs.tokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_CopyrightLayout.TokenType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Text"),
    1: .same(proto: "Artist"),
    2: .same(proto: "Author"),
    3: .same(proto: "Publisher"),
    4: .same(proto: "Title"),
    5: .same(proto: "CopyrightYear"),
    6: .same(proto: "LicenseNumber"),
    7: .same(proto: "SongNumber"),
  ]
}

extension RVData_CopyrightLayout.Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_CopyrightLayout.protoMessageName + ".Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_type"),
    2: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.tokenType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tokenType != .text {
      try visitor.visitSingularEnumField(value: self.tokenType, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_CopyrightLayout.Token, rhs: RVData_CopyrightLayout.Token) -> Bool {
    if lhs.tokenType != rhs.tokenType {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
