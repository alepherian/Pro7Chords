// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: background.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_Background: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isEnabled: Bool = false

  var fill: RVData_Background.OneOf_Fill? = nil

  var color: RVData_Color {
    get {
      if case .color(let v)? = fill {return v}
      return RVData_Color()
    }
    set {fill = .color(newValue)}
  }

  var gradient: RVData_Graphics.Gradient {
    get {
      if case .gradient(let v)? = fill {return v}
      return RVData_Graphics.Gradient()
    }
    set {fill = .gradient(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Fill: Equatable, Sendable {
    case color(RVData_Color)
    case gradient(RVData_Graphics.Gradient)

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_Background: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Background"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "is_enabled"),
    1: .same(proto: "color"),
    2: .same(proto: "gradient"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_Color?
        var hadOneofValue = false
        if let current = self.fill {
          hadOneofValue = true
          if case .color(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.fill = .color(v)
        }
      }()
      case 2: try {
        var v: RVData_Graphics.Gradient?
        var hadOneofValue = false
        if let current = self.fill {
          hadOneofValue = true
          if case .gradient(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.fill = .gradient(v)
        }
      }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.fill {
    case .color?: try {
      guard case .color(let v)? = self.fill else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .gradient?: try {
      guard case .gradient(let v)? = self.fill else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Background, rhs: RVData_Background) -> Bool {
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.fill != rhs.fill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
