// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hotKey.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum RVData_KeyCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case ansiA // = 1
  case ansiB // = 2
  case ansiC // = 3
  case ansiD // = 4
  case ansiE // = 5
  case ansiF // = 6
  case ansiG // = 7
  case ansiH // = 8
  case ansiI // = 9
  case ansiJ // = 10
  case ansiK // = 11
  case ansiL // = 12
  case ansiM // = 13
  case ansiN // = 14
  case ansiO // = 15
  case ansiP // = 16
  case ansiQ // = 17
  case ansiR // = 18
  case ansiS // = 19
  case ansiT // = 20
  case ansiU // = 21
  case ansiV // = 22
  case ansiW // = 23
  case ansiX // = 24
  case ansiY // = 25
  case ansiZ // = 26
  case ansi0 // = 27
  case ansi1 // = 28
  case ansi2 // = 29
  case ansi3 // = 30
  case ansi4 // = 31
  case ansi5 // = 32
  case ansi6 // = 33
  case ansi7 // = 34
  case ansi8 // = 35
  case ansi9 // = 36
  case ansiEqual // = 37
  case ansiMinus // = 38
  case ansiRightBracket // = 39
  case ansiLeftBracket // = 40
  case ansiQuote // = 41
  case ansiSemicolon // = 42
  case ansiBackslash // = 43
  case ansiComma // = 44
  case ansiSlash // = 45
  case ansiPeriod // = 46
  case ansiGrave // = 47
  case ansiKeypadDecimal // = 48
  case ansiKeypadPlus // = 49
  case ansiKeypadClear // = 50
  case ansiKeypadDivide // = 51
  case ansiKeypadEnter // = 52
  case ansiKeypadMinus // = 53
  case ansiKeypadEquals // = 54
  case ansiKeypad0 // = 55
  case ansiKeypad1 // = 56
  case ansiKeypad2 // = 57
  case ansiKeypad3 // = 58
  case ansiKeypad4 // = 59
  case ansiKeypad5 // = 60
  case ansiKeypad6 // = 61
  case ansiKeypad7 // = 62
  case ansiKeypad8 // = 63
  case ansiKeypad9 // = 64
  case f1 // = 65
  case f2 // = 66
  case f3 // = 67
  case f4 // = 68
  case f5 // = 69
  case f6 // = 70
  case f7 // = 71
  case f8 // = 72
  case f9 // = 73
  case f10 // = 74
  case f11 // = 75
  case f12 // = 76
  case f13 // = 77
  case f14 // = 78
  case f15 // = 79
  case f16 // = 80
  case f17 // = 81
  case f18 // = 82
  case f19 // = 83
  case f20 // = 84
  case function // = 85
  case `return` // = 86
  case tab // = 87
  case space // = 88
  case delete // = 89
  case escape // = 90
  case command // = 91
  case shift // = 92
  case capsLock // = 93
  case option // = 94
  case control // = 95
  case rightShift // = 96
  case rightOption // = 97
  case rightControl // = 98
  case volumeUp // = 99
  case volumeDown // = 100
  case mute // = 101
  case help // = 102
  case home // = 103
  case pageUp // = 104
  case forwardDelete // = 105
  case end // = 106
  case pageDown // = 107
  case leftArrow // = 108
  case rightArrow // = 109
  case downArrow // = 110
  case upArrow // = 111
  case isoSelection // = 112
  case jisYen // = 113
  case jisUnderscore // = 114
  case jisKeypadComma // = 115
  case jisEisu // = 116
  case jisKana // = 117
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .ansiA
    case 2: self = .ansiB
    case 3: self = .ansiC
    case 4: self = .ansiD
    case 5: self = .ansiE
    case 6: self = .ansiF
    case 7: self = .ansiG
    case 8: self = .ansiH
    case 9: self = .ansiI
    case 10: self = .ansiJ
    case 11: self = .ansiK
    case 12: self = .ansiL
    case 13: self = .ansiM
    case 14: self = .ansiN
    case 15: self = .ansiO
    case 16: self = .ansiP
    case 17: self = .ansiQ
    case 18: self = .ansiR
    case 19: self = .ansiS
    case 20: self = .ansiT
    case 21: self = .ansiU
    case 22: self = .ansiV
    case 23: self = .ansiW
    case 24: self = .ansiX
    case 25: self = .ansiY
    case 26: self = .ansiZ
    case 27: self = .ansi0
    case 28: self = .ansi1
    case 29: self = .ansi2
    case 30: self = .ansi3
    case 31: self = .ansi4
    case 32: self = .ansi5
    case 33: self = .ansi6
    case 34: self = .ansi7
    case 35: self = .ansi8
    case 36: self = .ansi9
    case 37: self = .ansiEqual
    case 38: self = .ansiMinus
    case 39: self = .ansiRightBracket
    case 40: self = .ansiLeftBracket
    case 41: self = .ansiQuote
    case 42: self = .ansiSemicolon
    case 43: self = .ansiBackslash
    case 44: self = .ansiComma
    case 45: self = .ansiSlash
    case 46: self = .ansiPeriod
    case 47: self = .ansiGrave
    case 48: self = .ansiKeypadDecimal
    case 49: self = .ansiKeypadPlus
    case 50: self = .ansiKeypadClear
    case 51: self = .ansiKeypadDivide
    case 52: self = .ansiKeypadEnter
    case 53: self = .ansiKeypadMinus
    case 54: self = .ansiKeypadEquals
    case 55: self = .ansiKeypad0
    case 56: self = .ansiKeypad1
    case 57: self = .ansiKeypad2
    case 58: self = .ansiKeypad3
    case 59: self = .ansiKeypad4
    case 60: self = .ansiKeypad5
    case 61: self = .ansiKeypad6
    case 62: self = .ansiKeypad7
    case 63: self = .ansiKeypad8
    case 64: self = .ansiKeypad9
    case 65: self = .f1
    case 66: self = .f2
    case 67: self = .f3
    case 68: self = .f4
    case 69: self = .f5
    case 70: self = .f6
    case 71: self = .f7
    case 72: self = .f8
    case 73: self = .f9
    case 74: self = .f10
    case 75: self = .f11
    case 76: self = .f12
    case 77: self = .f13
    case 78: self = .f14
    case 79: self = .f15
    case 80: self = .f16
    case 81: self = .f17
    case 82: self = .f18
    case 83: self = .f19
    case 84: self = .f20
    case 85: self = .function
    case 86: self = .return
    case 87: self = .tab
    case 88: self = .space
    case 89: self = .delete
    case 90: self = .escape
    case 91: self = .command
    case 92: self = .shift
    case 93: self = .capsLock
    case 94: self = .option
    case 95: self = .control
    case 96: self = .rightShift
    case 97: self = .rightOption
    case 98: self = .rightControl
    case 99: self = .volumeUp
    case 100: self = .volumeDown
    case 101: self = .mute
    case 102: self = .help
    case 103: self = .home
    case 104: self = .pageUp
    case 105: self = .forwardDelete
    case 106: self = .end
    case 107: self = .pageDown
    case 108: self = .leftArrow
    case 109: self = .rightArrow
    case 110: self = .downArrow
    case 111: self = .upArrow
    case 112: self = .isoSelection
    case 113: self = .jisYen
    case 114: self = .jisUnderscore
    case 115: self = .jisKeypadComma
    case 116: self = .jisEisu
    case 117: self = .jisKana
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .ansiA: return 1
    case .ansiB: return 2
    case .ansiC: return 3
    case .ansiD: return 4
    case .ansiE: return 5
    case .ansiF: return 6
    case .ansiG: return 7
    case .ansiH: return 8
    case .ansiI: return 9
    case .ansiJ: return 10
    case .ansiK: return 11
    case .ansiL: return 12
    case .ansiM: return 13
    case .ansiN: return 14
    case .ansiO: return 15
    case .ansiP: return 16
    case .ansiQ: return 17
    case .ansiR: return 18
    case .ansiS: return 19
    case .ansiT: return 20
    case .ansiU: return 21
    case .ansiV: return 22
    case .ansiW: return 23
    case .ansiX: return 24
    case .ansiY: return 25
    case .ansiZ: return 26
    case .ansi0: return 27
    case .ansi1: return 28
    case .ansi2: return 29
    case .ansi3: return 30
    case .ansi4: return 31
    case .ansi5: return 32
    case .ansi6: return 33
    case .ansi7: return 34
    case .ansi8: return 35
    case .ansi9: return 36
    case .ansiEqual: return 37
    case .ansiMinus: return 38
    case .ansiRightBracket: return 39
    case .ansiLeftBracket: return 40
    case .ansiQuote: return 41
    case .ansiSemicolon: return 42
    case .ansiBackslash: return 43
    case .ansiComma: return 44
    case .ansiSlash: return 45
    case .ansiPeriod: return 46
    case .ansiGrave: return 47
    case .ansiKeypadDecimal: return 48
    case .ansiKeypadPlus: return 49
    case .ansiKeypadClear: return 50
    case .ansiKeypadDivide: return 51
    case .ansiKeypadEnter: return 52
    case .ansiKeypadMinus: return 53
    case .ansiKeypadEquals: return 54
    case .ansiKeypad0: return 55
    case .ansiKeypad1: return 56
    case .ansiKeypad2: return 57
    case .ansiKeypad3: return 58
    case .ansiKeypad4: return 59
    case .ansiKeypad5: return 60
    case .ansiKeypad6: return 61
    case .ansiKeypad7: return 62
    case .ansiKeypad8: return 63
    case .ansiKeypad9: return 64
    case .f1: return 65
    case .f2: return 66
    case .f3: return 67
    case .f4: return 68
    case .f5: return 69
    case .f6: return 70
    case .f7: return 71
    case .f8: return 72
    case .f9: return 73
    case .f10: return 74
    case .f11: return 75
    case .f12: return 76
    case .f13: return 77
    case .f14: return 78
    case .f15: return 79
    case .f16: return 80
    case .f17: return 81
    case .f18: return 82
    case .f19: return 83
    case .f20: return 84
    case .function: return 85
    case .return: return 86
    case .tab: return 87
    case .space: return 88
    case .delete: return 89
    case .escape: return 90
    case .command: return 91
    case .shift: return 92
    case .capsLock: return 93
    case .option: return 94
    case .control: return 95
    case .rightShift: return 96
    case .rightOption: return 97
    case .rightControl: return 98
    case .volumeUp: return 99
    case .volumeDown: return 100
    case .mute: return 101
    case .help: return 102
    case .home: return 103
    case .pageUp: return 104
    case .forwardDelete: return 105
    case .end: return 106
    case .pageDown: return 107
    case .leftArrow: return 108
    case .rightArrow: return 109
    case .downArrow: return 110
    case .upArrow: return 111
    case .isoSelection: return 112
    case .jisYen: return 113
    case .jisUnderscore: return 114
    case .jisKeypadComma: return 115
    case .jisEisu: return 116
    case .jisKana: return 117
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [RVData_KeyCode] = [
    .unknown,
    .ansiA,
    .ansiB,
    .ansiC,
    .ansiD,
    .ansiE,
    .ansiF,
    .ansiG,
    .ansiH,
    .ansiI,
    .ansiJ,
    .ansiK,
    .ansiL,
    .ansiM,
    .ansiN,
    .ansiO,
    .ansiP,
    .ansiQ,
    .ansiR,
    .ansiS,
    .ansiT,
    .ansiU,
    .ansiV,
    .ansiW,
    .ansiX,
    .ansiY,
    .ansiZ,
    .ansi0,
    .ansi1,
    .ansi2,
    .ansi3,
    .ansi4,
    .ansi5,
    .ansi6,
    .ansi7,
    .ansi8,
    .ansi9,
    .ansiEqual,
    .ansiMinus,
    .ansiRightBracket,
    .ansiLeftBracket,
    .ansiQuote,
    .ansiSemicolon,
    .ansiBackslash,
    .ansiComma,
    .ansiSlash,
    .ansiPeriod,
    .ansiGrave,
    .ansiKeypadDecimal,
    .ansiKeypadPlus,
    .ansiKeypadClear,
    .ansiKeypadDivide,
    .ansiKeypadEnter,
    .ansiKeypadMinus,
    .ansiKeypadEquals,
    .ansiKeypad0,
    .ansiKeypad1,
    .ansiKeypad2,
    .ansiKeypad3,
    .ansiKeypad4,
    .ansiKeypad5,
    .ansiKeypad6,
    .ansiKeypad7,
    .ansiKeypad8,
    .ansiKeypad9,
    .f1,
    .f2,
    .f3,
    .f4,
    .f5,
    .f6,
    .f7,
    .f8,
    .f9,
    .f10,
    .f11,
    .f12,
    .f13,
    .f14,
    .f15,
    .f16,
    .f17,
    .f18,
    .f19,
    .f20,
    .function,
    .return,
    .tab,
    .space,
    .delete,
    .escape,
    .command,
    .shift,
    .capsLock,
    .option,
    .control,
    .rightShift,
    .rightOption,
    .rightControl,
    .volumeUp,
    .volumeDown,
    .mute,
    .help,
    .home,
    .pageUp,
    .forwardDelete,
    .end,
    .pageDown,
    .leftArrow,
    .rightArrow,
    .downArrow,
    .upArrow,
    .isoSelection,
    .jisYen,
    .jisUnderscore,
    .jisKeypadComma,
    .jisEisu,
    .jisKana,
  ]

}

struct RVData_HotKey: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: RVData_KeyCode = .unknown

  var controlIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_KeyCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_CODE_UNKNOWN"),
    1: .same(proto: "KEY_CODE_ANSI_A"),
    2: .same(proto: "KEY_CODE_ANSI_B"),
    3: .same(proto: "KEY_CODE_ANSI_C"),
    4: .same(proto: "KEY_CODE_ANSI_D"),
    5: .same(proto: "KEY_CODE_ANSI_E"),
    6: .same(proto: "KEY_CODE_ANSI_F"),
    7: .same(proto: "KEY_CODE_ANSI_G"),
    8: .same(proto: "KEY_CODE_ANSI_H"),
    9: .same(proto: "KEY_CODE_ANSI_I"),
    10: .same(proto: "KEY_CODE_ANSI_J"),
    11: .same(proto: "KEY_CODE_ANSI_K"),
    12: .same(proto: "KEY_CODE_ANSI_L"),
    13: .same(proto: "KEY_CODE_ANSI_M"),
    14: .same(proto: "KEY_CODE_ANSI_N"),
    15: .same(proto: "KEY_CODE_ANSI_O"),
    16: .same(proto: "KEY_CODE_ANSI_P"),
    17: .same(proto: "KEY_CODE_ANSI_Q"),
    18: .same(proto: "KEY_CODE_ANSI_R"),
    19: .same(proto: "KEY_CODE_ANSI_S"),
    20: .same(proto: "KEY_CODE_ANSI_T"),
    21: .same(proto: "KEY_CODE_ANSI_U"),
    22: .same(proto: "KEY_CODE_ANSI_V"),
    23: .same(proto: "KEY_CODE_ANSI_W"),
    24: .same(proto: "KEY_CODE_ANSI_X"),
    25: .same(proto: "KEY_CODE_ANSI_Y"),
    26: .same(proto: "KEY_CODE_ANSI_Z"),
    27: .same(proto: "KEY_CODE_ANSI_0"),
    28: .same(proto: "KEY_CODE_ANSI_1"),
    29: .same(proto: "KEY_CODE_ANSI_2"),
    30: .same(proto: "KEY_CODE_ANSI_3"),
    31: .same(proto: "KEY_CODE_ANSI_4"),
    32: .same(proto: "KEY_CODE_ANSI_5"),
    33: .same(proto: "KEY_CODE_ANSI_6"),
    34: .same(proto: "KEY_CODE_ANSI_7"),
    35: .same(proto: "KEY_CODE_ANSI_8"),
    36: .same(proto: "KEY_CODE_ANSI_9"),
    37: .same(proto: "KEY_CODE_ANSI_EQUAL"),
    38: .same(proto: "KEY_CODE_ANSI_MINUS"),
    39: .same(proto: "KEY_CODE_ANSI_RIGHT_BRACKET"),
    40: .same(proto: "KEY_CODE_ANSI_LEFT_BRACKET"),
    41: .same(proto: "KEY_CODE_ANSI_QUOTE"),
    42: .same(proto: "KEY_CODE_ANSI_SEMICOLON"),
    43: .same(proto: "KEY_CODE_ANSI_BACKSLASH"),
    44: .same(proto: "KEY_CODE_ANSI_COMMA"),
    45: .same(proto: "KEY_CODE_ANSI_SLASH"),
    46: .same(proto: "KEY_CODE_ANSI_PERIOD"),
    47: .same(proto: "KEY_CODE_ANSI_GRAVE"),
    48: .same(proto: "KEY_CODE_ANSI_KEYPAD_DECIMAL"),
    49: .same(proto: "KEY_CODE_ANSI_KEYPAD_PLUS"),
    50: .same(proto: "KEY_CODE_ANSI_KEYPAD_CLEAR"),
    51: .same(proto: "KEY_CODE_ANSI_KEYPAD_DIVIDE"),
    52: .same(proto: "KEY_CODE_ANSI_KEYPAD_ENTER"),
    53: .same(proto: "KEY_CODE_ANSI_KEYPAD_MINUS"),
    54: .same(proto: "KEY_CODE_ANSI_KEYPAD_EQUALS"),
    55: .same(proto: "KEY_CODE_ANSI_KEYPAD_0"),
    56: .same(proto: "KEY_CODE_ANSI_KEYPAD_1"),
    57: .same(proto: "KEY_CODE_ANSI_KEYPAD_2"),
    58: .same(proto: "KEY_CODE_ANSI_KEYPAD_3"),
    59: .same(proto: "KEY_CODE_ANSI_KEYPAD_4"),
    60: .same(proto: "KEY_CODE_ANSI_KEYPAD_5"),
    61: .same(proto: "KEY_CODE_ANSI_KEYPAD_6"),
    62: .same(proto: "KEY_CODE_ANSI_KEYPAD_7"),
    63: .same(proto: "KEY_CODE_ANSI_KEYPAD_8"),
    64: .same(proto: "KEY_CODE_ANSI_KEYPAD_9"),
    65: .same(proto: "KEY_CODE_F1"),
    66: .same(proto: "KEY_CODE_F2"),
    67: .same(proto: "KEY_CODE_F3"),
    68: .same(proto: "KEY_CODE_F4"),
    69: .same(proto: "KEY_CODE_F5"),
    70: .same(proto: "KEY_CODE_F6"),
    71: .same(proto: "KEY_CODE_F7"),
    72: .same(proto: "KEY_CODE_F8"),
    73: .same(proto: "KEY_CODE_F9"),
    74: .same(proto: "KEY_CODE_F10"),
    75: .same(proto: "KEY_CODE_F11"),
    76: .same(proto: "KEY_CODE_F12"),
    77: .same(proto: "KEY_CODE_F13"),
    78: .same(proto: "KEY_CODE_F14"),
    79: .same(proto: "KEY_CODE_F15"),
    80: .same(proto: "KEY_CODE_F16"),
    81: .same(proto: "KEY_CODE_F17"),
    82: .same(proto: "KEY_CODE_F18"),
    83: .same(proto: "KEY_CODE_F19"),
    84: .same(proto: "KEY_CODE_F20"),
    85: .same(proto: "KEY_CODE_FUNCTION"),
    86: .same(proto: "KEY_CODE_RETURN"),
    87: .same(proto: "KEY_CODE_TAB"),
    88: .same(proto: "KEY_CODE_SPACE"),
    89: .same(proto: "KEY_CODE_DELETE"),
    90: .same(proto: "KEY_CODE_ESCAPE"),
    91: .same(proto: "KEY_CODE_COMMAND"),
    92: .same(proto: "KEY_CODE_SHIFT"),
    93: .same(proto: "KEY_CODE_CAPS_LOCK"),
    94: .same(proto: "KEY_CODE_OPTION"),
    95: .same(proto: "KEY_CODE_CONTROL"),
    96: .same(proto: "KEY_CODE_RIGHT_SHIFT"),
    97: .same(proto: "KEY_CODE_RIGHT_OPTION"),
    98: .same(proto: "KEY_CODE_RIGHT_CONTROL"),
    99: .same(proto: "KEY_CODE_VOLUME_UP"),
    100: .same(proto: "KEY_CODE_VOLUME_DOWN"),
    101: .same(proto: "KEY_CODE_MUTE"),
    102: .same(proto: "KEY_CODE_HELP"),
    103: .same(proto: "KEY_CODE_HOME"),
    104: .same(proto: "KEY_CODE_PAGE_UP"),
    105: .same(proto: "KEY_CODE_FORWARD_DELETE"),
    106: .same(proto: "KEY_CODE_END"),
    107: .same(proto: "KEY_CODE_PAGE_DOWN"),
    108: .same(proto: "KEY_CODE_LEFT_ARROW"),
    109: .same(proto: "KEY_CODE_RIGHT_ARROW"),
    110: .same(proto: "KEY_CODE_DOWN_ARROW"),
    111: .same(proto: "KEY_CODE_UP_ARROW"),
    112: .same(proto: "KEY_CODE_ISO_SELECTION"),
    113: .same(proto: "KEY_CODE_JIS_YEN"),
    114: .same(proto: "KEY_CODE_JIS_UNDERSCORE"),
    115: .same(proto: "KEY_CODE_JIS_KEYPAD_COMMA"),
    116: .same(proto: "KEY_CODE_JIS_EISU"),
    117: .same(proto: "KEY_CODE_JIS_KANA"),
  ]
}

extension RVData_HotKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .standard(proto: "control_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.controlIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unknown {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.controlIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.controlIdentifier, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_HotKey, rhs: RVData_HotKey) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.controlIdentifier != rhs.controlIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
