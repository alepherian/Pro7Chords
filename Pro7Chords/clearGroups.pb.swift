// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: clearGroups.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_ClearGroupsDocument: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var applicationInfo: RVData_ApplicationInfo {
    get {return _applicationInfo ?? RVData_ApplicationInfo()}
    set {_applicationInfo = newValue}
  }
  /// Returns true if `applicationInfo` has been explicitly set.
  var hasApplicationInfo: Bool {return self._applicationInfo != nil}
  /// Clears the value of `applicationInfo`. Subsequent reads from it will return its default value.
  mutating func clearApplicationInfo() {self._applicationInfo = nil}

  var groups: [RVData_ClearGroupsDocument.ClearGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ClearGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var name: String = String()

    var layerTargets: [RVData_Action.ClearType] = []

    var isHiddenInPreview: Bool = false

    var imageData: Data = Data()

    var imageType: RVData_ClearGroupsDocument.ClearGroup.ImageType = .custom

    var isIconTinted: Bool = false

    var iconTintColor: RVData_Color {
      get {return _iconTintColor ?? RVData_Color()}
      set {_iconTintColor = newValue}
    }
    /// Returns true if `iconTintColor` has been explicitly set.
    var hasIconTintColor: Bool {return self._iconTintColor != nil}
    /// Clears the value of `iconTintColor`. Subsequent reads from it will return its default value.
    mutating func clearIconTintColor() {self._iconTintColor = nil}

    var timelineTargets: [RVData_Action.ContentDestination] = []

    var clearPresentationNextSlide_p: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum ImageType: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case custom // = 0
      case one // = 1
      case two // = 2
      case three // = 3
      case four // = 4
      case five // = 5
      case six // = 6
      case seven // = 7
      case eight // = 8
      case nine // = 9
      case zero // = 10
      case all // = 11
      case megahorn // = 12
      case play // = 13
      case bulb // = 14
      case sunglasses // = 15
      case arrow // = 16
      case target // = 17
      case star // = 18
      case sun // = 19
      case bell // = 20
      case paperclip // = 21
      case flask // = 22
      case eyeglasses // = 23
      case cupcake // = 24
      case slide // = 25
      case hat // = 26
      case flower // = 27
      case heart // = 28
      case message // = 29
      case audio // = 30
      case cloud // = 31
      case exclamation // = 32
      case UNRECOGNIZED(Int)

      init() {
        self = .custom
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .custom
        case 1: self = .one
        case 2: self = .two
        case 3: self = .three
        case 4: self = .four
        case 5: self = .five
        case 6: self = .six
        case 7: self = .seven
        case 8: self = .eight
        case 9: self = .nine
        case 10: self = .zero
        case 11: self = .all
        case 12: self = .megahorn
        case 13: self = .play
        case 14: self = .bulb
        case 15: self = .sunglasses
        case 16: self = .arrow
        case 17: self = .target
        case 18: self = .star
        case 19: self = .sun
        case 20: self = .bell
        case 21: self = .paperclip
        case 22: self = .flask
        case 23: self = .eyeglasses
        case 24: self = .cupcake
        case 25: self = .slide
        case 26: self = .hat
        case 27: self = .flower
        case 28: self = .heart
        case 29: self = .message
        case 30: self = .audio
        case 31: self = .cloud
        case 32: self = .exclamation
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .custom: return 0
        case .one: return 1
        case .two: return 2
        case .three: return 3
        case .four: return 4
        case .five: return 5
        case .six: return 6
        case .seven: return 7
        case .eight: return 8
        case .nine: return 9
        case .zero: return 10
        case .all: return 11
        case .megahorn: return 12
        case .play: return 13
        case .bulb: return 14
        case .sunglasses: return 15
        case .arrow: return 16
        case .target: return 17
        case .star: return 18
        case .sun: return 19
        case .bell: return 20
        case .paperclip: return 21
        case .flask: return 22
        case .eyeglasses: return 23
        case .cupcake: return 24
        case .slide: return 25
        case .hat: return 26
        case .flower: return 27
        case .heart: return 28
        case .message: return 29
        case .audio: return 30
        case .cloud: return 31
        case .exclamation: return 32
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [RVData_ClearGroupsDocument.ClearGroup.ImageType] = [
        .custom,
        .one,
        .two,
        .three,
        .four,
        .five,
        .six,
        .seven,
        .eight,
        .nine,
        .zero,
        .all,
        .megahorn,
        .play,
        .bulb,
        .sunglasses,
        .arrow,
        .target,
        .star,
        .sun,
        .bell,
        .paperclip,
        .flask,
        .eyeglasses,
        .cupcake,
        .slide,
        .hat,
        .flower,
        .heart,
        .message,
        .audio,
        .cloud,
        .exclamation,
      ]

    }

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
    fileprivate var _iconTintColor: RVData_Color? = nil
  }

  init() {}

  fileprivate var _applicationInfo: RVData_ApplicationInfo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_ClearGroupsDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearGroupsDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "application_info"),
    2: .same(proto: "groups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._applicationInfo) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.groups) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._applicationInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ClearGroupsDocument, rhs: RVData_ClearGroupsDocument) -> Bool {
    if lhs._applicationInfo != rhs._applicationInfo {return false}
    if lhs.groups != rhs.groups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ClearGroupsDocument.ClearGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_ClearGroupsDocument.protoMessageName + ".ClearGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .standard(proto: "layer_targets"),
    4: .standard(proto: "is_hidden_in_preview"),
    5: .standard(proto: "image_data"),
    6: .standard(proto: "image_type"),
    7: .standard(proto: "is_icon_tinted"),
    8: .standard(proto: "icon_tint_color"),
    9: .standard(proto: "timeline_targets"),
    10: .standard(proto: "clear_presentation_next_slide"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.layerTargets) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isHiddenInPreview) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.imageData) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.imageType) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isIconTinted) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._iconTintColor) }()
      case 9: try { try decoder.decodeRepeatedEnumField(value: &self.timelineTargets) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.clearPresentationNextSlide_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.layerTargets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.layerTargets, fieldNumber: 3)
    }
    if self.isHiddenInPreview != false {
      try visitor.visitSingularBoolField(value: self.isHiddenInPreview, fieldNumber: 4)
    }
    if !self.imageData.isEmpty {
      try visitor.visitSingularBytesField(value: self.imageData, fieldNumber: 5)
    }
    if self.imageType != .custom {
      try visitor.visitSingularEnumField(value: self.imageType, fieldNumber: 6)
    }
    if self.isIconTinted != false {
      try visitor.visitSingularBoolField(value: self.isIconTinted, fieldNumber: 7)
    }
    try { if let v = self._iconTintColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.timelineTargets.isEmpty {
      try visitor.visitPackedEnumField(value: self.timelineTargets, fieldNumber: 9)
    }
    if self.clearPresentationNextSlide_p != false {
      try visitor.visitSingularBoolField(value: self.clearPresentationNextSlide_p, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ClearGroupsDocument.ClearGroup, rhs: RVData_ClearGroupsDocument.ClearGroup) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.layerTargets != rhs.layerTargets {return false}
    if lhs.isHiddenInPreview != rhs.isHiddenInPreview {return false}
    if lhs.imageData != rhs.imageData {return false}
    if lhs.imageType != rhs.imageType {return false}
    if lhs.isIconTinted != rhs.isIconTinted {return false}
    if lhs._iconTintColor != rhs._iconTintColor {return false}
    if lhs.timelineTargets != rhs.timelineTargets {return false}
    if lhs.clearPresentationNextSlide_p != rhs.clearPresentationNextSlide_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ClearGroupsDocument.ClearGroup.ImageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ImageTypeCustom"),
    1: .same(proto: "ImageTypeOne"),
    2: .same(proto: "ImageTypeTwo"),
    3: .same(proto: "ImageTypeThree"),
    4: .same(proto: "ImageTypeFour"),
    5: .same(proto: "ImageTypeFive"),
    6: .same(proto: "ImageTypeSix"),
    7: .same(proto: "ImageTypeSeven"),
    8: .same(proto: "ImageTypeEight"),
    9: .same(proto: "ImageTypeNine"),
    10: .same(proto: "ImageTypeZero"),
    11: .same(proto: "ImageTypeAll"),
    12: .same(proto: "ImageTypeMegahorn"),
    13: .same(proto: "ImageTypePlay"),
    14: .same(proto: "ImageTypeBulb"),
    15: .same(proto: "ImageTypeSunglasses"),
    16: .same(proto: "ImageTypeArrow"),
    17: .same(proto: "ImageTypeTarget"),
    18: .same(proto: "ImageTypeStar"),
    19: .same(proto: "ImageTypeSun"),
    20: .same(proto: "ImageTypeBell"),
    21: .same(proto: "ImageTypePaperclip"),
    22: .same(proto: "ImageTypeFlask"),
    23: .same(proto: "ImageTypeEyeglasses"),
    24: .same(proto: "ImageTypeCupcake"),
    25: .same(proto: "ImageTypeSlide"),
    26: .same(proto: "ImageTypeHat"),
    27: .same(proto: "ImageTypeFlower"),
    28: .same(proto: "ImageTypeHeart"),
    29: .same(proto: "ImageTypeMessage"),
    30: .same(proto: "ImageTypeAudio"),
    31: .same(proto: "ImageTypeCloud"),
    32: .same(proto: "ImageTypeExclamation"),
  ]
}
