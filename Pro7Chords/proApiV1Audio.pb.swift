// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Audio.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Audio_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Audio_Request.OneOf_Request? = nil

  var playlists: RVData_API_v1_Audio_Request.Playlists {
    get {
      if case .playlists(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.Playlists()
    }
    set {request = .playlists(newValue)}
  }

  var playlist: RVData_API_v1_Audio_Request.Playlist {
    get {
      if case .playlist(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.Playlist()
    }
    set {request = .playlist(newValue)}
  }

  var playlistUpdates: RVData_API_v1_Audio_Request.PlaylistUpdates {
    get {
      if case .playlistUpdates(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.PlaylistUpdates()
    }
    set {request = .playlistUpdates(newValue)}
  }

  var playlistFocused: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistFocused(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistFocused(newValue)}
  }

  var playlistActive: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistActive(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistActive(newValue)}
  }

  var playlistNextFocus: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistNextFocus(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistNextFocus(newValue)}
  }

  var playlistPreviousFocus: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistPreviousFocus(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistPreviousFocus(newValue)}
  }

  var playlistActiveFocus: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistActiveFocus(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistActiveFocus(newValue)}
  }

  var playlistIDFocus: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistIDFocus(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistIDFocus(newValue)}
  }

  var playlistFocusedTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistFocusedTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistFocusedTrigger(newValue)}
  }

  var playlistActiveTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistActiveTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistActiveTrigger(newValue)}
  }

  var playlistIDTrigger: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistIDTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistIDTrigger(newValue)}
  }

  var playlistFocusedNextTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistFocusedNextTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistFocusedNextTrigger(newValue)}
  }

  var playlistFocusedPreviousTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistFocusedPreviousTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistFocusedPreviousTrigger(newValue)}
  }

  var playlistFocusedIDTrigger: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistFocusedIDTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistFocusedIDTrigger(newValue)}
  }

  var playlistActiveNextTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistActiveNextTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistActiveNextTrigger(newValue)}
  }

  var playlistActivePreviousTrigger: RVData_API_v1_Audio_Request.EmptyMessage {
    get {
      if case .playlistActivePreviousTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.EmptyMessage()
    }
    set {request = .playlistActivePreviousTrigger(newValue)}
  }

  var playlistActiveIDTrigger: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistActiveIDTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistActiveIDTrigger(newValue)}
  }

  var playlistIDNextTrigger: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistIDNextTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistIDNextTrigger(newValue)}
  }

  var playlistIDPreviousTrigger: RVData_API_v1_Audio_Request.IdentifierMessage {
    get {
      if case .playlistIDPreviousTrigger(let v)? = request {return v}
      return RVData_API_v1_Audio_Request.IdentifierMessage()
    }
    set {request = .playlistIDPreviousTrigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case playlists(RVData_API_v1_Audio_Request.Playlists)
    case playlist(RVData_API_v1_Audio_Request.Playlist)
    case playlistUpdates(RVData_API_v1_Audio_Request.PlaylistUpdates)
    case playlistFocused(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistActive(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistNextFocus(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistPreviousFocus(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistActiveFocus(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistIDFocus(RVData_API_v1_Audio_Request.IdentifierMessage)
    case playlistFocusedTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistActiveTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistIDTrigger(RVData_API_v1_Audio_Request.IdentifierMessage)
    case playlistFocusedNextTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistFocusedPreviousTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistFocusedIDTrigger(RVData_API_v1_Audio_Request.IdentifierMessage)
    case playlistActiveNextTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistActivePreviousTrigger(RVData_API_v1_Audio_Request.EmptyMessage)
    case playlistActiveIDTrigger(RVData_API_v1_Audio_Request.IdentifierMessage)
    case playlistIDNextTrigger(RVData_API_v1_Audio_Request.IdentifierMessage)
    case playlistIDPreviousTrigger(RVData_API_v1_Audio_Request.IdentifierMessage)

  }

  struct Playlists: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Playlist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var start: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PlaylistUpdates: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EmptyMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct IdentifierMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Audio_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Audio_Response.OneOf_Response? = nil

  var playlists: RVData_API_v1_Audio_Response.Playlists {
    get {
      if case .playlists(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.Playlists()
    }
    set {response = .playlists(newValue)}
  }

  var playlist: RVData_API_v1_Audio_Response.Playlist {
    get {
      if case .playlist(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.Playlist()
    }
    set {response = .playlist(newValue)}
  }

  var update: RVData_API_v1_Audio_Response.PlaylistUpdate {
    get {
      if case .update(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.PlaylistUpdate()
    }
    set {response = .update(newValue)}
  }

  var playlistFocused: RVData_API_v1_Audio_Response.FocusedPlaylist {
    get {
      if case .playlistFocused(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.FocusedPlaylist()
    }
    set {response = .playlistFocused(newValue)}
  }

  var playlistActive: RVData_API_v1_Audio_Response.ActivePlaylist {
    get {
      if case .playlistActive(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.ActivePlaylist()
    }
    set {response = .playlistActive(newValue)}
  }

  var playlistNextFocus: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistNextFocus(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistNextFocus(newValue)}
  }

  var playlistPreviousFocus: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistPreviousFocus(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistPreviousFocus(newValue)}
  }

  var playlistActiveFocus: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistActiveFocus(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistActiveFocus(newValue)}
  }

  var playlistIDFocus: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistIDFocus(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistIDFocus(newValue)}
  }

  var playlistFocusedTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistFocusedTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistFocusedTrigger(newValue)}
  }

  var playlistActiveTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistActiveTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistActiveTrigger(newValue)}
  }

  var playlistIDTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistIDTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistIDTrigger(newValue)}
  }

  var playlistFocusedNextTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistFocusedNextTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistFocusedNextTrigger(newValue)}
  }

  var playlistFocusedPreviousTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistFocusedPreviousTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistFocusedPreviousTrigger(newValue)}
  }

  var playlistFocusedIDTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistFocusedIDTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistFocusedIDTrigger(newValue)}
  }

  var playlistActiveNextTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistActiveNextTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistActiveNextTrigger(newValue)}
  }

  var playlistActivePreviousTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistActivePreviousTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistActivePreviousTrigger(newValue)}
  }

  var playlistActiveIDTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistActiveIDTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistActiveIDTrigger(newValue)}
  }

  var playlistIDNextTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistIDNextTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistIDNextTrigger(newValue)}
  }

  var playlistIDPreviousTrigger: RVData_API_v1_Audio_Response.EmptyMessage {
    get {
      if case .playlistIDPreviousTrigger(let v)? = response {return v}
      return RVData_API_v1_Audio_Response.EmptyMessage()
    }
    set {response = .playlistIDPreviousTrigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case playlists(RVData_API_v1_Audio_Response.Playlists)
    case playlist(RVData_API_v1_Audio_Response.Playlist)
    case update(RVData_API_v1_Audio_Response.PlaylistUpdate)
    case playlistFocused(RVData_API_v1_Audio_Response.FocusedPlaylist)
    case playlistActive(RVData_API_v1_Audio_Response.ActivePlaylist)
    case playlistNextFocus(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistPreviousFocus(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistActiveFocus(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistIDFocus(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistFocusedTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistActiveTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistIDTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistFocusedNextTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistFocusedPreviousTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistFocusedIDTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistActiveNextTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistActivePreviousTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistActiveIDTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistIDNextTrigger(RVData_API_v1_Audio_Response.EmptyMessage)
    case playlistIDPreviousTrigger(RVData_API_v1_Audio_Response.EmptyMessage)

  }

  struct Playlists: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlists: [RVData_API_v1_Playlist] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Playlist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var items: [RVData_API_v1_MediaPlaylistItem] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct PlaylistUpdate: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct EmptyMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct FocusedPlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct ActivePlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlist: RVData_API_v1_Identifier {
      get {return _playlist ?? RVData_API_v1_Identifier()}
      set {_playlist = newValue}
    }
    /// Returns true if `playlist` has been explicitly set.
    var hasPlaylist: Bool {return self._playlist != nil}
    /// Clears the value of `playlist`. Subsequent reads from it will return its default value.
    mutating func clearPlaylist() {self._playlist = nil}

    var item: RVData_API_v1_Identifier {
      get {return _item ?? RVData_API_v1_Identifier()}
      set {_item = newValue}
    }
    /// Returns true if `item` has been explicitly set.
    var hasItem: Bool {return self._item != nil}
    /// Clears the value of `item`. Subsequent reads from it will return its default value.
    mutating func clearItem() {self._item = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _playlist: RVData_API_v1_Identifier? = nil
    fileprivate var _item: RVData_API_v1_Identifier? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Audio_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Audio_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
    2: .same(proto: "playlist"),
    3: .standard(proto: "playlist_updates"),
    4: .standard(proto: "playlist_focused"),
    5: .standard(proto: "playlist_active"),
    6: .standard(proto: "playlist_next_focus"),
    7: .standard(proto: "playlist_previous_focus"),
    8: .standard(proto: "playlist_active_focus"),
    9: .standard(proto: "playlist_id_focus"),
    10: .standard(proto: "playlist_focused_trigger"),
    11: .standard(proto: "playlist_active_trigger"),
    12: .standard(proto: "playlist_id_trigger"),
    13: .standard(proto: "playlist_focused_next_trigger"),
    14: .standard(proto: "playlist_focused_previous_trigger"),
    15: .standard(proto: "playlist_focused_id_trigger"),
    16: .standard(proto: "playlist_active_next_trigger"),
    17: .standard(proto: "playlist_active_previous_trigger"),
    18: .standard(proto: "playlist_active_id_trigger"),
    19: .standard(proto: "playlist_id_next_trigger"),
    20: .standard(proto: "playlist_id_previous_trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Audio_Request.Playlists?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlists(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlists(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Audio_Request.Playlist?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Audio_Request.PlaylistUpdates?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistUpdates(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistUpdates(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocused(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocused(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActive(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistNextFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistNextFocus(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistPreviousFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistPreviousFocus(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActiveFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActiveFocus(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistIDFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistIDFocus(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocusedTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocusedTrigger(v)
        }
      }()
      case 11: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActiveTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActiveTrigger(v)
        }
      }()
      case 12: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistIDTrigger(v)
        }
      }()
      case 13: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocusedNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocusedNextTrigger(v)
        }
      }()
      case 14: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocusedPreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocusedPreviousTrigger(v)
        }
      }()
      case 15: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocusedIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocusedIDTrigger(v)
        }
      }()
      case 16: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActiveNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActiveNextTrigger(v)
        }
      }()
      case 17: try {
        var v: RVData_API_v1_Audio_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActivePreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActivePreviousTrigger(v)
        }
      }()
      case 18: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActiveIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActiveIDTrigger(v)
        }
      }()
      case 19: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistIDNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistIDNextTrigger(v)
        }
      }()
      case 20: try {
        var v: RVData_API_v1_Audio_Request.IdentifierMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistIDPreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistIDPreviousTrigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .playlists?: try {
      guard case .playlists(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .playlist?: try {
      guard case .playlist(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .playlistUpdates?: try {
      guard case .playlistUpdates(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .playlistFocused?: try {
      guard case .playlistFocused(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playlistActive?: try {
      guard case .playlistActive(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .playlistNextFocus?: try {
      guard case .playlistNextFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .playlistPreviousFocus?: try {
      guard case .playlistPreviousFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .playlistActiveFocus?: try {
      guard case .playlistActiveFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .playlistIDFocus?: try {
      guard case .playlistIDFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .playlistFocusedTrigger?: try {
      guard case .playlistFocusedTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .playlistActiveTrigger?: try {
      guard case .playlistActiveTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .playlistIDTrigger?: try {
      guard case .playlistIDTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .playlistFocusedNextTrigger?: try {
      guard case .playlistFocusedNextTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .playlistFocusedPreviousTrigger?: try {
      guard case .playlistFocusedPreviousTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .playlistFocusedIDTrigger?: try {
      guard case .playlistFocusedIDTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .playlistActiveNextTrigger?: try {
      guard case .playlistActiveNextTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .playlistActivePreviousTrigger?: try {
      guard case .playlistActivePreviousTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .playlistActiveIDTrigger?: try {
      guard case .playlistActiveIDTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .playlistIDNextTrigger?: try {
      guard case .playlistIDNextTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .playlistIDPreviousTrigger?: try {
      guard case .playlistIDPreviousTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request, rhs: RVData_API_v1_Audio_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Request.Playlists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Request.protoMessageName + ".Playlists"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request.Playlists, rhs: RVData_API_v1_Audio_Request.Playlists) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Request.Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Request.protoMessageName + ".Playlist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "start"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.start) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.start != 0 {
      try visitor.visitSingularUInt32Field(value: self.start, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request.Playlist, rhs: RVData_API_v1_Audio_Request.Playlist) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.start != rhs.start {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Request.PlaylistUpdates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Request.protoMessageName + ".PlaylistUpdates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request.PlaylistUpdates, rhs: RVData_API_v1_Audio_Request.PlaylistUpdates) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Request.EmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Request.protoMessageName + ".EmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request.EmptyMessage, rhs: RVData_API_v1_Audio_Request.EmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Request.IdentifierMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Request.protoMessageName + ".IdentifierMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Request.IdentifierMessage, rhs: RVData_API_v1_Audio_Request.IdentifierMessage) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Audio_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
    2: .same(proto: "playlist"),
    3: .same(proto: "update"),
    4: .standard(proto: "playlist_focused"),
    5: .standard(proto: "playlist_active"),
    6: .standard(proto: "playlist_next_focus"),
    7: .standard(proto: "playlist_previous_focus"),
    8: .standard(proto: "playlist_active_focus"),
    9: .standard(proto: "playlist_id_focus"),
    10: .standard(proto: "playlist_focused_trigger"),
    11: .standard(proto: "playlist_active_trigger"),
    12: .standard(proto: "playlist_id_trigger"),
    13: .standard(proto: "playlist_focused_next_trigger"),
    14: .standard(proto: "playlist_focused_previous_trigger"),
    15: .standard(proto: "playlist_focused_id_trigger"),
    16: .standard(proto: "playlist_active_next_trigger"),
    17: .standard(proto: "playlist_active_previous_trigger"),
    18: .standard(proto: "playlist_active_id_trigger"),
    19: .standard(proto: "playlist_id_next_trigger"),
    20: .standard(proto: "playlist_id_previous_trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Audio_Response.Playlists?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlists(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlists(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Audio_Response.Playlist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Audio_Response.PlaylistUpdate?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .update(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Audio_Response.FocusedPlaylist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocused(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocused(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Audio_Response.ActivePlaylist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActive(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistNextFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistNextFocus(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistPreviousFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistPreviousFocus(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActiveFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActiveFocus(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistIDFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistIDFocus(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocusedTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocusedTrigger(v)
        }
      }()
      case 11: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActiveTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActiveTrigger(v)
        }
      }()
      case 12: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistIDTrigger(v)
        }
      }()
      case 13: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocusedNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocusedNextTrigger(v)
        }
      }()
      case 14: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocusedPreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocusedPreviousTrigger(v)
        }
      }()
      case 15: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocusedIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocusedIDTrigger(v)
        }
      }()
      case 16: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActiveNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActiveNextTrigger(v)
        }
      }()
      case 17: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActivePreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActivePreviousTrigger(v)
        }
      }()
      case 18: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActiveIDTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActiveIDTrigger(v)
        }
      }()
      case 19: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistIDNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistIDNextTrigger(v)
        }
      }()
      case 20: try {
        var v: RVData_API_v1_Audio_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistIDPreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistIDPreviousTrigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .playlists?: try {
      guard case .playlists(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .playlist?: try {
      guard case .playlist(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .playlistFocused?: try {
      guard case .playlistFocused(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playlistActive?: try {
      guard case .playlistActive(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .playlistNextFocus?: try {
      guard case .playlistNextFocus(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .playlistPreviousFocus?: try {
      guard case .playlistPreviousFocus(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .playlistActiveFocus?: try {
      guard case .playlistActiveFocus(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .playlistIDFocus?: try {
      guard case .playlistIDFocus(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .playlistFocusedTrigger?: try {
      guard case .playlistFocusedTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .playlistActiveTrigger?: try {
      guard case .playlistActiveTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .playlistIDTrigger?: try {
      guard case .playlistIDTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .playlistFocusedNextTrigger?: try {
      guard case .playlistFocusedNextTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .playlistFocusedPreviousTrigger?: try {
      guard case .playlistFocusedPreviousTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .playlistFocusedIDTrigger?: try {
      guard case .playlistFocusedIDTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .playlistActiveNextTrigger?: try {
      guard case .playlistActiveNextTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .playlistActivePreviousTrigger?: try {
      guard case .playlistActivePreviousTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .playlistActiveIDTrigger?: try {
      guard case .playlistActiveIDTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .playlistIDNextTrigger?: try {
      guard case .playlistIDNextTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .playlistIDPreviousTrigger?: try {
      guard case .playlistIDPreviousTrigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response, rhs: RVData_API_v1_Audio_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.Playlists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".Playlists"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.playlists) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playlists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.playlists, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.Playlists, rhs: RVData_API_v1_Audio_Response.Playlists) -> Bool {
    if lhs.playlists != rhs.playlists {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".Playlist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.Playlist, rhs: RVData_API_v1_Audio_Response.Playlist) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.PlaylistUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".PlaylistUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.PlaylistUpdate, rhs: RVData_API_v1_Audio_Response.PlaylistUpdate) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.EmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".EmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.EmptyMessage, rhs: RVData_API_v1_Audio_Response.EmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.FocusedPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".FocusedPlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.FocusedPlaylist, rhs: RVData_API_v1_Audio_Response.FocusedPlaylist) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Audio_Response.ActivePlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Audio_Response.protoMessageName + ".ActivePlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlist"),
    2: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._playlist) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._playlist {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Audio_Response.ActivePlaylist, rhs: RVData_API_v1_Audio_Response.ActivePlaylist) -> Bool {
    if lhs._playlist != rhs._playlist {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
