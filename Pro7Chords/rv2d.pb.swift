// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rv2d.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_IdentificationOverlay: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var screenName: String = String()

  var outputs: [RVData_IdentificationOverlay.Output] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Output: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Int32 = 0

    var y: Int32 = 0

    var width: Int32 = 0

    var height: Int32 = 0

    var name: String = String()

    var frameRate: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_LayerIdentificationOverlay: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var layer: RVData_LayerIdentificationOverlay.Layer = .videoInput

  var layerName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Layer: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case videoInput // = 0
    case media // = 1
    case presentation // = 2
    case announcements // = 3
    case props // = 4
    case messages // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .videoInput
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .videoInput
      case 1: self = .media
      case 2: self = .presentation
      case 3: self = .announcements
      case 4: self = .props
      case 5: self = .messages
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .videoInput: return 0
      case .media: return 1
      case .presentation: return 2
      case .announcements: return 3
      case .props: return 4
      case .messages: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_LayerIdentificationOverlay.Layer] = [
      .videoInput,
      .media,
      .presentation,
      .announcements,
      .props,
      .messages,
    ]

  }

  init() {}
}

struct RVData_TextLayer: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var layerType: RVData_TextLayer.OneOf_LayerType? = nil

  var composite: RVData_TextLayer.Composite {
    get {
      if case .composite(let v)? = layerType {return v}
      return RVData_TextLayer.Composite()
    }
    set {layerType = .composite(newValue)}
  }

  var media: RVData_Media {
    get {
      if case .media(let v)? = layerType {return v}
      return RVData_Media()
    }
    set {layerType = .media(newValue)}
  }

  var cutOut: RVData_Graphics.Text.CutOutFill {
    get {
      if case .cutOut(let v)? = layerType {return v}
      return RVData_Graphics.Text.CutOutFill()
    }
    set {layerType = .cutOut(newValue)}
  }

  var backgroundEffect: RVData_Graphics.BackgroundEffect {
    get {
      if case .backgroundEffect(let v)? = layerType {return v}
      return RVData_Graphics.BackgroundEffect()
    }
    set {layerType = .backgroundEffect(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_LayerType: Equatable, Sendable {
    case composite(RVData_TextLayer.Composite)
    case media(RVData_Media)
    case cutOut(RVData_Graphics.Text.CutOutFill)
    case backgroundEffect(RVData_Graphics.BackgroundEffect)

  }

  struct Composite: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_IdentificationOverlay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdentificationOverlay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "screen_name"),
    1: .same(proto: "outputs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.screenName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if !self.screenName.isEmpty {
      try visitor.visitSingularStringField(value: self.screenName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_IdentificationOverlay, rhs: RVData_IdentificationOverlay) -> Bool {
    if lhs.screenName != rhs.screenName {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_IdentificationOverlay.Output: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_IdentificationOverlay.protoMessageName + ".Output"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "name"),
    6: .standard(proto: "frame_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.x) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.y) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.frameRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt32Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt32Field(value: self.y, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if self.frameRate.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.frameRate, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_IdentificationOverlay.Output, rhs: RVData_IdentificationOverlay.Output) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.name != rhs.name {return false}
    if lhs.frameRate != rhs.frameRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_LayerIdentificationOverlay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LayerIdentificationOverlay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .standard(proto: "layer_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.layerName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .videoInput {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    if !self.layerName.isEmpty {
      try visitor.visitSingularStringField(value: self.layerName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_LayerIdentificationOverlay, rhs: RVData_LayerIdentificationOverlay) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.layerName != rhs.layerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_LayerIdentificationOverlay.Layer: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LAYER_VIDEO_INPUT"),
    1: .same(proto: "LAYER_MEDIA"),
    2: .same(proto: "LAYER_PRESENTATION"),
    3: .same(proto: "LAYER_ANNOUNCEMENTS"),
    4: .same(proto: "LAYER_PROPS"),
    5: .same(proto: "LAYER_MESSAGES"),
  ]
}

extension RVData_TextLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextLayer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "composite"),
    2: .same(proto: "media"),
    3: .standard(proto: "cut_out"),
    4: .standard(proto: "background_effect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_TextLayer.Composite?
        var hadOneofValue = false
        if let current = self.layerType {
          hadOneofValue = true
          if case .composite(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.layerType = .composite(v)
        }
      }()
      case 2: try {
        var v: RVData_Media?
        var hadOneofValue = false
        if let current = self.layerType {
          hadOneofValue = true
          if case .media(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.layerType = .media(v)
        }
      }()
      case 3: try {
        var v: RVData_Graphics.Text.CutOutFill?
        var hadOneofValue = false
        if let current = self.layerType {
          hadOneofValue = true
          if case .cutOut(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.layerType = .cutOut(v)
        }
      }()
      case 4: try {
        var v: RVData_Graphics.BackgroundEffect?
        var hadOneofValue = false
        if let current = self.layerType {
          hadOneofValue = true
          if case .backgroundEffect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.layerType = .backgroundEffect(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.layerType {
    case .composite?: try {
      guard case .composite(let v)? = self.layerType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .media?: try {
      guard case .media(let v)? = self.layerType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .cutOut?: try {
      guard case .cutOut(let v)? = self.layerType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .backgroundEffect?: try {
      guard case .backgroundEffect(let v)? = self.layerType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TextLayer, rhs: RVData_TextLayer) -> Bool {
    if lhs.layerType != rhs.layerType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TextLayer.Composite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TextLayer.protoMessageName + ".Composite"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TextLayer.Composite, rhs: RVData_TextLayer.Composite) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
