// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsImport.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Import: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: Analytics_Import.OneOf_Component? = nil

  var songSelect: Analytics_Import.SongSelect {
    get {
      if case .songSelect(let v)? = component {return v}
      return Analytics_Import.SongSelect()
    }
    set {component = .songSelect(newValue)}
  }

  var multitracks: Analytics_MultiTracks.Import {
    get {
      if case .multitracks(let v)? = component {return v}
      return Analytics_MultiTracks.Import()
    }
    set {component = .multitracks(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Component: Equatable, Sendable {
    case songSelect(Analytics_Import.SongSelect)
    case multitracks(Analytics_MultiTracks.Import)

  }

  struct SongSelect: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var templateSlideTextElementCount: Int32 = 0

    var importIntoPlaylist: Bool = false

    var lineDelimiter: Analytics_Import.SongSelect.LineDelimiter = .unknown

    var lineDelimiterCount: Int32 = 0

    var didOpenEditView: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum LineDelimiter: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case unknown // = 0
      case lineBreak // = 1
      case paragraphBreak // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .lineBreak
        case 2: self = .paragraphBreak
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .lineBreak: return 1
        case .paragraphBreak: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Import.SongSelect.LineDelimiter] = [
        .unknown,
        .lineBreak,
        .paragraphBreak,
      ]

    }

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Import: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Import"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "song_select"),
    2: .same(proto: "multitracks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Import.SongSelect?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .songSelect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .songSelect(v)
        }
      }()
      case 2: try {
        var v: Analytics_MultiTracks.Import?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .multitracks(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .multitracks(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.component {
    case .songSelect?: try {
      guard case .songSelect(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .multitracks?: try {
      guard case .multitracks(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Import, rhs: Analytics_Import) -> Bool {
    if lhs.component != rhs.component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Import.SongSelect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Import.protoMessageName + ".SongSelect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "template_slide_text_element_count"),
    2: .standard(proto: "import_into_playlist"),
    3: .standard(proto: "line_delimiter"),
    4: .standard(proto: "line_delimiter_count"),
    5: .standard(proto: "did_open_edit_view"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.templateSlideTextElementCount) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.importIntoPlaylist) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.lineDelimiter) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.lineDelimiterCount) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.didOpenEditView) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.templateSlideTextElementCount != 0 {
      try visitor.visitSingularInt32Field(value: self.templateSlideTextElementCount, fieldNumber: 1)
    }
    if self.importIntoPlaylist != false {
      try visitor.visitSingularBoolField(value: self.importIntoPlaylist, fieldNumber: 2)
    }
    if self.lineDelimiter != .unknown {
      try visitor.visitSingularEnumField(value: self.lineDelimiter, fieldNumber: 3)
    }
    if self.lineDelimiterCount != 0 {
      try visitor.visitSingularInt32Field(value: self.lineDelimiterCount, fieldNumber: 4)
    }
    if self.didOpenEditView != false {
      try visitor.visitSingularBoolField(value: self.didOpenEditView, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Import.SongSelect, rhs: Analytics_Import.SongSelect) -> Bool {
    if lhs.templateSlideTextElementCount != rhs.templateSlideTextElementCount {return false}
    if lhs.importIntoPlaylist != rhs.importIntoPlaylist {return false}
    if lhs.lineDelimiter != rhs.lineDelimiter {return false}
    if lhs.lineDelimiterCount != rhs.lineDelimiterCount {return false}
    if lhs.didOpenEditView != rhs.didOpenEditView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Import.SongSelect.LineDelimiter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LINE_DELIMITER_UNKNOWN"),
    1: .same(proto: "LINE_DELIMITER_LINE_BREAK"),
    2: .same(proto: "LINE_DELIMITER_PARAGRAPH_BREAK"),
  ]
}
