// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Transport.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Transport_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Transport_Request.OneOf_Request? = nil

  var play: RVData_API_v1_Transport_Request.Play {
    get {
      if case .play(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.Play()
    }
    set {request = .play(newValue)}
  }

  var pause: RVData_API_v1_Transport_Request.Pause {
    get {
      if case .pause(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.Pause()
    }
    set {request = .pause(newValue)}
  }

  var skipBackward: RVData_API_v1_Transport_Request.SkipBackward {
    get {
      if case .skipBackward(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.SkipBackward()
    }
    set {request = .skipBackward(newValue)}
  }

  var skipForward: RVData_API_v1_Transport_Request.SkipForward {
    get {
      if case .skipForward(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.SkipForward()
    }
    set {request = .skipForward(newValue)}
  }

  var goToEnd: RVData_API_v1_Transport_Request.GoToEnd {
    get {
      if case .goToEnd(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.GoToEnd()
    }
    set {request = .goToEnd(newValue)}
  }

  var getTime: RVData_API_v1_Transport_Request.GetTime {
    get {
      if case .getTime(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.GetTime()
    }
    set {request = .getTime(newValue)}
  }

  var putTime: RVData_API_v1_Transport_Request.PutTime {
    get {
      if case .putTime(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.PutTime()
    }
    set {request = .putTime(newValue)}
  }

  var getAutoAdvance: RVData_API_v1_Transport_Request.GetAutoAdvance {
    get {
      if case .getAutoAdvance(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.GetAutoAdvance()
    }
    set {request = .getAutoAdvance(newValue)}
  }

  var deleteAutoAdvance: RVData_API_v1_Transport_Request.DeleteAutoAdvance {
    get {
      if case .deleteAutoAdvance(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.DeleteAutoAdvance()
    }
    set {request = .deleteAutoAdvance(newValue)}
  }

  var getCurrentMedia: RVData_API_v1_Transport_Request.GetCurrentMedia {
    get {
      if case .getCurrentMedia(let v)? = request {return v}
      return RVData_API_v1_Transport_Request.GetCurrentMedia()
    }
    set {request = .getCurrentMedia(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case play(RVData_API_v1_Transport_Request.Play)
    case pause(RVData_API_v1_Transport_Request.Pause)
    case skipBackward(RVData_API_v1_Transport_Request.SkipBackward)
    case skipForward(RVData_API_v1_Transport_Request.SkipForward)
    case goToEnd(RVData_API_v1_Transport_Request.GoToEnd)
    case getTime(RVData_API_v1_Transport_Request.GetTime)
    case putTime(RVData_API_v1_Transport_Request.PutTime)
    case getAutoAdvance(RVData_API_v1_Transport_Request.GetAutoAdvance)
    case deleteAutoAdvance(RVData_API_v1_Transport_Request.DeleteAutoAdvance)
    case getCurrentMedia(RVData_API_v1_Transport_Request.GetCurrentMedia)

  }

  struct Play: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Pause: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SkipBackward: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var seconds: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SkipForward: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var seconds: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GoToEnd: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var seconds: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetTime: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutTime: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var seconds: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetAutoAdvance: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct DeleteAutoAdvance: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetCurrentMedia: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Transport_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Transport_Response.OneOf_Response? = nil

  var play: RVData_API_v1_Transport_Response.Play {
    get {
      if case .play(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.Play()
    }
    set {response = .play(newValue)}
  }

  var pause: RVData_API_v1_Transport_Response.Pause {
    get {
      if case .pause(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.Pause()
    }
    set {response = .pause(newValue)}
  }

  var skipBackward: RVData_API_v1_Transport_Response.SkipBackward {
    get {
      if case .skipBackward(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.SkipBackward()
    }
    set {response = .skipBackward(newValue)}
  }

  var skipForward: RVData_API_v1_Transport_Response.SkipForward {
    get {
      if case .skipForward(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.SkipForward()
    }
    set {response = .skipForward(newValue)}
  }

  var goToEnd: RVData_API_v1_Transport_Response.GoToEnd {
    get {
      if case .goToEnd(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.GoToEnd()
    }
    set {response = .goToEnd(newValue)}
  }

  var getTime: RVData_API_v1_Transport_Response.GetTime {
    get {
      if case .getTime(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.GetTime()
    }
    set {response = .getTime(newValue)}
  }

  var putTime: RVData_API_v1_Transport_Response.PutTime {
    get {
      if case .putTime(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.PutTime()
    }
    set {response = .putTime(newValue)}
  }

  var getAutoAdvance: RVData_API_v1_Transport_Response.GetAutoAdvance {
    get {
      if case .getAutoAdvance(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.GetAutoAdvance()
    }
    set {response = .getAutoAdvance(newValue)}
  }

  var deleteAutoAdvance: RVData_API_v1_Transport_Response.DeleteAutoAdvance {
    get {
      if case .deleteAutoAdvance(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.DeleteAutoAdvance()
    }
    set {response = .deleteAutoAdvance(newValue)}
  }

  var getCurrentMedia: RVData_API_v1_Transport_Response.GetCurrentMedia {
    get {
      if case .getCurrentMedia(let v)? = response {return v}
      return RVData_API_v1_Transport_Response.GetCurrentMedia()
    }
    set {response = .getCurrentMedia(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case play(RVData_API_v1_Transport_Response.Play)
    case pause(RVData_API_v1_Transport_Response.Pause)
    case skipBackward(RVData_API_v1_Transport_Response.SkipBackward)
    case skipForward(RVData_API_v1_Transport_Response.SkipForward)
    case goToEnd(RVData_API_v1_Transport_Response.GoToEnd)
    case getTime(RVData_API_v1_Transport_Response.GetTime)
    case putTime(RVData_API_v1_Transport_Response.PutTime)
    case getAutoAdvance(RVData_API_v1_Transport_Response.GetAutoAdvance)
    case deleteAutoAdvance(RVData_API_v1_Transport_Response.DeleteAutoAdvance)
    case getCurrentMedia(RVData_API_v1_Transport_Response.GetCurrentMedia)

  }

  struct Play: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Pause: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SkipBackward: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SkipForward: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GoToEnd: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetTime: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seconds: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutTime: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetAutoAdvance: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var autoAdvance: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct DeleteAutoAdvance: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetCurrentMedia: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isPlaying: Bool = false

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var name: String = String()

    var artist: String = String()

    var audioOnly: Bool = false

    var duration: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Transport_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Transport_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "play"),
    2: .same(proto: "pause"),
    3: .standard(proto: "skip_backward"),
    4: .standard(proto: "skip_forward"),
    5: .standard(proto: "go_to_end"),
    6: .standard(proto: "get_time"),
    7: .standard(proto: "put_time"),
    8: .standard(proto: "get_auto_advance"),
    9: .standard(proto: "delete_auto_advance"),
    10: .standard(proto: "get_current_media"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Transport_Request.Play?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .play(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .play(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Transport_Request.Pause?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .pause(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .pause(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Transport_Request.SkipBackward?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .skipBackward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .skipBackward(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Transport_Request.SkipForward?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .skipForward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .skipForward(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Transport_Request.GoToEnd?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .goToEnd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .goToEnd(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Transport_Request.GetTime?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getTime(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Transport_Request.PutTime?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .putTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .putTime(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Transport_Request.GetAutoAdvance?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getAutoAdvance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getAutoAdvance(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Transport_Request.DeleteAutoAdvance?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .deleteAutoAdvance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .deleteAutoAdvance(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Transport_Request.GetCurrentMedia?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getCurrentMedia(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getCurrentMedia(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .play?: try {
      guard case .play(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pause?: try {
      guard case .pause(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .skipBackward?: try {
      guard case .skipBackward(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .skipForward?: try {
      guard case .skipForward(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .goToEnd?: try {
      guard case .goToEnd(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .getTime?: try {
      guard case .getTime(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .putTime?: try {
      guard case .putTime(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .getAutoAdvance?: try {
      guard case .getAutoAdvance(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .deleteAutoAdvance?: try {
      guard case .deleteAutoAdvance(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .getCurrentMedia?: try {
      guard case .getCurrentMedia(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request, rhs: RVData_API_v1_Transport_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.Play: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".Play"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.Play, rhs: RVData_API_v1_Transport_Request.Play) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.Pause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".Pause"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.Pause, rhs: RVData_API_v1_Transport_Request.Pause) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.SkipBackward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".SkipBackward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    if self.seconds.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.SkipBackward, rhs: RVData_API_v1_Transport_Request.SkipBackward) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.SkipForward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".SkipForward"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    if self.seconds.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.SkipForward, rhs: RVData_API_v1_Transport_Request.SkipForward) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.GoToEnd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".GoToEnd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    if self.seconds.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.GoToEnd, rhs: RVData_API_v1_Transport_Request.GoToEnd) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.GetTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".GetTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.GetTime, rhs: RVData_API_v1_Transport_Request.GetTime) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.PutTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".PutTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    if self.seconds.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.PutTime, rhs: RVData_API_v1_Transport_Request.PutTime) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.GetAutoAdvance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".GetAutoAdvance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.GetAutoAdvance, rhs: RVData_API_v1_Transport_Request.GetAutoAdvance) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.DeleteAutoAdvance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".DeleteAutoAdvance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.DeleteAutoAdvance, rhs: RVData_API_v1_Transport_Request.DeleteAutoAdvance) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Request.GetCurrentMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Request.protoMessageName + ".GetCurrentMedia"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Request.GetCurrentMedia, rhs: RVData_API_v1_Transport_Request.GetCurrentMedia) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Transport_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "play"),
    2: .same(proto: "pause"),
    3: .standard(proto: "skip_backward"),
    4: .standard(proto: "skip_forward"),
    5: .standard(proto: "go_to_end"),
    6: .standard(proto: "get_time"),
    7: .standard(proto: "put_time"),
    8: .standard(proto: "get_auto_advance"),
    9: .standard(proto: "delete_auto_advance"),
    10: .standard(proto: "get_current_media"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Transport_Response.Play?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .play(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .play(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Transport_Response.Pause?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .pause(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .pause(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Transport_Response.SkipBackward?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .skipBackward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .skipBackward(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Transport_Response.SkipForward?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .skipForward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .skipForward(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Transport_Response.GoToEnd?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .goToEnd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .goToEnd(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Transport_Response.GetTime?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getTime(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Transport_Response.PutTime?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .putTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .putTime(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Transport_Response.GetAutoAdvance?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getAutoAdvance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getAutoAdvance(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Transport_Response.DeleteAutoAdvance?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .deleteAutoAdvance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .deleteAutoAdvance(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Transport_Response.GetCurrentMedia?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getCurrentMedia(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getCurrentMedia(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .play?: try {
      guard case .play(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pause?: try {
      guard case .pause(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .skipBackward?: try {
      guard case .skipBackward(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .skipForward?: try {
      guard case .skipForward(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .goToEnd?: try {
      guard case .goToEnd(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .getTime?: try {
      guard case .getTime(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .putTime?: try {
      guard case .putTime(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .getAutoAdvance?: try {
      guard case .getAutoAdvance(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .deleteAutoAdvance?: try {
      guard case .deleteAutoAdvance(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .getCurrentMedia?: try {
      guard case .getCurrentMedia(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response, rhs: RVData_API_v1_Transport_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.Play: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".Play"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.Play, rhs: RVData_API_v1_Transport_Response.Play) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.Pause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".Pause"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.Pause, rhs: RVData_API_v1_Transport_Response.Pause) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.SkipBackward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".SkipBackward"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.SkipBackward, rhs: RVData_API_v1_Transport_Response.SkipBackward) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.SkipForward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".SkipForward"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.SkipForward, rhs: RVData_API_v1_Transport_Response.SkipForward) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.GoToEnd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".GoToEnd"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.GoToEnd, rhs: RVData_API_v1_Transport_Response.GoToEnd) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.GetTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".GetTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seconds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.GetTime, rhs: RVData_API_v1_Transport_Response.GetTime) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.PutTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".PutTime"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.PutTime, rhs: RVData_API_v1_Transport_Response.PutTime) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.GetAutoAdvance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".GetAutoAdvance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auto_advance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.autoAdvance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.autoAdvance != false {
      try visitor.visitSingularBoolField(value: self.autoAdvance, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.GetAutoAdvance, rhs: RVData_API_v1_Transport_Response.GetAutoAdvance) -> Bool {
    if lhs.autoAdvance != rhs.autoAdvance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.DeleteAutoAdvance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".DeleteAutoAdvance"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.DeleteAutoAdvance, rhs: RVData_API_v1_Transport_Response.DeleteAutoAdvance) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Transport_Response.GetCurrentMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Transport_Response.protoMessageName + ".GetCurrentMedia"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_playing"),
    2: .same(proto: "uuid"),
    3: .same(proto: "name"),
    4: .same(proto: "artist"),
    5: .standard(proto: "audio_only"),
    6: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isPlaying) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.artist) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.audioOnly) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isPlaying != false {
      try visitor.visitSingularBoolField(value: self.isPlaying, fieldNumber: 1)
    }
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.artist.isEmpty {
      try visitor.visitSingularStringField(value: self.artist, fieldNumber: 4)
    }
    if self.audioOnly != false {
      try visitor.visitSingularBoolField(value: self.audioOnly, fieldNumber: 5)
    }
    if self.duration.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.duration, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Transport_Response.GetCurrentMedia, rhs: RVData_API_v1_Transport_Response.GetCurrentMedia) -> Bool {
    if lhs.isPlaying != rhs.isPlaying {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.artist != rhs.artist {return false}
    if lhs.audioOnly != rhs.audioOnly {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
