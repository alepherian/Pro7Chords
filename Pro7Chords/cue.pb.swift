// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cue.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_Cue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: RVData_UUID {
    get {return _uuid ?? RVData_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var name: String = String()

  var completionTargetType: RVData_Cue.CompletionTargetType = .none

  var completionTargetUuid: RVData_UUID {
    get {return _completionTargetUuid ?? RVData_UUID()}
    set {_completionTargetUuid = newValue}
  }
  /// Returns true if `completionTargetUuid` has been explicitly set.
  var hasCompletionTargetUuid: Bool {return self._completionTargetUuid != nil}
  /// Clears the value of `completionTargetUuid`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTargetUuid() {self._completionTargetUuid = nil}

  var completionActionType: RVData_Cue.CompletionActionType = .first

  var completionActionUuid: RVData_UUID {
    get {return _completionActionUuid ?? RVData_UUID()}
    set {_completionActionUuid = newValue}
  }
  /// Returns true if `completionActionUuid` has been explicitly set.
  var hasCompletionActionUuid: Bool {return self._completionActionUuid != nil}
  /// Clears the value of `completionActionUuid`. Subsequent reads from it will return its default value.
  mutating func clearCompletionActionUuid() {self._completionActionUuid = nil}

  var triggerTime: RVData_Cue.TimecodeTime {
    get {return _triggerTime ?? RVData_Cue.TimecodeTime()}
    set {_triggerTime = newValue}
  }
  /// Returns true if `triggerTime` has been explicitly set.
  var hasTriggerTime: Bool {return self._triggerTime != nil}
  /// Clears the value of `triggerTime`. Subsequent reads from it will return its default value.
  mutating func clearTriggerTime() {self._triggerTime = nil}

  var hotKey: RVData_HotKey {
    get {return _hotKey ?? RVData_HotKey()}
    set {_hotKey = newValue}
  }
  /// Returns true if `hotKey` has been explicitly set.
  var hasHotKey: Bool {return self._hotKey != nil}
  /// Clears the value of `hotKey`. Subsequent reads from it will return its default value.
  mutating func clearHotKey() {self._hotKey = nil}

  var actions: [RVData_Action] = []

  var pendingImports: [RVData_Cue.PendingImportsEntry] = []

  var isEnabled: Bool = false

  var completionTime: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CompletionTargetType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case none // = 0
    case next // = 1
    case random // = 2
    case cue // = 3
    case first // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .next
      case 2: self = .random
      case 3: self = .cue
      case 4: self = .first
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .next: return 1
      case .random: return 2
      case .cue: return 3
      case .first: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_Cue.CompletionTargetType] = [
      .none,
      .next,
      .random,
      .cue,
      .first,
    ]

  }

  enum CompletionActionType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case first // = 0
    case last // = 1
    case afterAction // = 2
    case afterTime // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .first
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .first
      case 1: self = .last
      case 2: self = .afterAction
      case 3: self = .afterTime
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .first: return 0
      case .last: return 1
      case .afterAction: return 2
      case .afterTime: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_Cue.CompletionActionType] = [
      .first,
      .last,
      .afterAction,
      .afterTime,
    ]

  }

  struct TimecodeTime: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var time: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PendingImportsEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String = String()

    var value: RVData_URLs {
      get {return _value ?? RVData_URLs()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _value: RVData_URLs? = nil
  }

  init() {}

  fileprivate var _uuid: RVData_UUID? = nil
  fileprivate var _completionTargetUuid: RVData_UUID? = nil
  fileprivate var _completionActionUuid: RVData_UUID? = nil
  fileprivate var _triggerTime: RVData_Cue.TimecodeTime? = nil
  fileprivate var _hotKey: RVData_HotKey? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_Cue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Cue"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(
      reservedNames: [],
      reservedRanges: [9..<10],
      numberNameMappings: [
        1: .same(proto: "uuid"),
        2: .same(proto: "name"),
        3: .standard(proto: "completion_target_type"),
        4: .standard(proto: "completion_target_uuid"),
        5: .standard(proto: "completion_action_type"),
        6: .standard(proto: "completion_action_uuid"),
        7: .standard(proto: "trigger_time"),
        8: .standard(proto: "hot_key"),
        10: .same(proto: "actions"),
        11: .standard(proto: "pending_imports"),
        12: .same(proto: "isEnabled"),
        13: .standard(proto: "completion_time"),
  ])

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.completionTargetType) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._completionTargetUuid) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.completionActionType) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._completionActionUuid) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._triggerTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._hotKey) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.actions) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.pendingImports) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 13: try { try decoder.decodeSingularDoubleField(value: &self.completionTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.completionTargetType != .none {
      try visitor.visitSingularEnumField(value: self.completionTargetType, fieldNumber: 3)
    }
    try { if let v = self._completionTargetUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.completionActionType != .first {
      try visitor.visitSingularEnumField(value: self.completionActionType, fieldNumber: 5)
    }
    try { if let v = self._completionActionUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._triggerTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._hotKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.actions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 10)
    }
    if !self.pendingImports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingImports, fieldNumber: 11)
    }
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 12)
    }
    if self.completionTime.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.completionTime, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Cue, rhs: RVData_Cue) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.completionTargetType != rhs.completionTargetType {return false}
    if lhs._completionTargetUuid != rhs._completionTargetUuid {return false}
    if lhs.completionActionType != rhs.completionActionType {return false}
    if lhs._completionActionUuid != rhs._completionActionUuid {return false}
    if lhs._triggerTime != rhs._triggerTime {return false}
    if lhs._hotKey != rhs._hotKey {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.pendingImports != rhs.pendingImports {return false}
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.completionTime != rhs.completionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Cue.CompletionTargetType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETION_TARGET_TYPE_NONE"),
    1: .same(proto: "COMPLETION_TARGET_TYPE_NEXT"),
    2: .same(proto: "COMPLETION_TARGET_TYPE_RANDOM"),
    3: .same(proto: "COMPLETION_TARGET_TYPE_CUE"),
    4: .same(proto: "COMPLETION_TARGET_TYPE_FIRST"),
  ]
}

extension RVData_Cue.CompletionActionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETION_ACTION_TYPE_FIRST"),
    1: .same(proto: "COMPLETION_ACTION_TYPE_LAST"),
    2: .same(proto: "COMPLETION_ACTION_TYPE_AFTER_ACTION"),
    3: .same(proto: "COMPLETION_ACTION_TYPE_AFTER_TIME"),
  ]
}

extension RVData_Cue.TimecodeTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Cue.protoMessageName + ".TimecodeTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.time, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Cue.TimecodeTime, rhs: RVData_Cue.TimecodeTime) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Cue.PendingImportsEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Cue.protoMessageName + ".PendingImportsEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Cue.PendingImportsEntry, rhs: RVData_Cue.PendingImportsEntry) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
