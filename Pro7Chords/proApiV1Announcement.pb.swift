// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Announcement.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Announcement_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Announcement_Request.OneOf_Request? = nil

  var activeTimelineOperation: RVData_API_v1_Announcement_Request.ActiveTimelineOperation {
    get {
      if case .activeTimelineOperation(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveTimelineOperation()
    }
    set {request = .activeTimelineOperation(newValue)}
  }

  var activeTimelineStatus: RVData_API_v1_Announcement_Request.ActiveTimelineStatus {
    get {
      if case .activeTimelineStatus(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveTimelineStatus()
    }
    set {request = .activeTimelineStatus(newValue)}
  }

  var active: RVData_API_v1_Announcement_Request.Active {
    get {
      if case .active(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.Active()
    }
    set {request = .active(newValue)}
  }

  var slideIndex: RVData_API_v1_Announcement_Request.AnnouncementIndex {
    get {
      if case .slideIndex(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.AnnouncementIndex()
    }
    set {request = .slideIndex(newValue)}
  }

  var activeFocus: RVData_API_v1_Announcement_Request.ActiveFocus {
    get {
      if case .activeFocus(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveFocus()
    }
    set {request = .activeFocus(newValue)}
  }

  var activeTrigger: RVData_API_v1_Announcement_Request.ActiveTrigger {
    get {
      if case .activeTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveTrigger()
    }
    set {request = .activeTrigger(newValue)}
  }

  var activeNextTrigger: RVData_API_v1_Announcement_Request.ActiveNextTrigger {
    get {
      if case .activeNextTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveNextTrigger()
    }
    set {request = .activeNextTrigger(newValue)}
  }

  var activePreviousTrigger: RVData_API_v1_Announcement_Request.ActivePreviousTrigger {
    get {
      if case .activePreviousTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActivePreviousTrigger()
    }
    set {request = .activePreviousTrigger(newValue)}
  }

  var activeIndexTrigger: RVData_API_v1_Announcement_Request.ActiveIndexTrigger {
    get {
      if case .activeIndexTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Request.ActiveIndexTrigger()
    }
    set {request = .activeIndexTrigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case activeTimelineOperation(RVData_API_v1_Announcement_Request.ActiveTimelineOperation)
    case activeTimelineStatus(RVData_API_v1_Announcement_Request.ActiveTimelineStatus)
    case active(RVData_API_v1_Announcement_Request.Active)
    case slideIndex(RVData_API_v1_Announcement_Request.AnnouncementIndex)
    case activeFocus(RVData_API_v1_Announcement_Request.ActiveFocus)
    case activeTrigger(RVData_API_v1_Announcement_Request.ActiveTrigger)
    case activeNextTrigger(RVData_API_v1_Announcement_Request.ActiveNextTrigger)
    case activePreviousTrigger(RVData_API_v1_Announcement_Request.ActivePreviousTrigger)
    case activeIndexTrigger(RVData_API_v1_Announcement_Request.ActiveIndexTrigger)

  }

  struct ActiveTimelineOperation: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var operation: RVData_API_v1_TimelineOperation = .play

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveTimelineStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Active: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AnnouncementIndex: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveFocus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveNextTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActivePreviousTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveIndexTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Announcement_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Announcement_Response.OneOf_Request? = nil

  var activeTimelineOperation: RVData_API_v1_Announcement_Response.ActiveTimelineOperation {
    get {
      if case .activeTimelineOperation(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveTimelineOperation()
    }
    set {request = .activeTimelineOperation(newValue)}
  }

  var activeTimelineStatus: RVData_API_v1_Announcement_Response.ActiveTimelineStatus {
    get {
      if case .activeTimelineStatus(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveTimelineStatus()
    }
    set {request = .activeTimelineStatus(newValue)}
  }

  var active: RVData_API_v1_Announcement_Response.Active {
    get {
      if case .active(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.Active()
    }
    set {request = .active(newValue)}
  }

  var slideIndex: RVData_API_v1_Announcement_Response.SlideIndex {
    get {
      if case .slideIndex(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.SlideIndex()
    }
    set {request = .slideIndex(newValue)}
  }

  var activeFocus: RVData_API_v1_Announcement_Response.ActiveFocus {
    get {
      if case .activeFocus(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveFocus()
    }
    set {request = .activeFocus(newValue)}
  }

  var activeTrigger: RVData_API_v1_Announcement_Response.ActiveTrigger {
    get {
      if case .activeTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveTrigger()
    }
    set {request = .activeTrigger(newValue)}
  }

  var activeNextTrigger: RVData_API_v1_Announcement_Response.ActiveNextTrigger {
    get {
      if case .activeNextTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveNextTrigger()
    }
    set {request = .activeNextTrigger(newValue)}
  }

  var activePreviousTrigger: RVData_API_v1_Announcement_Response.ActivePreviousTrigger {
    get {
      if case .activePreviousTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActivePreviousTrigger()
    }
    set {request = .activePreviousTrigger(newValue)}
  }

  var activeIndexTrigger: RVData_API_v1_Announcement_Response.ActiveIndexTrigger {
    get {
      if case .activeIndexTrigger(let v)? = request {return v}
      return RVData_API_v1_Announcement_Response.ActiveIndexTrigger()
    }
    set {request = .activeIndexTrigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case activeTimelineOperation(RVData_API_v1_Announcement_Response.ActiveTimelineOperation)
    case activeTimelineStatus(RVData_API_v1_Announcement_Response.ActiveTimelineStatus)
    case active(RVData_API_v1_Announcement_Response.Active)
    case slideIndex(RVData_API_v1_Announcement_Response.SlideIndex)
    case activeFocus(RVData_API_v1_Announcement_Response.ActiveFocus)
    case activeTrigger(RVData_API_v1_Announcement_Response.ActiveTrigger)
    case activeNextTrigger(RVData_API_v1_Announcement_Response.ActiveNextTrigger)
    case activePreviousTrigger(RVData_API_v1_Announcement_Response.ActivePreviousTrigger)
    case activeIndexTrigger(RVData_API_v1_Announcement_Response.ActiveIndexTrigger)

  }

  struct ActiveTimelineOperation: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveTimelineStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isRunning: Bool = false

    var currentTime: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Active: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var announcement: RVData_API_v1_Presentation {
      get {return _announcement ?? RVData_API_v1_Presentation()}
      set {_announcement = newValue}
    }
    /// Returns true if `announcement` has been explicitly set.
    var hasAnnouncement: Bool {return self._announcement != nil}
    /// Clears the value of `announcement`. Subsequent reads from it will return its default value.
    mutating func clearAnnouncement() {self._announcement = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _announcement: RVData_API_v1_Presentation? = nil
  }

  struct SlideIndex: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var announcementIndex: RVData_API_v1_SlideIndex {
      get {return _announcementIndex ?? RVData_API_v1_SlideIndex()}
      set {_announcementIndex = newValue}
    }
    /// Returns true if `announcementIndex` has been explicitly set.
    var hasAnnouncementIndex: Bool {return self._announcementIndex != nil}
    /// Clears the value of `announcementIndex`. Subsequent reads from it will return its default value.
    mutating func clearAnnouncementIndex() {self._announcementIndex = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _announcementIndex: RVData_API_v1_SlideIndex? = nil
  }

  struct ActiveFocus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveNextTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActivePreviousTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ActiveIndexTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Announcement_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Announcement_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "active_timeline_operation"),
    2: .standard(proto: "active_timeline_status"),
    3: .same(proto: "active"),
    4: .standard(proto: "slide_index"),
    5: .standard(proto: "active_focus"),
    6: .standard(proto: "active_trigger"),
    7: .standard(proto: "active_next_trigger"),
    8: .standard(proto: "active_previous_trigger"),
    9: .standard(proto: "active_index_trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Announcement_Request.ActiveTimelineOperation?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTimelineOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTimelineOperation(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Announcement_Request.ActiveTimelineStatus?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTimelineStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTimelineStatus(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Announcement_Request.Active?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .active(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .active(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Announcement_Request.AnnouncementIndex?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .slideIndex(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .slideIndex(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Announcement_Request.ActiveFocus?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeFocus(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Announcement_Request.ActiveTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTrigger(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Announcement_Request.ActiveNextTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeNextTrigger(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Announcement_Request.ActivePreviousTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activePreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activePreviousTrigger(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Announcement_Request.ActiveIndexTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeIndexTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeIndexTrigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .activeTimelineOperation?: try {
      guard case .activeTimelineOperation(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .activeTimelineStatus?: try {
      guard case .activeTimelineStatus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .active?: try {
      guard case .active(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .slideIndex?: try {
      guard case .slideIndex(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .activeFocus?: try {
      guard case .activeFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .activeTrigger?: try {
      guard case .activeTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .activeNextTrigger?: try {
      guard case .activeNextTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .activePreviousTrigger?: try {
      guard case .activePreviousTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .activeIndexTrigger?: try {
      guard case .activeIndexTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request, rhs: RVData_API_v1_Announcement_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveTimelineOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveTimelineOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operation != .play {
      try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveTimelineOperation, rhs: RVData_API_v1_Announcement_Request.ActiveTimelineOperation) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveTimelineStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveTimelineStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveTimelineStatus, rhs: RVData_API_v1_Announcement_Request.ActiveTimelineStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.Active: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".Active"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.Active, rhs: RVData_API_v1_Announcement_Request.Active) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.AnnouncementIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".AnnouncementIndex"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.AnnouncementIndex, rhs: RVData_API_v1_Announcement_Request.AnnouncementIndex) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveFocus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveFocus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveFocus, rhs: RVData_API_v1_Announcement_Request.ActiveFocus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveTrigger, rhs: RVData_API_v1_Announcement_Request.ActiveTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveNextTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveNextTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveNextTrigger, rhs: RVData_API_v1_Announcement_Request.ActiveNextTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActivePreviousTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActivePreviousTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActivePreviousTrigger, rhs: RVData_API_v1_Announcement_Request.ActivePreviousTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Request.ActiveIndexTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Request.protoMessageName + ".ActiveIndexTrigger"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Request.ActiveIndexTrigger, rhs: RVData_API_v1_Announcement_Request.ActiveIndexTrigger) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Announcement_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "active_timeline_operation"),
    2: .standard(proto: "active_timeline_status"),
    3: .same(proto: "active"),
    4: .standard(proto: "slide_index"),
    5: .standard(proto: "active_focus"),
    6: .standard(proto: "active_trigger"),
    7: .standard(proto: "active_next_trigger"),
    8: .standard(proto: "active_previous_trigger"),
    9: .standard(proto: "active_index_trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Announcement_Response.ActiveTimelineOperation?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTimelineOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTimelineOperation(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Announcement_Response.ActiveTimelineStatus?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTimelineStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTimelineStatus(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Announcement_Response.Active?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .active(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .active(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Announcement_Response.SlideIndex?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .slideIndex(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .slideIndex(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Announcement_Response.ActiveFocus?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeFocus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeFocus(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Announcement_Response.ActiveTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeTrigger(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Announcement_Response.ActiveNextTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeNextTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeNextTrigger(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Announcement_Response.ActivePreviousTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activePreviousTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activePreviousTrigger(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Announcement_Response.ActiveIndexTrigger?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .activeIndexTrigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .activeIndexTrigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .activeTimelineOperation?: try {
      guard case .activeTimelineOperation(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .activeTimelineStatus?: try {
      guard case .activeTimelineStatus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .active?: try {
      guard case .active(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .slideIndex?: try {
      guard case .slideIndex(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .activeFocus?: try {
      guard case .activeFocus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .activeTrigger?: try {
      guard case .activeTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .activeNextTrigger?: try {
      guard case .activeNextTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .activePreviousTrigger?: try {
      guard case .activePreviousTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .activeIndexTrigger?: try {
      guard case .activeIndexTrigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response, rhs: RVData_API_v1_Announcement_Response) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveTimelineOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveTimelineOperation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveTimelineOperation, rhs: RVData_API_v1_Announcement_Response.ActiveTimelineOperation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveTimelineStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveTimelineStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_running"),
    2: .standard(proto: "current_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isRunning) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.currentTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isRunning != false {
      try visitor.visitSingularBoolField(value: self.isRunning, fieldNumber: 1)
    }
    if self.currentTime.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.currentTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveTimelineStatus, rhs: RVData_API_v1_Announcement_Response.ActiveTimelineStatus) -> Bool {
    if lhs.isRunning != rhs.isRunning {return false}
    if lhs.currentTime != rhs.currentTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.Active: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".Active"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "announcement"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._announcement) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._announcement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.Active, rhs: RVData_API_v1_Announcement_Response.Active) -> Bool {
    if lhs._announcement != rhs._announcement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.SlideIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".SlideIndex"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "announcement_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._announcementIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._announcementIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.SlideIndex, rhs: RVData_API_v1_Announcement_Response.SlideIndex) -> Bool {
    if lhs._announcementIndex != rhs._announcementIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveFocus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveFocus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveFocus, rhs: RVData_API_v1_Announcement_Response.ActiveFocus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveTrigger, rhs: RVData_API_v1_Announcement_Response.ActiveTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveNextTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveNextTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveNextTrigger, rhs: RVData_API_v1_Announcement_Response.ActiveNextTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActivePreviousTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActivePreviousTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActivePreviousTrigger, rhs: RVData_API_v1_Announcement_Response.ActivePreviousTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Announcement_Response.ActiveIndexTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Announcement_Response.protoMessageName + ".ActiveIndexTrigger"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Announcement_Response.ActiveIndexTrigger, rhs: RVData_API_v1_Announcement_Response.ActiveIndexTrigger) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
