// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proscreen.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_ProPresenterScreen: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var screenType: RVData_ProPresenterScreen.ScreenType = .unknown

  var backgroundColor: RVData_Color {
    get {return _backgroundColor ?? RVData_Color()}
    set {_backgroundColor = newValue}
  }
  /// Returns true if `backgroundColor` has been explicitly set.
  var hasBackgroundColor: Bool {return self._backgroundColor != nil}
  /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundColor() {self._backgroundColor = nil}

  var uuid: RVData_UUID {
    get {return _uuid ?? RVData_UUID()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var backgroundColorEnabled: Bool = false

  var arrangement: RVData_ProPresenterScreen.OneOf_Arrangement? = nil

  var arrangementSingle: RVData_ProPresenterScreen.SingleArrangement {
    get {
      if case .arrangementSingle(let v)? = arrangement {return v}
      return RVData_ProPresenterScreen.SingleArrangement()
    }
    set {arrangement = .arrangementSingle(newValue)}
  }

  var arrangementCombined: RVData_ProPresenterScreen.CombinedArrangement {
    get {
      if case .arrangementCombined(let v)? = arrangement {return v}
      return RVData_ProPresenterScreen.CombinedArrangement()
    }
    set {arrangement = .arrangementCombined(newValue)}
  }

  var arrangementEdgeBlend: RVData_ProPresenterScreen.EdgeBlendArrangement {
    get {
      if case .arrangementEdgeBlend(let v)? = arrangement {return v}
      return RVData_ProPresenterScreen.EdgeBlendArrangement()
    }
    set {arrangement = .arrangementEdgeBlend(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Arrangement: Equatable, Sendable {
    case arrangementSingle(RVData_ProPresenterScreen.SingleArrangement)
    case arrangementCombined(RVData_ProPresenterScreen.CombinedArrangement)
    case arrangementEdgeBlend(RVData_ProPresenterScreen.EdgeBlendArrangement)

  }

  enum ScreenType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case audience // = 1
    case stage // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .audience
      case 2: self = .stage
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .audience: return 1
      case .stage: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_ProPresenterScreen.ScreenType] = [
      .unknown,
      .audience,
      .stage,
    ]

  }

  struct SingleArrangement: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var screens: [RVData_Screen] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CombinedArrangement: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var screens: [RVData_Screen] = []

    var rows: UInt32 = 0

    var columns: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EdgeBlendArrangement: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var screenCount: UInt32 = 0

    var screens: [RVData_Screen] = []

    var edgeBlends: [RVData_EdgeBlend] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _backgroundColor: RVData_Color? = nil
  fileprivate var _uuid: RVData_UUID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_ProPresenterScreen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProPresenterScreen"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "screen_type"),
    6: .standard(proto: "background_color"),
    7: .same(proto: "uuid"),
    8: .standard(proto: "background_color_enabled"),
    3: .standard(proto: "arrangement_single"),
    4: .standard(proto: "arrangement_combined"),
    5: .standard(proto: "arrangement_edge_blend"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.screenType) }()
      case 3: try {
        var v: RVData_ProPresenterScreen.SingleArrangement?
        var hadOneofValue = false
        if let current = self.arrangement {
          hadOneofValue = true
          if case .arrangementSingle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.arrangement = .arrangementSingle(v)
        }
      }()
      case 4: try {
        var v: RVData_ProPresenterScreen.CombinedArrangement?
        var hadOneofValue = false
        if let current = self.arrangement {
          hadOneofValue = true
          if case .arrangementCombined(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.arrangement = .arrangementCombined(v)
        }
      }()
      case 5: try {
        var v: RVData_ProPresenterScreen.EdgeBlendArrangement?
        var hadOneofValue = false
        if let current = self.arrangement {
          hadOneofValue = true
          if case .arrangementEdgeBlend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.arrangement = .arrangementEdgeBlend(v)
        }
      }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._backgroundColor) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.backgroundColorEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.screenType != .unknown {
      try visitor.visitSingularEnumField(value: self.screenType, fieldNumber: 2)
    }
    switch self.arrangement {
    case .arrangementSingle?: try {
      guard case .arrangementSingle(let v)? = self.arrangement else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .arrangementCombined?: try {
      guard case .arrangementCombined(let v)? = self.arrangement else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .arrangementEdgeBlend?: try {
      guard case .arrangementEdgeBlend(let v)? = self.arrangement else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try { if let v = self._backgroundColor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.backgroundColorEnabled != false {
      try visitor.visitSingularBoolField(value: self.backgroundColorEnabled, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProPresenterScreen, rhs: RVData_ProPresenterScreen) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.screenType != rhs.screenType {return false}
    if lhs._backgroundColor != rhs._backgroundColor {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs.backgroundColorEnabled != rhs.backgroundColorEnabled {return false}
    if lhs.arrangement != rhs.arrangement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ProPresenterScreen.ScreenType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCREEN_TYPE_UNKNOWN"),
    1: .same(proto: "SCREEN_TYPE_AUDIENCE"),
    2: .same(proto: "SCREEN_TYPE_STAGE"),
  ]
}

extension RVData_ProPresenterScreen.SingleArrangement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_ProPresenterScreen.protoMessageName + ".SingleArrangement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "screens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.screens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.screens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screens, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProPresenterScreen.SingleArrangement, rhs: RVData_ProPresenterScreen.SingleArrangement) -> Bool {
    if lhs.screens != rhs.screens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ProPresenterScreen.CombinedArrangement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_ProPresenterScreen.protoMessageName + ".CombinedArrangement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "screens"),
    2: .same(proto: "rows"),
    3: .same(proto: "columns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.screens) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.rows) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.columns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.screens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screens, fieldNumber: 1)
    }
    if self.rows != 0 {
      try visitor.visitSingularUInt32Field(value: self.rows, fieldNumber: 2)
    }
    if self.columns != 0 {
      try visitor.visitSingularUInt32Field(value: self.columns, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProPresenterScreen.CombinedArrangement, rhs: RVData_ProPresenterScreen.CombinedArrangement) -> Bool {
    if lhs.screens != rhs.screens {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.columns != rhs.columns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_ProPresenterScreen.EdgeBlendArrangement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_ProPresenterScreen.protoMessageName + ".EdgeBlendArrangement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "screen_count"),
    2: .same(proto: "screens"),
    3: .standard(proto: "edge_blends"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.screenCount) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.screens) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.edgeBlends) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.screenCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.screenCount, fieldNumber: 1)
    }
    if !self.screens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screens, fieldNumber: 2)
    }
    if !self.edgeBlends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.edgeBlends, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_ProPresenterScreen.EdgeBlendArrangement, rhs: RVData_ProPresenterScreen.EdgeBlendArrangement) -> Bool {
    if lhs.screenCount != rhs.screenCount {return false}
    if lhs.screens != rhs.screens {return false}
    if lhs.edgeBlends != rhs.edgeBlends {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
