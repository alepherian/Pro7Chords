// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsEvent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Event: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var interaction: Analytics_Event.OneOf_Interaction? = nil

  var ui: Analytics_UI {
    get {
      if case .ui(let v)? = interaction {return v}
      return Analytics_UI()
    }
    set {interaction = .ui(newValue)}
  }

  var startup: Analytics_Startup {
    get {
      if case .startup(let v)? = interaction {return v}
      return Analytics_Startup()
    }
    set {interaction = .startup(newValue)}
  }

  var trigger: Analytics_Trigger {
    get {
      if case .trigger(let v)? = interaction {return v}
      return Analytics_Trigger()
    }
    set {interaction = .trigger(newValue)}
  }

  var create: Analytics_Create {
    get {
      if case .create(let v)? = interaction {return v}
      return Analytics_Create()
    }
    set {interaction = .create(newValue)}
  }

  var `import`: Analytics_Import {
    get {
      if case .import(let v)? = interaction {return v}
      return Analytics_Import()
    }
    set {interaction = .import(newValue)}
  }

  var timeline: Analytics_Timeline {
    get {
      if case .timeline(let v)? = interaction {return v}
      return Analytics_Timeline()
    }
    set {interaction = .timeline(newValue)}
  }

  var sync: Analytics_Sync {
    get {
      if case .sync(let v)? = interaction {return v}
      return Analytics_Sync()
    }
    set {interaction = .sync(newValue)}
  }

  var api: Analytics_API {
    get {
      if case .api(let v)? = interaction {return v}
      return Analytics_API()
    }
    set {interaction = .api(newValue)}
  }

  var timecode: Analytics_Timecode {
    get {
      if case .timecode(let v)? = interaction {return v}
      return Analytics_Timecode()
    }
    set {interaction = .timecode(newValue)}
  }

  var playbackMarker: Analytics_PlaybackMarker {
    get {
      if case .playbackMarker(let v)? = interaction {return v}
      return Analytics_PlaybackMarker()
    }
    set {interaction = .playbackMarker(newValue)}
  }

  var update: Analytics_Update {
    get {
      if case .update(let v)? = interaction {return v}
      return Analytics_Update()
    }
    set {interaction = .update(newValue)}
  }

  var whmStore: Analytics_WHMStore {
    get {
      if case .whmStore(let v)? = interaction {return v}
      return Analytics_WHMStore()
    }
    set {interaction = .whmStore(newValue)}
  }

  var proContent: Analytics_ProContent {
    get {
      if case .proContent(let v)? = interaction {return v}
      return Analytics_ProContent()
    }
    set {interaction = .proContent(newValue)}
  }

  var capture: Analytics_Capture {
    get {
      if case .capture(let v)? = interaction {return v}
      return Analytics_Capture()
    }
    set {interaction = .capture(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Interaction: Equatable, Sendable {
    case ui(Analytics_UI)
    case startup(Analytics_Startup)
    case trigger(Analytics_Trigger)
    case create(Analytics_Create)
    case `import`(Analytics_Import)
    case timeline(Analytics_Timeline)
    case sync(Analytics_Sync)
    case api(Analytics_API)
    case timecode(Analytics_Timecode)
    case playbackMarker(Analytics_PlaybackMarker)
    case update(Analytics_Update)
    case whmStore(Analytics_WHMStore)
    case proContent(Analytics_ProContent)
    case capture(Analytics_Capture)

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ui"),
    2: .same(proto: "startup"),
    3: .same(proto: "trigger"),
    4: .same(proto: "create"),
    5: .same(proto: "import"),
    6: .same(proto: "timeline"),
    7: .same(proto: "sync"),
    8: .same(proto: "api"),
    9: .same(proto: "timecode"),
    10: .standard(proto: "playback_marker"),
    11: .same(proto: "update"),
    12: .standard(proto: "whm_store"),
    13: .same(proto: "proContent"),
    14: .same(proto: "capture"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_UI?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .ui(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .ui(v)
        }
      }()
      case 2: try {
        var v: Analytics_Startup?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .startup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .startup(v)
        }
      }()
      case 3: try {
        var v: Analytics_Trigger?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .trigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .trigger(v)
        }
      }()
      case 4: try {
        var v: Analytics_Create?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .create(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .create(v)
        }
      }()
      case 5: try {
        var v: Analytics_Import?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .import(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .import(v)
        }
      }()
      case 6: try {
        var v: Analytics_Timeline?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .timeline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .timeline(v)
        }
      }()
      case 7: try {
        var v: Analytics_Sync?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .sync(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .sync(v)
        }
      }()
      case 8: try {
        var v: Analytics_API?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .api(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .api(v)
        }
      }()
      case 9: try {
        var v: Analytics_Timecode?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .timecode(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .timecode(v)
        }
      }()
      case 10: try {
        var v: Analytics_PlaybackMarker?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .playbackMarker(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .playbackMarker(v)
        }
      }()
      case 11: try {
        var v: Analytics_Update?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .update(v)
        }
      }()
      case 12: try {
        var v: Analytics_WHMStore?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .whmStore(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .whmStore(v)
        }
      }()
      case 13: try {
        var v: Analytics_ProContent?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .proContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .proContent(v)
        }
      }()
      case 14: try {
        var v: Analytics_Capture?
        var hadOneofValue = false
        if let current = self.interaction {
          hadOneofValue = true
          if case .capture(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.interaction = .capture(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.interaction {
    case .ui?: try {
      guard case .ui(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .startup?: try {
      guard case .startup(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .trigger?: try {
      guard case .trigger(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .create?: try {
      guard case .create(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .import?: try {
      guard case .import(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .timeline?: try {
      guard case .timeline(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .sync?: try {
      guard case .sync(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .api?: try {
      guard case .api(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .timecode?: try {
      guard case .timecode(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .playbackMarker?: try {
      guard case .playbackMarker(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .update?: try {
      guard case .update(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .whmStore?: try {
      guard case .whmStore(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .proContent?: try {
      guard case .proContent(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .capture?: try {
      guard case .capture(let v)? = self.interaction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Event, rhs: Analytics_Event) -> Bool {
    if lhs.interaction != rhs.interaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
