// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: presentationSlide.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_PresentationSlide: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseSlide: RVData_Slide {
    get {return _storage._baseSlide ?? RVData_Slide()}
    set {_uniqueStorage()._baseSlide = newValue}
  }
  /// Returns true if `baseSlide` has been explicitly set.
  var hasBaseSlide: Bool {return _storage._baseSlide != nil}
  /// Clears the value of `baseSlide`. Subsequent reads from it will return its default value.
  mutating func clearBaseSlide() {_uniqueStorage()._baseSlide = nil}

  var notes: RVData_PresentationSlide.Notes {
    get {return _storage._notes ?? RVData_PresentationSlide.Notes()}
    set {_uniqueStorage()._notes = newValue}
  }
  /// Returns true if `notes` has been explicitly set.
  var hasNotes: Bool {return _storage._notes != nil}
  /// Clears the value of `notes`. Subsequent reads from it will return its default value.
  mutating func clearNotes() {_uniqueStorage()._notes = nil}

  var templateGuidelines: [RVData_AlignmentGuide] {
    get {return _storage._templateGuidelines}
    set {_uniqueStorage()._templateGuidelines = newValue}
  }

  var chordChart: RVData_URL {
    get {return _storage._chordChart ?? RVData_URL()}
    set {_uniqueStorage()._chordChart = newValue}
  }
  /// Returns true if `chordChart` has been explicitly set.
  var hasChordChart: Bool {return _storage._chordChart != nil}
  /// Clears the value of `chordChart`. Subsequent reads from it will return its default value.
  mutating func clearChordChart() {_uniqueStorage()._chordChart = nil}

  var transition: RVData_Transition {
    get {return _storage._transition ?? RVData_Transition()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Notes: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rtfData: Data = Data()

    var attributes: RVData_Graphics.Text.Attributes {
      get {return _attributes ?? RVData_Graphics.Text.Attributes()}
      set {_attributes = newValue}
    }
    /// Returns true if `attributes` has been explicitly set.
    var hasAttributes: Bool {return self._attributes != nil}
    /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
    mutating func clearAttributes() {self._attributes = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _attributes: RVData_Graphics.Text.Attributes? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_PresentationSlide: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PresentationSlide"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_slide"),
    2: .same(proto: "notes"),
    3: .standard(proto: "template_guidelines"),
    4: .standard(proto: "chord_chart"),
    5: .same(proto: "transition"),
  ]

  fileprivate class _StorageClass {
    var _baseSlide: RVData_Slide? = nil
    var _notes: RVData_PresentationSlide.Notes? = nil
    var _templateGuidelines: [RVData_AlignmentGuide] = []
    var _chordChart: RVData_URL? = nil
    var _transition: RVData_Transition? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseSlide = source._baseSlide
      _notes = source._notes
      _templateGuidelines = source._templateGuidelines
      _chordChart = source._chordChart
      _transition = source._transition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._baseSlide) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._notes) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._templateGuidelines) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._chordChart) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._transition) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._baseSlide {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._notes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._templateGuidelines.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._templateGuidelines, fieldNumber: 3)
      }
      try { if let v = _storage._chordChart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PresentationSlide, rhs: RVData_PresentationSlide) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseSlide != rhs_storage._baseSlide {return false}
        if _storage._notes != rhs_storage._notes {return false}
        if _storage._templateGuidelines != rhs_storage._templateGuidelines {return false}
        if _storage._chordChart != rhs_storage._chordChart {return false}
        if _storage._transition != rhs_storage._transition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_PresentationSlide.Notes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_PresentationSlide.protoMessageName + ".Notes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rtf_data"),
    2: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.rtfData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attributes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rtfData.isEmpty {
      try visitor.visitSingularBytesField(value: self.rtfData, fieldNumber: 1)
    }
    try { if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PresentationSlide.Notes, rhs: RVData_PresentationSlide.Notes) -> Bool {
    if lhs.rtfData != rhs.rtfData {return false}
    if lhs._attributes != rhs._attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
