// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsSync.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Sync: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var syncType: Analytics_Sync.OneOf_SyncType? = nil

  var local: Analytics_Sync.Local {
    get {
      if case .local(let v)? = syncType {return v}
      return Analytics_Sync.Local()
    }
    set {syncType = .local(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_SyncType: Equatable, Sendable {
    case local(Analytics_Sync.Local)

  }

  struct Local: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var syncType: Analytics_Sync.Local.SyncType = .up

    var includeLibrary: Bool = false

    var includeMedia: Bool = false

    var includePlaylists: Bool = false

    var includeThemes: Bool = false

    var includeSupportFiles: Bool = false

    var replaceFiles: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum SyncType: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case up // = 0
      case down // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .up
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .up
        case 1: self = .down
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .up: return 0
        case .down: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Sync.Local.SyncType] = [
        .up,
        .down,
      ]

    }

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Sync: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Sync"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "local"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Sync.Local?
        var hadOneofValue = false
        if let current = self.syncType {
          hadOneofValue = true
          if case .local(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.syncType = .local(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .local(let v)? = self.syncType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Sync, rhs: Analytics_Sync) -> Bool {
    if lhs.syncType != rhs.syncType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Sync.Local: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Sync.protoMessageName + ".Local"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sync_type"),
    2: .standard(proto: "include_library"),
    3: .standard(proto: "include_media"),
    4: .standard(proto: "include_playlists"),
    5: .standard(proto: "include_themes"),
    6: .standard(proto: "include_support_files"),
    7: .standard(proto: "replace_files"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.syncType) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.includeLibrary) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.includeMedia) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.includePlaylists) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.includeThemes) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.includeSupportFiles) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.replaceFiles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.syncType != .up {
      try visitor.visitSingularEnumField(value: self.syncType, fieldNumber: 1)
    }
    if self.includeLibrary != false {
      try visitor.visitSingularBoolField(value: self.includeLibrary, fieldNumber: 2)
    }
    if self.includeMedia != false {
      try visitor.visitSingularBoolField(value: self.includeMedia, fieldNumber: 3)
    }
    if self.includePlaylists != false {
      try visitor.visitSingularBoolField(value: self.includePlaylists, fieldNumber: 4)
    }
    if self.includeThemes != false {
      try visitor.visitSingularBoolField(value: self.includeThemes, fieldNumber: 5)
    }
    if self.includeSupportFiles != false {
      try visitor.visitSingularBoolField(value: self.includeSupportFiles, fieldNumber: 6)
    }
    if self.replaceFiles != false {
      try visitor.visitSingularBoolField(value: self.replaceFiles, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Sync.Local, rhs: Analytics_Sync.Local) -> Bool {
    if lhs.syncType != rhs.syncType {return false}
    if lhs.includeLibrary != rhs.includeLibrary {return false}
    if lhs.includeMedia != rhs.includeMedia {return false}
    if lhs.includePlaylists != rhs.includePlaylists {return false}
    if lhs.includeThemes != rhs.includeThemes {return false}
    if lhs.includeSupportFiles != rhs.includeSupportFiles {return false}
    if lhs.replaceFiles != rhs.replaceFiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Sync.Local.SyncType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SYNC_TYPE_UP"),
    1: .same(proto: "SYNC_TYPE_DOWN"),
  ]
}
