// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fileProperties.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_FileProperties: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var localURL: RVData_URL {
    get {return _localURL ?? RVData_URL()}
    set {_localURL = newValue}
  }
  /// Returns true if `localURL` has been explicitly set.
  var hasLocalURL: Bool {return self._localURL != nil}
  /// Clears the value of `localURL`. Subsequent reads from it will return its default value.
  mutating func clearLocalURL() {self._localURL = nil}

  var remoteProperties: RVData_FileProperties.RemoteProperties {
    get {return _remoteProperties ?? RVData_FileProperties.RemoteProperties()}
    set {_remoteProperties = newValue}
  }
  /// Returns true if `remoteProperties` has been explicitly set.
  var hasRemoteProperties: Bool {return self._remoteProperties != nil}
  /// Clears the value of `remoteProperties`. Subsequent reads from it will return its default value.
  mutating func clearRemoteProperties() {self._remoteProperties = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RemoteProperties: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var procontent: RVData_FileProperties.RemoteProperties.ProContent {
      get {return _procontent ?? RVData_FileProperties.RemoteProperties.ProContent()}
      set {_procontent = newValue}
    }
    /// Returns true if `procontent` has been explicitly set.
    var hasProcontent: Bool {return self._procontent != nil}
    /// Clears the value of `procontent`. Subsequent reads from it will return its default value.
    mutating func clearProcontent() {self._procontent = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ProContent: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var downloadIdentifier: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _procontent: RVData_FileProperties.RemoteProperties.ProContent? = nil
  }

  init() {}

  fileprivate var _localURL: RVData_URL? = nil
  fileprivate var _remoteProperties: RVData_FileProperties.RemoteProperties? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_FileProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileProperties"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_url"),
    2: .standard(proto: "remote_properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._localURL) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._remoteProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._localURL {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._remoteProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_FileProperties, rhs: RVData_FileProperties) -> Bool {
    if lhs._localURL != rhs._localURL {return false}
    if lhs._remoteProperties != rhs._remoteProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_FileProperties.RemoteProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_FileProperties.protoMessageName + ".RemoteProperties"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "procontent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._procontent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._procontent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_FileProperties.RemoteProperties, rhs: RVData_FileProperties.RemoteProperties) -> Bool {
    if lhs._procontent != rhs._procontent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_FileProperties.RemoteProperties.ProContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_FileProperties.RemoteProperties.protoMessageName + ".ProContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "download_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.downloadIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.downloadIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.downloadIdentifier, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_FileProperties.RemoteProperties.ProContent, rhs: RVData_FileProperties.RemoteProperties.ProContent) -> Bool {
    if lhs.downloadIdentifier != rhs.downloadIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
