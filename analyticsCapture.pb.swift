// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsCapture.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Capture: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Analytics_Capture.OneOf_Event? = nil

  var start: Analytics_Capture.Start {
    get {
      if case .start(let v)? = event {return v}
      return Analytics_Capture.Start()
    }
    set {event = .start(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable, Sendable {
    case start(Analytics_Capture.Start)

  }

  enum Codec: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case automatic // = 1
    case h264 // = 2
    case h264Software // = 3
    case h265 // = 4
    case h265Software // = 5
    case prores422Proxy // = 6
    case prores422Lt // = 7
    case prores422 // = 8
    case prores422Hq // = 9
    case prores4444 // = 10
    case prores4444Xq // = 11
    case hap // = 12
    case hapAlpha // = 13
    case hapQ // = 14
    case hapQAlpha // = 15
    case notch // = 16
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .automatic
      case 2: self = .h264
      case 3: self = .h264Software
      case 4: self = .h265
      case 5: self = .h265Software
      case 6: self = .prores422Proxy
      case 7: self = .prores422Lt
      case 8: self = .prores422
      case 9: self = .prores422Hq
      case 10: self = .prores4444
      case 11: self = .prores4444Xq
      case 12: self = .hap
      case 13: self = .hapAlpha
      case 14: self = .hapQ
      case 15: self = .hapQAlpha
      case 16: self = .notch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .automatic: return 1
      case .h264: return 2
      case .h264Software: return 3
      case .h265: return 4
      case .h265Software: return 5
      case .prores422Proxy: return 6
      case .prores422Lt: return 7
      case .prores422: return 8
      case .prores422Hq: return 9
      case .prores4444: return 10
      case .prores4444Xq: return 11
      case .hap: return 12
      case .hapAlpha: return 13
      case .hapQ: return 14
      case .hapQAlpha: return 15
      case .notch: return 16
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Analytics_Capture.Codec] = [
      .unknown,
      .automatic,
      .h264,
      .h264Software,
      .h265,
      .h265Software,
      .prores422Proxy,
      .prores422Lt,
      .prores422,
      .prores422Hq,
      .prores4444,
      .prores4444Xq,
      .hap,
      .hapAlpha,
      .hapQ,
      .hapQAlpha,
      .notch,
    ]

  }

  enum FrameRate: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case frameRate24 // = 1
    case frameRate25 // = 2
    case frameRate2997 // = 3
    case frameRate30 // = 4
    case frameRate50 // = 5
    case frameRate5994 // = 6
    case frameRate60 // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .frameRate24
      case 2: self = .frameRate25
      case 3: self = .frameRate2997
      case 4: self = .frameRate30
      case 5: self = .frameRate50
      case 6: self = .frameRate5994
      case 7: self = .frameRate60
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .frameRate24: return 1
      case .frameRate25: return 2
      case .frameRate2997: return 3
      case .frameRate30: return 4
      case .frameRate50: return 5
      case .frameRate5994: return 6
      case .frameRate60: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Analytics_Capture.FrameRate] = [
      .unknown,
      .frameRate24,
      .frameRate25,
      .frameRate2997,
      .frameRate30,
      .frameRate50,
      .frameRate5994,
      .frameRate60,
    ]

  }

  struct Resolution: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: Int32 = 0

    var height: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Start: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var component: Analytics_Capture.Start.OneOf_Component? = nil

    var rtmp: Analytics_Capture.Start.RTMP {
      get {
        if case .rtmp(let v)? = component {return v}
        return Analytics_Capture.Start.RTMP()
      }
      set {component = .rtmp(newValue)}
    }

    var disk: Analytics_Capture.Start.Disk {
      get {
        if case .disk(let v)? = component {return v}
        return Analytics_Capture.Start.Disk()
      }
      set {component = .disk(newValue)}
    }

    var resi: Analytics_Capture.Start.Resi {
      get {
        if case .resi(let v)? = component {return v}
        return Analytics_Capture.Start.Resi()
      }
      set {component = .resi(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Component: Equatable, Sendable {
      case rtmp(Analytics_Capture.Start.RTMP)
      case disk(Analytics_Capture.Start.Disk)
      case resi(Analytics_Capture.Start.Resi)

    }

    struct RTMP: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var codec: Analytics_Capture.Codec = .unknown

      var frameRate: Analytics_Capture.FrameRate = .unknown

      var host: String = String()

      var resolution: Analytics_Capture.Resolution {
        get {return _resolution ?? Analytics_Capture.Resolution()}
        set {_resolution = newValue}
      }
      /// Returns true if `resolution` has been explicitly set.
      var hasResolution: Bool {return self._resolution != nil}
      /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
      mutating func clearResolution() {self._resolution = nil}

      var streamStarted: Bool = false

      var videoBitrate: Int32 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _resolution: Analytics_Capture.Resolution? = nil
    }

    struct Disk: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var codec: Analytics_Capture.Codec = .unknown

      var frameRate: Analytics_Capture.FrameRate = .unknown

      var resolution: Analytics_Capture.Resolution {
        get {return _resolution ?? Analytics_Capture.Resolution()}
        set {_resolution = newValue}
      }
      /// Returns true if `resolution` has been explicitly set.
      var hasResolution: Bool {return self._resolution != nil}
      /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
      mutating func clearResolution() {self._resolution = nil}

      var streamStarted: Bool = false

      var videoBitrate: Int32 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _resolution: Analytics_Capture.Resolution? = nil
    }

    struct Resi: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var codec: Analytics_Capture.Codec = .unknown

      var frameRate: Analytics_Capture.FrameRate = .unknown

      var resolution: Analytics_Capture.Resolution {
        get {return _resolution ?? Analytics_Capture.Resolution()}
        set {_resolution = newValue}
      }
      /// Returns true if `resolution` has been explicitly set.
      var hasResolution: Bool {return self._resolution != nil}
      /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
      mutating func clearResolution() {self._resolution = nil}

      var streamStarted: Bool = false

      var videoBitrate: Int32 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _resolution: Analytics_Capture.Resolution? = nil
    }

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Capture: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Capture"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Capture.Start?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .start(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .start(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .start(let v)? = self.event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture, rhs: Analytics_Capture) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Capture.Codec: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODEC_UNKNOWN"),
    1: .same(proto: "CODEC_AUTOMATIC"),
    2: .same(proto: "CODEC_H264"),
    3: .same(proto: "CODEC_H264_SOFTWARE"),
    4: .same(proto: "CODEC_H265"),
    5: .same(proto: "CODEC_H265_SOFTWARE"),
    6: .same(proto: "CODEC_PRORES_422_PROXY"),
    7: .same(proto: "CODEC_PRORES_422_LT"),
    8: .same(proto: "CODEC_PRORES_422"),
    9: .same(proto: "CODEC_PRORES_422_HQ"),
    10: .same(proto: "CODEC_PRORES_4444"),
    11: .same(proto: "CODEC_PRORES_4444_XQ"),
    12: .same(proto: "CODEC_HAP"),
    13: .same(proto: "CODEC_HAP_ALPHA"),
    14: .same(proto: "CODEC_HAP_Q"),
    15: .same(proto: "CODEC_HAP_Q_ALPHA"),
    16: .same(proto: "CODEC_NOTCH"),
  ]
}

extension Analytics_Capture.FrameRate: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FRAME_RATE_UNKNOWN"),
    1: .same(proto: "FRAME_RATE_24"),
    2: .same(proto: "FRAME_RATE_25"),
    3: .same(proto: "FRAME_RATE_29_97"),
    4: .same(proto: "FRAME_RATE_30"),
    5: .same(proto: "FRAME_RATE_50"),
    6: .same(proto: "FRAME_RATE_59_94"),
    7: .same(proto: "FRAME_RATE_60"),
  ]
}

extension Analytics_Capture.Resolution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Capture.protoMessageName + ".Resolution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture.Resolution, rhs: Analytics_Capture.Resolution) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Capture.Start: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Capture.protoMessageName + ".Start"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rtmp"),
    2: .same(proto: "disk"),
    3: .same(proto: "resi"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Capture.Start.RTMP?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .rtmp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .rtmp(v)
        }
      }()
      case 2: try {
        var v: Analytics_Capture.Start.Disk?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .disk(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .disk(v)
        }
      }()
      case 3: try {
        var v: Analytics_Capture.Start.Resi?
        var hadOneofValue = false
        if let current = self.component {
          hadOneofValue = true
          if case .resi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.component = .resi(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.component {
    case .rtmp?: try {
      guard case .rtmp(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .disk?: try {
      guard case .disk(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .resi?: try {
      guard case .resi(let v)? = self.component else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture.Start, rhs: Analytics_Capture.Start) -> Bool {
    if lhs.component != rhs.component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Capture.Start.RTMP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Capture.Start.protoMessageName + ".RTMP"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codec"),
    2: .standard(proto: "frame_rate"),
    3: .same(proto: "host"),
    4: .same(proto: "resolution"),
    5: .standard(proto: "stream_started"),
    6: .standard(proto: "video_bitrate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.codec) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.frameRate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.host) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._resolution) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.streamStarted) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.videoBitrate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.codec != .unknown {
      try visitor.visitSingularEnumField(value: self.codec, fieldNumber: 1)
    }
    if self.frameRate != .unknown {
      try visitor.visitSingularEnumField(value: self.frameRate, fieldNumber: 2)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 3)
    }
    try { if let v = self._resolution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.streamStarted != false {
      try visitor.visitSingularBoolField(value: self.streamStarted, fieldNumber: 5)
    }
    if self.videoBitrate != 0 {
      try visitor.visitSingularInt32Field(value: self.videoBitrate, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture.Start.RTMP, rhs: Analytics_Capture.Start.RTMP) -> Bool {
    if lhs.codec != rhs.codec {return false}
    if lhs.frameRate != rhs.frameRate {return false}
    if lhs.host != rhs.host {return false}
    if lhs._resolution != rhs._resolution {return false}
    if lhs.streamStarted != rhs.streamStarted {return false}
    if lhs.videoBitrate != rhs.videoBitrate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Capture.Start.Disk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Capture.Start.protoMessageName + ".Disk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codec"),
    2: .standard(proto: "frame_rate"),
    3: .same(proto: "resolution"),
    4: .standard(proto: "stream_started"),
    5: .standard(proto: "video_bitrate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.codec) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.frameRate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resolution) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.streamStarted) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.videoBitrate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.codec != .unknown {
      try visitor.visitSingularEnumField(value: self.codec, fieldNumber: 1)
    }
    if self.frameRate != .unknown {
      try visitor.visitSingularEnumField(value: self.frameRate, fieldNumber: 2)
    }
    try { if let v = self._resolution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.streamStarted != false {
      try visitor.visitSingularBoolField(value: self.streamStarted, fieldNumber: 4)
    }
    if self.videoBitrate != 0 {
      try visitor.visitSingularInt32Field(value: self.videoBitrate, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture.Start.Disk, rhs: Analytics_Capture.Start.Disk) -> Bool {
    if lhs.codec != rhs.codec {return false}
    if lhs.frameRate != rhs.frameRate {return false}
    if lhs._resolution != rhs._resolution {return false}
    if lhs.streamStarted != rhs.streamStarted {return false}
    if lhs.videoBitrate != rhs.videoBitrate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Capture.Start.Resi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Capture.Start.protoMessageName + ".Resi"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codec"),
    2: .standard(proto: "frame_rate"),
    3: .same(proto: "resolution"),
    4: .standard(proto: "stream_started"),
    5: .standard(proto: "video_bitrate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.codec) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.frameRate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resolution) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.streamStarted) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.videoBitrate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.codec != .unknown {
      try visitor.visitSingularEnumField(value: self.codec, fieldNumber: 1)
    }
    if self.frameRate != .unknown {
      try visitor.visitSingularEnumField(value: self.frameRate, fieldNumber: 2)
    }
    try { if let v = self._resolution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.streamStarted != false {
      try visitor.visitSingularBoolField(value: self.streamStarted, fieldNumber: 4)
    }
    if self.videoBitrate != 0 {
      try visitor.visitSingularInt32Field(value: self.videoBitrate, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Capture.Start.Resi, rhs: Analytics_Capture.Start.Resi) -> Bool {
    if lhs.codec != rhs.codec {return false}
    if lhs.frameRate != rhs.frameRate {return false}
    if lhs._resolution != rhs._resolution {return false}
    if lhs.streamStarted != rhs.streamStarted {return false}
    if lhs.videoBitrate != rhs.videoBitrate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
