// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Trigger.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Trigger_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Trigger_Request.OneOf_Request? = nil

  var cue: RVData_API_v1_Trigger_Request.Cue {
    get {
      if case .cue(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Cue()
    }
    set {request = .cue(newValue)}
  }

  var playlist: RVData_API_v1_Trigger_Request.Playlist {
    get {
      if case .playlist(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Playlist()
    }
    set {request = .playlist(newValue)}
  }

  var media: RVData_API_v1_Trigger_Request.Media {
    get {
      if case .media(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Media()
    }
    set {request = .media(newValue)}
  }

  var audio: RVData_API_v1_Trigger_Request.Audio {
    get {
      if case .audio(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Audio()
    }
    set {request = .audio(newValue)}
  }

  var videoInput: RVData_API_v1_Trigger_Request.VideoInput {
    get {
      if case .videoInput(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.VideoInput()
    }
    set {request = .videoInput(newValue)}
  }

  var library: RVData_API_v1_Trigger_Request.Library {
    get {
      if case .library(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Library()
    }
    set {request = .library(newValue)}
  }

  var next: RVData_API_v1_Trigger_Request.Next {
    get {
      if case .next(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Next()
    }
    set {request = .next(newValue)}
  }

  var previous: RVData_API_v1_Trigger_Request.Previous {
    get {
      if case .previous(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.Previous()
    }
    set {request = .previous(newValue)}
  }

  var mediaNext: RVData_API_v1_Trigger_Request.MediaNext {
    get {
      if case .mediaNext(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.MediaNext()
    }
    set {request = .mediaNext(newValue)}
  }

  var mediaPrevious: RVData_API_v1_Trigger_Request.MediaPrevious {
    get {
      if case .mediaPrevious(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.MediaPrevious()
    }
    set {request = .mediaPrevious(newValue)}
  }

  var audioNext: RVData_API_v1_Trigger_Request.AudioNext {
    get {
      if case .audioNext(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.AudioNext()
    }
    set {request = .audioNext(newValue)}
  }

  var audioPrevious: RVData_API_v1_Trigger_Request.AudioPrevious {
    get {
      if case .audioPrevious(let v)? = request {return v}
      return RVData_API_v1_Trigger_Request.AudioPrevious()
    }
    set {request = .audioPrevious(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case cue(RVData_API_v1_Trigger_Request.Cue)
    case playlist(RVData_API_v1_Trigger_Request.Playlist)
    case media(RVData_API_v1_Trigger_Request.Media)
    case audio(RVData_API_v1_Trigger_Request.Audio)
    case videoInput(RVData_API_v1_Trigger_Request.VideoInput)
    case library(RVData_API_v1_Trigger_Request.Library)
    case next(RVData_API_v1_Trigger_Request.Next)
    case previous(RVData_API_v1_Trigger_Request.Previous)
    case mediaNext(RVData_API_v1_Trigger_Request.MediaNext)
    case mediaPrevious(RVData_API_v1_Trigger_Request.MediaPrevious)
    case audioNext(RVData_API_v1_Trigger_Request.AudioNext)
    case audioPrevious(RVData_API_v1_Trigger_Request.AudioPrevious)

  }

  struct Cue: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Playlist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Media: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MediaNext: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MediaPrevious: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Audio: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AudioNext: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AudioPrevious: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct VideoInput: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Library: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Next: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Previous: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Trigger_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Trigger_Response.OneOf_Response? = nil

  var cue: RVData_API_v1_Trigger_Response.Cue {
    get {
      if case .cue(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Cue()
    }
    set {response = .cue(newValue)}
  }

  var playlist: RVData_API_v1_Trigger_Response.Playlist {
    get {
      if case .playlist(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Playlist()
    }
    set {response = .playlist(newValue)}
  }

  var media: RVData_API_v1_Trigger_Response.Media {
    get {
      if case .media(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Media()
    }
    set {response = .media(newValue)}
  }

  var audio: RVData_API_v1_Trigger_Response.Audio {
    get {
      if case .audio(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Audio()
    }
    set {response = .audio(newValue)}
  }

  var videoInput: RVData_API_v1_Trigger_Response.VideoInput {
    get {
      if case .videoInput(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.VideoInput()
    }
    set {response = .videoInput(newValue)}
  }

  var library: RVData_API_v1_Trigger_Response.Library {
    get {
      if case .library(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Library()
    }
    set {response = .library(newValue)}
  }

  var next: RVData_API_v1_Trigger_Response.Next {
    get {
      if case .next(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Next()
    }
    set {response = .next(newValue)}
  }

  var previous: RVData_API_v1_Trigger_Response.Previous {
    get {
      if case .previous(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.Previous()
    }
    set {response = .previous(newValue)}
  }

  var mediaNext: RVData_API_v1_Trigger_Response.MediaNext {
    get {
      if case .mediaNext(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.MediaNext()
    }
    set {response = .mediaNext(newValue)}
  }

  var mediaPrevious: RVData_API_v1_Trigger_Response.MediaPrevious {
    get {
      if case .mediaPrevious(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.MediaPrevious()
    }
    set {response = .mediaPrevious(newValue)}
  }

  var audioNext: RVData_API_v1_Trigger_Response.AudioNext {
    get {
      if case .audioNext(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.AudioNext()
    }
    set {response = .audioNext(newValue)}
  }

  var audioPrevious: RVData_API_v1_Trigger_Response.AudioPrevious {
    get {
      if case .audioPrevious(let v)? = response {return v}
      return RVData_API_v1_Trigger_Response.AudioPrevious()
    }
    set {response = .audioPrevious(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case cue(RVData_API_v1_Trigger_Response.Cue)
    case playlist(RVData_API_v1_Trigger_Response.Playlist)
    case media(RVData_API_v1_Trigger_Response.Media)
    case audio(RVData_API_v1_Trigger_Response.Audio)
    case videoInput(RVData_API_v1_Trigger_Response.VideoInput)
    case library(RVData_API_v1_Trigger_Response.Library)
    case next(RVData_API_v1_Trigger_Response.Next)
    case previous(RVData_API_v1_Trigger_Response.Previous)
    case mediaNext(RVData_API_v1_Trigger_Response.MediaNext)
    case mediaPrevious(RVData_API_v1_Trigger_Response.MediaPrevious)
    case audioNext(RVData_API_v1_Trigger_Response.AudioNext)
    case audioPrevious(RVData_API_v1_Trigger_Response.AudioPrevious)

  }

  struct Cue: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Playlist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Media: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MediaNext: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MediaPrevious: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Audio: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AudioNext: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AudioPrevious: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct VideoInput: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Library: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Next: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Previous: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Trigger_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Trigger_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cue"),
    2: .same(proto: "playlist"),
    3: .same(proto: "media"),
    4: .same(proto: "audio"),
    5: .standard(proto: "video_input"),
    6: .same(proto: "library"),
    7: .same(proto: "next"),
    8: .same(proto: "previous"),
    9: .standard(proto: "media_next"),
    10: .standard(proto: "media_previous"),
    11: .standard(proto: "audio_next"),
    12: .standard(proto: "audio_previous"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Trigger_Request.Cue?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .cue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .cue(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Trigger_Request.Playlist?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Trigger_Request.Media?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .media(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .media(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Trigger_Request.Audio?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .audio(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .audio(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Trigger_Request.VideoInput?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .videoInput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .videoInput(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Trigger_Request.Library?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .library(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .library(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Trigger_Request.Next?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .next(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .next(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Trigger_Request.Previous?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .previous(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .previous(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Trigger_Request.MediaNext?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .mediaNext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .mediaNext(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Trigger_Request.MediaPrevious?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .mediaPrevious(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .mediaPrevious(v)
        }
      }()
      case 11: try {
        var v: RVData_API_v1_Trigger_Request.AudioNext?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .audioNext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .audioNext(v)
        }
      }()
      case 12: try {
        var v: RVData_API_v1_Trigger_Request.AudioPrevious?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .audioPrevious(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .audioPrevious(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .cue?: try {
      guard case .cue(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .playlist?: try {
      guard case .playlist(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .media?: try {
      guard case .media(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .audio?: try {
      guard case .audio(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .videoInput?: try {
      guard case .videoInput(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .library?: try {
      guard case .library(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .next?: try {
      guard case .next(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .previous?: try {
      guard case .previous(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .mediaNext?: try {
      guard case .mediaNext(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .mediaPrevious?: try {
      guard case .mediaPrevious(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .audioNext?: try {
      guard case .audioNext(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .audioPrevious?: try {
      guard case .audioPrevious(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request, rhs: RVData_API_v1_Trigger_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Cue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Cue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Cue, rhs: RVData_API_v1_Trigger_Request.Cue) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Playlist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Playlist, rhs: RVData_API_v1_Trigger_Request.Playlist) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Media: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Media"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Media, rhs: RVData_API_v1_Trigger_Request.Media) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.MediaNext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".MediaNext"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.MediaNext, rhs: RVData_API_v1_Trigger_Request.MediaNext) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.MediaPrevious: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".MediaPrevious"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.MediaPrevious, rhs: RVData_API_v1_Trigger_Request.MediaPrevious) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Audio"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Audio, rhs: RVData_API_v1_Trigger_Request.Audio) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.AudioNext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".AudioNext"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.AudioNext, rhs: RVData_API_v1_Trigger_Request.AudioNext) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.AudioPrevious: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".AudioPrevious"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.AudioPrevious, rhs: RVData_API_v1_Trigger_Request.AudioPrevious) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.VideoInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".VideoInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.VideoInput, rhs: RVData_API_v1_Trigger_Request.VideoInput) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Library: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Library"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Library, rhs: RVData_API_v1_Trigger_Request.Library) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Next: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Next"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Next, rhs: RVData_API_v1_Trigger_Request.Next) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Request.Previous: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Request.protoMessageName + ".Previous"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Request.Previous, rhs: RVData_API_v1_Trigger_Request.Previous) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Trigger_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cue"),
    2: .same(proto: "playlist"),
    3: .same(proto: "media"),
    4: .same(proto: "audio"),
    5: .standard(proto: "video_input"),
    6: .same(proto: "library"),
    7: .same(proto: "next"),
    8: .same(proto: "previous"),
    9: .standard(proto: "media_next"),
    10: .standard(proto: "media_previous"),
    11: .standard(proto: "audio_next"),
    12: .standard(proto: "audio_previous"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Trigger_Response.Cue?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cue(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Trigger_Response.Playlist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Trigger_Response.Media?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .media(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .media(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Trigger_Response.Audio?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .audio(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .audio(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Trigger_Response.VideoInput?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .videoInput(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .videoInput(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Trigger_Response.Library?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .library(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .library(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Trigger_Response.Next?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .next(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .next(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Trigger_Response.Previous?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .previous(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .previous(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Trigger_Response.MediaNext?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .mediaNext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .mediaNext(v)
        }
      }()
      case 10: try {
        var v: RVData_API_v1_Trigger_Response.MediaPrevious?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .mediaPrevious(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .mediaPrevious(v)
        }
      }()
      case 11: try {
        var v: RVData_API_v1_Trigger_Response.AudioNext?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .audioNext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .audioNext(v)
        }
      }()
      case 12: try {
        var v: RVData_API_v1_Trigger_Response.AudioPrevious?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .audioPrevious(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .audioPrevious(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .cue?: try {
      guard case .cue(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .playlist?: try {
      guard case .playlist(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .media?: try {
      guard case .media(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .audio?: try {
      guard case .audio(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .videoInput?: try {
      guard case .videoInput(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .library?: try {
      guard case .library(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .next?: try {
      guard case .next(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .previous?: try {
      guard case .previous(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .mediaNext?: try {
      guard case .mediaNext(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .mediaPrevious?: try {
      guard case .mediaPrevious(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .audioNext?: try {
      guard case .audioNext(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .audioPrevious?: try {
      guard case .audioPrevious(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response, rhs: RVData_API_v1_Trigger_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Cue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Cue"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Cue, rhs: RVData_API_v1_Trigger_Response.Cue) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Playlist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Playlist"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Playlist, rhs: RVData_API_v1_Trigger_Response.Playlist) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Media: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Media"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Media, rhs: RVData_API_v1_Trigger_Response.Media) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.MediaNext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".MediaNext"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.MediaNext, rhs: RVData_API_v1_Trigger_Response.MediaNext) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.MediaPrevious: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".MediaPrevious"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.MediaPrevious, rhs: RVData_API_v1_Trigger_Response.MediaPrevious) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Audio"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Audio, rhs: RVData_API_v1_Trigger_Response.Audio) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.AudioNext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".AudioNext"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.AudioNext, rhs: RVData_API_v1_Trigger_Response.AudioNext) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.AudioPrevious: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".AudioPrevious"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.AudioPrevious, rhs: RVData_API_v1_Trigger_Response.AudioPrevious) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.VideoInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".VideoInput"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.VideoInput, rhs: RVData_API_v1_Trigger_Response.VideoInput) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Library: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Library"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Library, rhs: RVData_API_v1_Trigger_Response.Library) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Next: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Next"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Next, rhs: RVData_API_v1_Trigger_Response.Next) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Trigger_Response.Previous: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Trigger_Response.protoMessageName + ".Previous"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Trigger_Response.Previous, rhs: RVData_API_v1_Trigger_Response.Previous) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
