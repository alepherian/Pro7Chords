// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: digitalAudio.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_DigitalAudio: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Setup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var buses: [RVData_DigitalAudio.Bus] {
      get {return _storage._buses}
      set {_uniqueStorage()._buses = newValue}
    }

    var monitorDevice: RVData_DigitalAudio.Device {
      get {return _storage._monitorDevice ?? RVData_DigitalAudio.Device()}
      set {_uniqueStorage()._monitorDevice = newValue}
    }
    /// Returns true if `monitorDevice` has been explicitly set.
    var hasMonitorDevice: Bool {return _storage._monitorDevice != nil}
    /// Clears the value of `monitorDevice`. Subsequent reads from it will return its default value.
    mutating func clearMonitorDevice() {_uniqueStorage()._monitorDevice = nil}

    var mainOutputDevice: RVData_DigitalAudio.Device {
      get {return _storage._mainOutputDevice ?? RVData_DigitalAudio.Device()}
      set {_uniqueStorage()._mainOutputDevice = newValue}
    }
    /// Returns true if `mainOutputDevice` has been explicitly set.
    var hasMainOutputDevice: Bool {return _storage._mainOutputDevice != nil}
    /// Clears the value of `mainOutputDevice`. Subsequent reads from it will return its default value.
    mutating func clearMainOutputDevice() {_uniqueStorage()._mainOutputDevice = nil}

    var enableSdiNdiDevice: Bool {
      get {return _storage._enableSdiNdiDevice}
      set {_uniqueStorage()._enableSdiNdiDevice = newValue}
    }

    var sdiNdiDevice: RVData_DigitalAudio.Device {
      get {return _storage._sdiNdiDevice ?? RVData_DigitalAudio.Device()}
      set {_uniqueStorage()._sdiNdiDevice = newValue}
    }
    /// Returns true if `sdiNdiDevice` has been explicitly set.
    var hasSdiNdiDevice: Bool {return _storage._sdiNdiDevice != nil}
    /// Clears the value of `sdiNdiDevice`. Subsequent reads from it will return its default value.
    mutating func clearSdiNdiDevice() {_uniqueStorage()._sdiNdiDevice = nil}

    var monitorOnMains: Bool {
      get {return _storage._monitorOnMains}
      set {_uniqueStorage()._monitorOnMains = newValue}
    }

    var disableMainOutputDevice: Bool {
      get {return _storage._disableMainOutputDevice}
      set {_uniqueStorage()._disableMainOutputDevice = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Bus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var muted: Bool = false

    var solo: Bool = false

    var testTone: Bool = false

    var masterLevel: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Device: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var renderID: String = String()

    var formats: [RVData_DigitalAudio.Device.Format] = []

    var routing: RVData_DigitalAudio.Device.Routing {
      get {return _routing ?? RVData_DigitalAudio.Device.Routing()}
      set {_routing = newValue}
    }
    /// Returns true if `routing` has been explicitly set.
    var hasRouting: Bool {return self._routing != nil}
    /// Clears the value of `routing`. Subsequent reads from it will return its default value.
    mutating func clearRouting() {self._routing = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Format: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var sampleRate: UInt32 = 0

      var bitDepth: UInt32 = 0

      var type: RVData_DigitalAudio.Device.Format.TypeEnum = .int

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case int // = 0
        case float // = 1
        case UNRECOGNIZED(Int)

        init() {
          self = .int
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .int
          case 1: self = .float
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .int: return 0
          case .float: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [RVData_DigitalAudio.Device.Format.TypeEnum] = [
          .int,
          .float,
        ]

      }

      init() {}
    }

    struct Map: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var channelIndex: UInt32 = 0

      var mappedIndices: [UInt32] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Channel: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var muteEnable: Bool = false

      var soloEnable: Bool = false

      var toneEnable: Bool = false

      var audioDelay: Double = 0

      var level: Double = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Routing: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var channels: [RVData_DigitalAudio.Device.Channel] = []

      var map: [RVData_DigitalAudio.Device.Map] = []

      var isCustomMap: Bool = false

      var masterChannel: RVData_DigitalAudio.Device.Channel {
        get {return _masterChannel ?? RVData_DigitalAudio.Device.Channel()}
        set {_masterChannel = newValue}
      }
      /// Returns true if `masterChannel` has been explicitly set.
      var hasMasterChannel: Bool {return self._masterChannel != nil}
      /// Clears the value of `masterChannel`. Subsequent reads from it will return its default value.
      mutating func clearMasterChannel() {self._masterChannel = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _masterChannel: RVData_DigitalAudio.Device.Channel? = nil
    }

    init() {}

    fileprivate var _routing: RVData_DigitalAudio.Device.Routing? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_DigitalAudio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DigitalAudio"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio, rhs: RVData_DigitalAudio) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Setup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.protoMessageName + ".Setup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buses"),
    2: .standard(proto: "monitor_device"),
    3: .standard(proto: "main_output_device"),
    4: .standard(proto: "enable_sdi_ndi_device"),
    5: .standard(proto: "sdi_ndi_device"),
    6: .standard(proto: "monitor_on_mains"),
    7: .standard(proto: "disable_main_output_device"),
  ]

  fileprivate class _StorageClass {
    var _buses: [RVData_DigitalAudio.Bus] = []
    var _monitorDevice: RVData_DigitalAudio.Device? = nil
    var _mainOutputDevice: RVData_DigitalAudio.Device? = nil
    var _enableSdiNdiDevice: Bool = false
    var _sdiNdiDevice: RVData_DigitalAudio.Device? = nil
    var _monitorOnMains: Bool = false
    var _disableMainOutputDevice: Bool = false

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _buses = source._buses
      _monitorDevice = source._monitorDevice
      _mainOutputDevice = source._mainOutputDevice
      _enableSdiNdiDevice = source._enableSdiNdiDevice
      _sdiNdiDevice = source._sdiNdiDevice
      _monitorOnMains = source._monitorOnMains
      _disableMainOutputDevice = source._disableMainOutputDevice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._buses) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._monitorDevice) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._mainOutputDevice) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._enableSdiNdiDevice) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._sdiNdiDevice) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._monitorOnMains) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._disableMainOutputDevice) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._buses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buses, fieldNumber: 1)
      }
      try { if let v = _storage._monitorDevice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._mainOutputDevice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._enableSdiNdiDevice != false {
        try visitor.visitSingularBoolField(value: _storage._enableSdiNdiDevice, fieldNumber: 4)
      }
      try { if let v = _storage._sdiNdiDevice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._monitorOnMains != false {
        try visitor.visitSingularBoolField(value: _storage._monitorOnMains, fieldNumber: 6)
      }
      if _storage._disableMainOutputDevice != false {
        try visitor.visitSingularBoolField(value: _storage._disableMainOutputDevice, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Setup, rhs: RVData_DigitalAudio.Setup) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._buses != rhs_storage._buses {return false}
        if _storage._monitorDevice != rhs_storage._monitorDevice {return false}
        if _storage._mainOutputDevice != rhs_storage._mainOutputDevice {return false}
        if _storage._enableSdiNdiDevice != rhs_storage._enableSdiNdiDevice {return false}
        if _storage._sdiNdiDevice != rhs_storage._sdiNdiDevice {return false}
        if _storage._monitorOnMains != rhs_storage._monitorOnMains {return false}
        if _storage._disableMainOutputDevice != rhs_storage._disableMainOutputDevice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Bus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.protoMessageName + ".Bus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "muted"),
    3: .same(proto: "solo"),
    4: .standard(proto: "test_tone"),
    5: .standard(proto: "master_level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.solo) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.testTone) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.masterLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 2)
    }
    if self.solo != false {
      try visitor.visitSingularBoolField(value: self.solo, fieldNumber: 3)
    }
    if self.testTone != false {
      try visitor.visitSingularBoolField(value: self.testTone, fieldNumber: 4)
    }
    if self.masterLevel.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.masterLevel, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Bus, rhs: RVData_DigitalAudio.Bus) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.solo != rhs.solo {return false}
    if lhs.testTone != rhs.testTone {return false}
    if lhs.masterLevel != rhs.masterLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.protoMessageName + ".Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "renderID"),
    3: .same(proto: "formats"),
    4: .same(proto: "routing"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.renderID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.formats) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._routing) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.renderID.isEmpty {
      try visitor.visitSingularStringField(value: self.renderID, fieldNumber: 2)
    }
    if !self.formats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formats, fieldNumber: 3)
    }
    try { if let v = self._routing {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Device, rhs: RVData_DigitalAudio.Device) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.renderID != rhs.renderID {return false}
    if lhs.formats != rhs.formats {return false}
    if lhs._routing != rhs._routing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Device.Format: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.Device.protoMessageName + ".Format"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_rate"),
    2: .standard(proto: "bit_depth"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.sampleRate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.bitDepth) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sampleRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.sampleRate, fieldNumber: 1)
    }
    if self.bitDepth != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitDepth, fieldNumber: 2)
    }
    if self.type != .int {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Device.Format, rhs: RVData_DigitalAudio.Device.Format) -> Bool {
    if lhs.sampleRate != rhs.sampleRate {return false}
    if lhs.bitDepth != rhs.bitDepth {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Device.Format.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_INT"),
    1: .same(proto: "TYPE_FLOAT"),
  ]
}

extension RVData_DigitalAudio.Device.Map: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.Device.protoMessageName + ".Map"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_index"),
    2: .standard(proto: "mapped_indices"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.channelIndex) }()
      case 2: try { try decoder.decodeRepeatedUInt32Field(value: &self.mappedIndices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channelIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.channelIndex, fieldNumber: 1)
    }
    if !self.mappedIndices.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.mappedIndices, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Device.Map, rhs: RVData_DigitalAudio.Device.Map) -> Bool {
    if lhs.channelIndex != rhs.channelIndex {return false}
    if lhs.mappedIndices != rhs.mappedIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Device.Channel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.Device.protoMessageName + ".Channel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mute_enable"),
    2: .standard(proto: "solo_enable"),
    3: .standard(proto: "tone_enable"),
    4: .standard(proto: "audio_delay"),
    5: .same(proto: "level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.muteEnable) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.soloEnable) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.toneEnable) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.audioDelay) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.level) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.muteEnable != false {
      try visitor.visitSingularBoolField(value: self.muteEnable, fieldNumber: 1)
    }
    if self.soloEnable != false {
      try visitor.visitSingularBoolField(value: self.soloEnable, fieldNumber: 2)
    }
    if self.toneEnable != false {
      try visitor.visitSingularBoolField(value: self.toneEnable, fieldNumber: 3)
    }
    if self.audioDelay.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.audioDelay, fieldNumber: 4)
    }
    if self.level.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.level, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Device.Channel, rhs: RVData_DigitalAudio.Device.Channel) -> Bool {
    if lhs.muteEnable != rhs.muteEnable {return false}
    if lhs.soloEnable != rhs.soloEnable {return false}
    if lhs.toneEnable != rhs.toneEnable {return false}
    if lhs.audioDelay != rhs.audioDelay {return false}
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_DigitalAudio.Device.Routing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_DigitalAudio.Device.protoMessageName + ".Routing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channels"),
    2: .same(proto: "map"),
    3: .standard(proto: "is_custom_map"),
    4: .standard(proto: "master_channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.channels) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.map) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isCustomMap) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._masterChannel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.channels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.channels, fieldNumber: 1)
    }
    if !self.map.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.map, fieldNumber: 2)
    }
    if self.isCustomMap != false {
      try visitor.visitSingularBoolField(value: self.isCustomMap, fieldNumber: 3)
    }
    try { if let v = self._masterChannel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_DigitalAudio.Device.Routing, rhs: RVData_DigitalAudio.Device.Routing) -> Bool {
    if lhs.channels != rhs.channels {return false}
    if lhs.map != rhs.map {return false}
    if lhs.isCustomMap != rhs.isCustomMap {return false}
    if lhs._masterChannel != rhs._masterChannel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
