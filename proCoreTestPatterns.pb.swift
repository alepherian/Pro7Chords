// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proCoreTestPatterns.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_TestPatternRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_TestPatternRequest.OneOf_Request? = nil

  var getDefinitions: RVData_TestPatternRequest.GetDefinitions {
    get {
      if case .getDefinitions(let v)? = request {return v}
      return RVData_TestPatternRequest.GetDefinitions()
    }
    set {request = .getDefinitions(newValue)}
  }

  var setCurrentState: RVData_TestPatternState {
    get {
      if case .setCurrentState(let v)? = request {return v}
      return RVData_TestPatternState()
    }
    set {request = .setCurrentState(newValue)}
  }

  var getCurrentState: RVData_TestPatternRequest.GetCurrentState {
    get {
      if case .getCurrentState(let v)? = request {return v}
      return RVData_TestPatternRequest.GetCurrentState()
    }
    set {request = .getCurrentState(newValue)}
  }

  var getThumbnail: RVData_TestPatternRequest.GetThumbnail {
    get {
      if case .getThumbnail(let v)? = request {return v}
      return RVData_TestPatternRequest.GetThumbnail()
    }
    set {request = .getThumbnail(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case getDefinitions(RVData_TestPatternRequest.GetDefinitions)
    case setCurrentState(RVData_TestPatternState)
    case getCurrentState(RVData_TestPatternRequest.GetCurrentState)
    case getThumbnail(RVData_TestPatternRequest.GetThumbnail)

  }

  struct GetDefinitions: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetCurrentState: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetThumbnail: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pattern: RVData_TestPatternDefinition {
      get {return _pattern ?? RVData_TestPatternDefinition()}
      set {_pattern = newValue}
    }
    /// Returns true if `pattern` has been explicitly set.
    var hasPattern: Bool {return self._pattern != nil}
    /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
    mutating func clearPattern() {self._pattern = nil}

    var width: Int32 = 0

    var height: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pattern: RVData_TestPatternDefinition? = nil
  }

  init() {}
}

struct RVData_TestPatternResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_TestPatternResponse.OneOf_Response? = nil

  var getDefinitions: RVData_TestPatternResponse.GetDefinitions {
    get {
      if case .getDefinitions(let v)? = response {return v}
      return RVData_TestPatternResponse.GetDefinitions()
    }
    set {response = .getDefinitions(newValue)}
  }

  var getCurrentState: RVData_TestPatternState {
    get {
      if case .getCurrentState(let v)? = response {return v}
      return RVData_TestPatternState()
    }
    set {response = .getCurrentState(newValue)}
  }

  var getThumbnail: RVData_TestPatternResponse.GetThumbnail {
    get {
      if case .getThumbnail(let v)? = response {return v}
      return RVData_TestPatternResponse.GetThumbnail()
    }
    set {response = .getThumbnail(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case getDefinitions(RVData_TestPatternResponse.GetDefinitions)
    case getCurrentState(RVData_TestPatternState)
    case getThumbnail(RVData_TestPatternResponse.GetThumbnail)

  }

  struct GetDefinitions: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var patterns: [RVData_TestPatternDefinition] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetThumbnail: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pattern: RVData_UUID {
      get {return _pattern ?? RVData_UUID()}
      set {_pattern = newValue}
    }
    /// Returns true if `pattern` has been explicitly set.
    var hasPattern: Bool {return self._pattern != nil}
    /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
    mutating func clearPattern() {self._pattern = nil}

    var image: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pattern: RVData_UUID? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_TestPatternRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestPatternRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_definitions"),
    2: .standard(proto: "set_current_state"),
    3: .standard(proto: "get_current_state"),
    4: .standard(proto: "get_thumbnail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_TestPatternRequest.GetDefinitions?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getDefinitions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getDefinitions(v)
        }
      }()
      case 2: try {
        var v: RVData_TestPatternState?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .setCurrentState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .setCurrentState(v)
        }
      }()
      case 3: try {
        var v: RVData_TestPatternRequest.GetCurrentState?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getCurrentState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getCurrentState(v)
        }
      }()
      case 4: try {
        var v: RVData_TestPatternRequest.GetThumbnail?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getThumbnail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getThumbnail(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .getDefinitions?: try {
      guard case .getDefinitions(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .setCurrentState?: try {
      guard case .setCurrentState(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getCurrentState?: try {
      guard case .getCurrentState(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .getThumbnail?: try {
      guard case .getThumbnail(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternRequest, rhs: RVData_TestPatternRequest) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternRequest.GetDefinitions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TestPatternRequest.protoMessageName + ".GetDefinitions"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternRequest.GetDefinitions, rhs: RVData_TestPatternRequest.GetDefinitions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternRequest.GetCurrentState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TestPatternRequest.protoMessageName + ".GetCurrentState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternRequest.GetCurrentState, rhs: RVData_TestPatternRequest.GetCurrentState) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternRequest.GetThumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TestPatternRequest.protoMessageName + ".GetThumbnail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pattern"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pattern) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pattern {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternRequest.GetThumbnail, rhs: RVData_TestPatternRequest.GetThumbnail) -> Bool {
    if lhs._pattern != rhs._pattern {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestPatternResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_definitions"),
    2: .standard(proto: "get_current_state"),
    3: .standard(proto: "get_thumbnail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_TestPatternResponse.GetDefinitions?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getDefinitions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getDefinitions(v)
        }
      }()
      case 2: try {
        var v: RVData_TestPatternState?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getCurrentState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getCurrentState(v)
        }
      }()
      case 3: try {
        var v: RVData_TestPatternResponse.GetThumbnail?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getThumbnail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getThumbnail(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .getDefinitions?: try {
      guard case .getDefinitions(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getCurrentState?: try {
      guard case .getCurrentState(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getThumbnail?: try {
      guard case .getThumbnail(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternResponse, rhs: RVData_TestPatternResponse) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternResponse.GetDefinitions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TestPatternResponse.protoMessageName + ".GetDefinitions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "patterns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.patterns) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.patterns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patterns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternResponse.GetDefinitions, rhs: RVData_TestPatternResponse.GetDefinitions) -> Bool {
    if lhs.patterns != rhs.patterns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_TestPatternResponse.GetThumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_TestPatternResponse.protoMessageName + ".GetThumbnail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pattern"),
    2: .same(proto: "image"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pattern) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.image) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pattern {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.image.isEmpty {
      try visitor.visitSingularBytesField(value: self.image, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_TestPatternResponse.GetThumbnail, rhs: RVData_TestPatternResponse.GetThumbnail) -> Bool {
    if lhs._pattern != rhs._pattern {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
