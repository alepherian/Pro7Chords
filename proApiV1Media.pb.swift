// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Media.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_Media_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Media_Request.OneOf_Request? = nil

  var playlists: RVData_API_v1_Media_Request.Playlists {
    get {
      if case .playlists(let v)? = request {return v}
      return RVData_API_v1_Media_Request.Playlists()
    }
    set {request = .playlists(newValue)}
  }

  var getPlaylist: RVData_API_v1_Media_Request.GetPlaylist {
    get {
      if case .getPlaylist(let v)? = request {return v}
      return RVData_API_v1_Media_Request.GetPlaylist()
    }
    set {request = .getPlaylist(newValue)}
  }

  var getPlaylistUpdates: RVData_API_v1_Media_Request.GetPlaylistUpdates {
    get {
      if case .getPlaylistUpdates(let v)? = request {return v}
      return RVData_API_v1_Media_Request.GetPlaylistUpdates()
    }
    set {request = .getPlaylistUpdates(newValue)}
  }

  var getThumbnail: RVData_API_v1_Media_Request.GetThumbnail {
    get {
      if case .getThumbnail(let v)? = request {return v}
      return RVData_API_v1_Media_Request.GetThumbnail()
    }
    set {request = .getThumbnail(newValue)}
  }

  var playlistFocused: RVData_API_v1_Media_Request.EmptyMessage {
    get {
      if case .playlistFocused(let v)? = request {return v}
      return RVData_API_v1_Media_Request.EmptyMessage()
    }
    set {request = .playlistFocused(newValue)}
  }

  var playlistActive: RVData_API_v1_Media_Request.EmptyMessage {
    get {
      if case .playlistActive(let v)? = request {return v}
      return RVData_API_v1_Media_Request.EmptyMessage()
    }
    set {request = .playlistActive(newValue)}
  }

  var focus: RVData_API_v1_Media_Request.FocusMessage {
    get {
      if case .focus(let v)? = request {return v}
      return RVData_API_v1_Media_Request.FocusMessage()
    }
    set {request = .focus(newValue)}
  }

  var trigger: RVData_API_v1_Media_Request.TriggerMessage {
    get {
      if case .trigger(let v)? = request {return v}
      return RVData_API_v1_Media_Request.TriggerMessage()
    }
    set {request = .trigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case playlists(RVData_API_v1_Media_Request.Playlists)
    case getPlaylist(RVData_API_v1_Media_Request.GetPlaylist)
    case getPlaylistUpdates(RVData_API_v1_Media_Request.GetPlaylistUpdates)
    case getThumbnail(RVData_API_v1_Media_Request.GetThumbnail)
    case playlistFocused(RVData_API_v1_Media_Request.EmptyMessage)
    case playlistActive(RVData_API_v1_Media_Request.EmptyMessage)
    case focus(RVData_API_v1_Media_Request.FocusMessage)
    case trigger(RVData_API_v1_Media_Request.TriggerMessage)

  }

  struct Playlists: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetPlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var start: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetPlaylistUpdates: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetThumbnail: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var quality: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
  }

  struct EmptyMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct FocusMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlist: RVData_API_v1_Media_Request.FocusMessage.OneOf_Playlist? = nil

    var next: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .next(let v)? = playlist {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {playlist = .next(newValue)}
    }

    var previous: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .previous(let v)? = playlist {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {playlist = .previous(newValue)}
    }

    var active: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .active(let v)? = playlist {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {playlist = .active(newValue)}
    }

    var id: SwiftProtobuf.Google_Protobuf_StringValue {
      get {
        if case .id(let v)? = playlist {return v}
        return SwiftProtobuf.Google_Protobuf_StringValue()
      }
      set {playlist = .id(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Playlist: Equatable, Sendable {
      case next(RVData_API_v1_Media_Request.EmptyMessage)
      case previous(RVData_API_v1_Media_Request.EmptyMessage)
      case active(RVData_API_v1_Media_Request.EmptyMessage)
      case id(SwiftProtobuf.Google_Protobuf_StringValue)

    }

    init() {}
  }

  struct TriggerMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlist: RVData_API_v1_Media_Request.TriggerMessage.OneOf_Playlist? = nil

    var focused: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .focused(let v)? = playlist {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {playlist = .focused(newValue)}
    }

    var active: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .active(let v)? = playlist {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {playlist = .active(newValue)}
    }

    var playlistID: SwiftProtobuf.Google_Protobuf_StringValue {
      get {
        if case .playlistID(let v)? = playlist {return v}
        return SwiftProtobuf.Google_Protobuf_StringValue()
      }
      set {playlist = .playlistID(newValue)}
    }

    var item: RVData_API_v1_Media_Request.TriggerMessage.OneOf_Item? = nil

    var start: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .start(let v)? = item {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {item = .start(newValue)}
    }

    var next: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .next(let v)? = item {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {item = .next(newValue)}
    }

    var previous: RVData_API_v1_Media_Request.EmptyMessage {
      get {
        if case .previous(let v)? = item {return v}
        return RVData_API_v1_Media_Request.EmptyMessage()
      }
      set {item = .previous(newValue)}
    }

    var mediaID: SwiftProtobuf.Google_Protobuf_StringValue {
      get {
        if case .mediaID(let v)? = item {return v}
        return SwiftProtobuf.Google_Protobuf_StringValue()
      }
      set {item = .mediaID(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Playlist: Equatable, Sendable {
      case focused(RVData_API_v1_Media_Request.EmptyMessage)
      case active(RVData_API_v1_Media_Request.EmptyMessage)
      case playlistID(SwiftProtobuf.Google_Protobuf_StringValue)

    }

    enum OneOf_Item: Equatable, Sendable {
      case start(RVData_API_v1_Media_Request.EmptyMessage)
      case next(RVData_API_v1_Media_Request.EmptyMessage)
      case previous(RVData_API_v1_Media_Request.EmptyMessage)
      case mediaID(SwiftProtobuf.Google_Protobuf_StringValue)

    }

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Media_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Media_Response.OneOf_Response? = nil

  var playlists: RVData_API_v1_Media_Response.Playlists {
    get {
      if case .playlists(let v)? = response {return v}
      return RVData_API_v1_Media_Response.Playlists()
    }
    set {response = .playlists(newValue)}
  }

  var getPlaylist: RVData_API_v1_Media_Response.GetPlaylist {
    get {
      if case .getPlaylist(let v)? = response {return v}
      return RVData_API_v1_Media_Response.GetPlaylist()
    }
    set {response = .getPlaylist(newValue)}
  }

  var getPlaylistUpdates: RVData_API_v1_Media_Response.GetPlaylistUpdates {
    get {
      if case .getPlaylistUpdates(let v)? = response {return v}
      return RVData_API_v1_Media_Response.GetPlaylistUpdates()
    }
    set {response = .getPlaylistUpdates(newValue)}
  }

  var getThumbnail: RVData_API_v1_Media_Response.GetThumbnail {
    get {
      if case .getThumbnail(let v)? = response {return v}
      return RVData_API_v1_Media_Response.GetThumbnail()
    }
    set {response = .getThumbnail(newValue)}
  }

  var playlistFocused: RVData_API_v1_Media_Response.GetFocusedPlaylist {
    get {
      if case .playlistFocused(let v)? = response {return v}
      return RVData_API_v1_Media_Response.GetFocusedPlaylist()
    }
    set {response = .playlistFocused(newValue)}
  }

  var playlistActive: RVData_API_v1_Media_Response.GetActivePlaylist {
    get {
      if case .playlistActive(let v)? = response {return v}
      return RVData_API_v1_Media_Response.GetActivePlaylist()
    }
    set {response = .playlistActive(newValue)}
  }

  var focus: RVData_API_v1_Media_Response.EmptyMessage {
    get {
      if case .focus(let v)? = response {return v}
      return RVData_API_v1_Media_Response.EmptyMessage()
    }
    set {response = .focus(newValue)}
  }

  var trigger: RVData_API_v1_Media_Response.EmptyMessage {
    get {
      if case .trigger(let v)? = response {return v}
      return RVData_API_v1_Media_Response.EmptyMessage()
    }
    set {response = .trigger(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case playlists(RVData_API_v1_Media_Response.Playlists)
    case getPlaylist(RVData_API_v1_Media_Response.GetPlaylist)
    case getPlaylistUpdates(RVData_API_v1_Media_Response.GetPlaylistUpdates)
    case getThumbnail(RVData_API_v1_Media_Response.GetThumbnail)
    case playlistFocused(RVData_API_v1_Media_Response.GetFocusedPlaylist)
    case playlistActive(RVData_API_v1_Media_Response.GetActivePlaylist)
    case focus(RVData_API_v1_Media_Response.EmptyMessage)
    case trigger(RVData_API_v1_Media_Response.EmptyMessage)

  }

  struct Playlists: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlists: [RVData_API_v1_Playlist] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetPlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var items: [RVData_API_v1_MediaPlaylistItem] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct GetPlaylistUpdates: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct GetThumbnail: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var thumbnailData: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
  }

  struct GetFocusedPlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: RVData_API_v1_Identifier {
      get {return _id ?? RVData_API_v1_Identifier()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: RVData_API_v1_Identifier? = nil
  }

  struct GetActivePlaylist: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var playlist: RVData_API_v1_Identifier {
      get {return _playlist ?? RVData_API_v1_Identifier()}
      set {_playlist = newValue}
    }
    /// Returns true if `playlist` has been explicitly set.
    var hasPlaylist: Bool {return self._playlist != nil}
    /// Clears the value of `playlist`. Subsequent reads from it will return its default value.
    mutating func clearPlaylist() {self._playlist = nil}

    var item: RVData_API_v1_Identifier {
      get {return _item ?? RVData_API_v1_Identifier()}
      set {_item = newValue}
    }
    /// Returns true if `item` has been explicitly set.
    var hasItem: Bool {return self._item != nil}
    /// Clears the value of `item`. Subsequent reads from it will return its default value.
    mutating func clearItem() {self._item = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _playlist: RVData_API_v1_Identifier? = nil
    fileprivate var _item: RVData_API_v1_Identifier? = nil
  }

  struct EmptyMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_Media_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Media_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
    2: .standard(proto: "get_playlist"),
    3: .standard(proto: "get_playlist_updates"),
    4: .standard(proto: "get_thumbnail"),
    5: .standard(proto: "playlist_focused"),
    6: .standard(proto: "playlist_active"),
    7: .same(proto: "focus"),
    8: .same(proto: "trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Media_Request.Playlists?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlists(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlists(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Media_Request.GetPlaylist?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getPlaylist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getPlaylist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Media_Request.GetPlaylistUpdates?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getPlaylistUpdates(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getPlaylistUpdates(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Media_Request.GetThumbnail?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getThumbnail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getThumbnail(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistFocused(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistFocused(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .playlistActive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .playlistActive(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Media_Request.FocusMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .focus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .focus(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Media_Request.TriggerMessage?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .trigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .trigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .playlists?: try {
      guard case .playlists(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getPlaylist?: try {
      guard case .getPlaylist(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getPlaylistUpdates?: try {
      guard case .getPlaylistUpdates(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .getThumbnail?: try {
      guard case .getThumbnail(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playlistFocused?: try {
      guard case .playlistFocused(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .playlistActive?: try {
      guard case .playlistActive(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .focus?: try {
      guard case .focus(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .trigger?: try {
      guard case .trigger(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request, rhs: RVData_API_v1_Media_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.Playlists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".Playlists"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.Playlists, rhs: RVData_API_v1_Media_Request.Playlists) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.GetPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".GetPlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    4: .same(proto: "start"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.start) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.start != 0 {
      try visitor.visitSingularUInt32Field(value: self.start, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.GetPlaylist, rhs: RVData_API_v1_Media_Request.GetPlaylist) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.start != rhs.start {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.GetPlaylistUpdates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".GetPlaylistUpdates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.GetPlaylistUpdates, rhs: RVData_API_v1_Media_Request.GetPlaylistUpdates) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.GetThumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".GetThumbnail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "quality"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.quality) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.quality != 0 {
      try visitor.visitSingularInt32Field(value: self.quality, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.GetThumbnail, rhs: RVData_API_v1_Media_Request.GetThumbnail) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.EmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".EmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.EmptyMessage, rhs: RVData_API_v1_Media_Request.EmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.FocusMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".FocusMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "next"),
    2: .same(proto: "previous"),
    3: .same(proto: "active"),
    4: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .next(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .next(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .previous(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .previous(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .active(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .active(v)
        }
      }()
      case 4: try {
        var v: SwiftProtobuf.Google_Protobuf_StringValue?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .id(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .id(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.playlist {
    case .next?: try {
      guard case .next(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .previous?: try {
      guard case .previous(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .active?: try {
      guard case .active(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .id?: try {
      guard case .id(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.FocusMessage, rhs: RVData_API_v1_Media_Request.FocusMessage) -> Bool {
    if lhs.playlist != rhs.playlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Request.TriggerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Request.protoMessageName + ".TriggerMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "focused"),
    2: .same(proto: "active"),
    3: .standard(proto: "playlist_id"),
    4: .same(proto: "start"),
    5: .same(proto: "next"),
    6: .same(proto: "previous"),
    7: .standard(proto: "media_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .focused(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .focused(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .active(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .active(v)
        }
      }()
      case 3: try {
        var v: SwiftProtobuf.Google_Protobuf_StringValue?
        var hadOneofValue = false
        if let current = self.playlist {
          hadOneofValue = true
          if case .playlistID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.playlist = .playlistID(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .start(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .start(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .next(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .next(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Media_Request.EmptyMessage?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .previous(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .previous(v)
        }
      }()
      case 7: try {
        var v: SwiftProtobuf.Google_Protobuf_StringValue?
        var hadOneofValue = false
        if let current = self.item {
          hadOneofValue = true
          if case .mediaID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.item = .mediaID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.playlist {
    case .focused?: try {
      guard case .focused(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .active?: try {
      guard case .active(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .playlistID?: try {
      guard case .playlistID(let v)? = self.playlist else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    switch self.item {
    case .start?: try {
      guard case .start(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .next?: try {
      guard case .next(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .previous?: try {
      guard case .previous(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .mediaID?: try {
      guard case .mediaID(let v)? = self.item else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Request.TriggerMessage, rhs: RVData_API_v1_Media_Request.TriggerMessage) -> Bool {
    if lhs.playlist != rhs.playlist {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Media_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
    2: .standard(proto: "get_playlist"),
    3: .standard(proto: "get_playlist_updates"),
    4: .standard(proto: "get_thumbnail"),
    5: .standard(proto: "playlist_focused"),
    6: .standard(proto: "playlist_active"),
    7: .same(proto: "focus"),
    8: .same(proto: "trigger"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Media_Response.Playlists?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlists(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlists(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Media_Response.GetPlaylist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getPlaylist(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getPlaylist(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Media_Response.GetPlaylistUpdates?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getPlaylistUpdates(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getPlaylistUpdates(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Media_Response.GetThumbnail?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getThumbnail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getThumbnail(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Media_Response.GetFocusedPlaylist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistFocused(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistFocused(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Media_Response.GetActivePlaylist?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .playlistActive(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .playlistActive(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Media_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .focus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .focus(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Media_Response.EmptyMessage?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .trigger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .trigger(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .playlists?: try {
      guard case .playlists(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getPlaylist?: try {
      guard case .getPlaylist(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getPlaylistUpdates?: try {
      guard case .getPlaylistUpdates(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .getThumbnail?: try {
      guard case .getThumbnail(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playlistFocused?: try {
      guard case .playlistFocused(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .playlistActive?: try {
      guard case .playlistActive(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .focus?: try {
      guard case .focus(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .trigger?: try {
      guard case .trigger(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response, rhs: RVData_API_v1_Media_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.Playlists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".Playlists"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlists"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.playlists) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playlists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.playlists, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.Playlists, rhs: RVData_API_v1_Media_Response.Playlists) -> Bool {
    if lhs.playlists != rhs.playlists {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.GetPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".GetPlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.GetPlaylist, rhs: RVData_API_v1_Media_Response.GetPlaylist) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.GetPlaylistUpdates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".GetPlaylistUpdates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.GetPlaylistUpdates, rhs: RVData_API_v1_Media_Response.GetPlaylistUpdates) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.GetThumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".GetThumbnail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .standard(proto: "thumbnail_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.thumbnailData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.thumbnailData.isEmpty {
      try visitor.visitSingularBytesField(value: self.thumbnailData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.GetThumbnail, rhs: RVData_API_v1_Media_Response.GetThumbnail) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.thumbnailData != rhs.thumbnailData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.GetFocusedPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".GetFocusedPlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.GetFocusedPlaylist, rhs: RVData_API_v1_Media_Response.GetFocusedPlaylist) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.GetActivePlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".GetActivePlaylist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playlist"),
    2: .same(proto: "item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._playlist) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._playlist {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.GetActivePlaylist, rhs: RVData_API_v1_Media_Response.GetActivePlaylist) -> Bool {
    if lhs._playlist != rhs._playlist {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Media_Response.EmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Media_Response.protoMessageName + ".EmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Media_Response.EmptyMessage, rhs: RVData_API_v1_Media_Response.EmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
