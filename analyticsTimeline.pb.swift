// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analyticsTimeline.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Analytics_Timeline: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Analytics_Timeline.OneOf_Event? = nil

  var triggerCue: Analytics_Timeline.TriggerCue {
    get {
      if case .triggerCue(let v)? = event {return v}
      return Analytics_Timeline.TriggerCue()
    }
    set {event = .triggerCue(newValue)}
  }

  var action: Analytics_Timeline.Action {
    get {
      if case .action(let v)? = event {return v}
      return Analytics_Timeline.Action()
    }
    set {event = .action(newValue)}
  }

  var recordCue: Analytics_Timeline.RecordCue {
    get {
      if case .recordCue(let v)? = event {return v}
      return Analytics_Timeline.RecordCue()
    }
    set {event = .recordCue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Event: Equatable, Sendable {
    case triggerCue(Analytics_Timeline.TriggerCue)
    case action(Analytics_Timeline.Action)
    case recordCue(Analytics_Timeline.RecordCue)

  }

  struct TriggerCue: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var triggerType: Analytics_Timeline.TriggerCue.TriggerType = .slide

    var timingSource: Analytics_Timeline.TriggerCue.TimingSource = .internal

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TriggerType: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case slide // = 0
      case media // = 1
      case audio // = 2
      case action // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .slide
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .slide
        case 1: self = .media
        case 2: self = .audio
        case 3: self = .action
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .slide: return 0
        case .media: return 1
        case .audio: return 2
        case .action: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Timeline.TriggerCue.TriggerType] = [
        .slide,
        .media,
        .audio,
        .action,
      ]

    }

    enum TimingSource: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case `internal` // = 0
      case smpte // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .internal
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .internal
        case 1: self = .smpte
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .internal: return 0
        case .smpte: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Timeline.TriggerCue.TimingSource] = [
        .internal,
        .smpte,
      ]

    }

    init() {}
  }

  struct Action: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var actionType: Analytics_Timeline.Action.ActionType = .play

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum ActionType: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case play // = 0
      case stop // = 1
      case reset // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .play
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .play
        case 1: self = .stop
        case 2: self = .reset
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .play: return 0
        case .stop: return 1
        case .reset: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Analytics_Timeline.Action.ActionType] = [
        .play,
        .stop,
        .reset,
      ]

    }

    init() {}
  }

  struct RecordCue: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.analytics"

extension Analytics_Timeline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Timeline"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trigger_cue"),
    2: .same(proto: "action"),
    3: .standard(proto: "record_cue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Analytics_Timeline.TriggerCue?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .triggerCue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .triggerCue(v)
        }
      }()
      case 2: try {
        var v: Analytics_Timeline.Action?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .action(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .action(v)
        }
      }()
      case 3: try {
        var v: Analytics_Timeline.RecordCue?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .recordCue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .recordCue(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.event {
    case .triggerCue?: try {
      guard case .triggerCue(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .action?: try {
      guard case .action(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .recordCue?: try {
      guard case .recordCue(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timeline, rhs: Analytics_Timeline) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Timeline.TriggerCue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Timeline.protoMessageName + ".TriggerCue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trigger_type"),
    2: .standard(proto: "timing_source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.triggerType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.timingSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.triggerType != .slide {
      try visitor.visitSingularEnumField(value: self.triggerType, fieldNumber: 1)
    }
    if self.timingSource != .internal {
      try visitor.visitSingularEnumField(value: self.timingSource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timeline.TriggerCue, rhs: Analytics_Timeline.TriggerCue) -> Bool {
    if lhs.triggerType != rhs.triggerType {return false}
    if lhs.timingSource != rhs.timingSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Timeline.TriggerCue.TriggerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRIGGER_TYPE_SLIDE"),
    1: .same(proto: "TRIGGER_TYPE_MEDIA"),
    2: .same(proto: "TRIGGER_TYPE_AUDIO"),
    3: .same(proto: "TRIGGER_TYPE_ACTION"),
  ]
}

extension Analytics_Timeline.TriggerCue.TimingSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIMING_SOURCE_INTERNAL"),
    1: .same(proto: "TIMING_SOURCE_SMPTE"),
  ]
}

extension Analytics_Timeline.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Timeline.protoMessageName + ".Action"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.actionType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.actionType != .play {
      try visitor.visitSingularEnumField(value: self.actionType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timeline.Action, rhs: Analytics_Timeline.Action) -> Bool {
    if lhs.actionType != rhs.actionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Analytics_Timeline.Action.ActionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTION_TYPE_PLAY"),
    1: .same(proto: "ACTION_TYPE_STOP"),
    2: .same(proto: "ACTION_TYPE_RESET"),
  ]
}

extension Analytics_Timeline.RecordCue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Analytics_Timeline.protoMessageName + ".RecordCue"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Analytics_Timeline.RecordCue, rhs: Analytics_Timeline.RecordCue) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
