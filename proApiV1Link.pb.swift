// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Link.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_GroupMember: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ip: String = String()

  var port: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RVData_API_v1_GroupMemberStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ip: String = String()

  var port: UInt32 = 0

  var name: String = String()

  var platform: RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_Platform = .platformUnknown

  var osVersion: String = String()

  var hostDescription: String = String()

  var apiVersion: String = String()

  var connectionStatus: RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_ConnectionStatus = .connectionStatusUnknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum API_v1_GroupMemberStatus_ConnectionStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case connectionStatusUnknown // = 0
    case connectionStatusConnected // = 1
    case connectionStatusDisconnected // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .connectionStatusUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .connectionStatusUnknown
      case 1: self = .connectionStatusConnected
      case 2: self = .connectionStatusDisconnected
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .connectionStatusUnknown: return 0
      case .connectionStatusConnected: return 1
      case .connectionStatusDisconnected: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_ConnectionStatus] = [
      .connectionStatusUnknown,
      .connectionStatusConnected,
      .connectionStatusDisconnected,
    ]

  }

  enum API_v1_GroupMemberStatus_Platform: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case platformUnknown // = 0
    case platformMacos // = 1
    case platformWin32 // = 2
    case platformWeb // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .platformUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .platformUnknown
      case 1: self = .platformMacos
      case 2: self = .platformWin32
      case 3: self = .platformWeb
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .platformUnknown: return 0
      case .platformMacos: return 1
      case .platformWin32: return 2
      case .platformWeb: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_Platform] = [
      .platformUnknown,
      .platformMacos,
      .platformWin32,
      .platformWeb,
    ]

  }

  init() {}
}

struct RVData_API_v1_GroupDefinition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: RVData_Timestamp {
    get {return _timestamp ?? RVData_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var secret: String = String()

  var name: String = String()

  var members: [RVData_API_v1_GroupMember] = []

  var groupIdentifier: RVData_UUID {
    get {return _groupIdentifier ?? RVData_UUID()}
    set {_groupIdentifier = newValue}
  }
  /// Returns true if `groupIdentifier` has been explicitly set.
  var hasGroupIdentifier: Bool {return self._groupIdentifier != nil}
  /// Clears the value of `groupIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearGroupIdentifier() {self._groupIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: RVData_Timestamp? = nil
  fileprivate var _groupIdentifier: RVData_UUID? = nil
}

struct RVData_API_v1_Link_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Link_Request.OneOf_Request? = nil

  var heartbeat: RVData_API_v1_Link_Request.Heartbeat {
    get {
      if case .heartbeat(let v)? = request {return v}
      return RVData_API_v1_Link_Request.Heartbeat()
    }
    set {request = .heartbeat(newValue)}
  }

  var status: RVData_API_v1_Link_Request.Status {
    get {
      if case .status(let v)? = request {return v}
      return RVData_API_v1_Link_Request.Status()
    }
    set {request = .status(newValue)}
  }

  var addMember: RVData_API_v1_Link_Request.AddMember {
    get {
      if case .addMember(let v)? = request {return v}
      return RVData_API_v1_Link_Request.AddMember()
    }
    set {request = .addMember(newValue)}
  }

  var removeMember: RVData_API_v1_Link_Request.RemoveMember {
    get {
      if case .removeMember(let v)? = request {return v}
      return RVData_API_v1_Link_Request.RemoveMember()
    }
    set {request = .removeMember(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case heartbeat(RVData_API_v1_Link_Request.Heartbeat)
    case status(RVData_API_v1_Link_Request.Status)
    case addMember(RVData_API_v1_Link_Request.AddMember)
    case removeMember(RVData_API_v1_Link_Request.RemoveMember)

  }

  struct Heartbeat: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var port: UInt32 = 0

    var ifModifiedSince: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Status: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AddMember: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var addType: RVData_API_v1_Link_Request.AddMember.OneOf_AddType? = nil

    var groupDefinition: RVData_API_v1_GroupDefinition {
      get {
        if case .groupDefinition(let v)? = addType {return v}
        return RVData_API_v1_GroupDefinition()
      }
      set {addType = .groupDefinition(newValue)}
    }

    var memberDetails: RVData_API_v1_GroupMember {
      get {
        if case .memberDetails(let v)? = addType {return v}
        return RVData_API_v1_GroupMember()
      }
      set {addType = .memberDetails(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_AddType: Equatable, Sendable {
      case groupDefinition(RVData_API_v1_GroupDefinition)
      case memberDetails(RVData_API_v1_GroupMember)

    }

    init() {}
  }

  struct RemoveMember: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var memberDetails: RVData_API_v1_GroupMember {
      get {return _memberDetails ?? RVData_API_v1_GroupMember()}
      set {_memberDetails = newValue}
    }
    /// Returns true if `memberDetails` has been explicitly set.
    var hasMemberDetails: Bool {return self._memberDetails != nil}
    /// Clears the value of `memberDetails`. Subsequent reads from it will return its default value.
    mutating func clearMemberDetails() {self._memberDetails = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _memberDetails: RVData_API_v1_GroupMember? = nil
  }

  init() {}
}

struct RVData_API_v1_Link_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Link_Response.OneOf_Response? = nil

  var heartbeat: RVData_API_v1_Link_Response.Heartbeat {
    get {
      if case .heartbeat(let v)? = response {return v}
      return RVData_API_v1_Link_Response.Heartbeat()
    }
    set {response = .heartbeat(newValue)}
  }

  var status: RVData_API_v1_Link_Response.Status {
    get {
      if case .status(let v)? = response {return v}
      return RVData_API_v1_Link_Response.Status()
    }
    set {response = .status(newValue)}
  }

  var addMember: RVData_API_v1_Link_Response.AddMember {
    get {
      if case .addMember(let v)? = response {return v}
      return RVData_API_v1_Link_Response.AddMember()
    }
    set {response = .addMember(newValue)}
  }

  var removeMember: RVData_API_v1_Link_Response.RemoveMember {
    get {
      if case .removeMember(let v)? = response {return v}
      return RVData_API_v1_Link_Response.RemoveMember()
    }
    set {response = .removeMember(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case heartbeat(RVData_API_v1_Link_Response.Heartbeat)
    case status(RVData_API_v1_Link_Response.Status)
    case addMember(RVData_API_v1_Link_Response.AddMember)
    case removeMember(RVData_API_v1_Link_Response.RemoveMember)

  }

  struct Heartbeat: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupDefinition: RVData_API_v1_GroupDefinition {
      get {return _groupDefinition ?? RVData_API_v1_GroupDefinition()}
      set {_groupDefinition = newValue}
    }
    /// Returns true if `groupDefinition` has been explicitly set.
    var hasGroupDefinition: Bool {return self._groupDefinition != nil}
    /// Clears the value of `groupDefinition`. Subsequent reads from it will return its default value.
    mutating func clearGroupDefinition() {self._groupDefinition = nil}

    var status: RVData_API_v1_GroupMemberStatus {
      get {return _status ?? RVData_API_v1_GroupMemberStatus()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    mutating func clearStatus() {self._status = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _groupDefinition: RVData_API_v1_GroupDefinition? = nil
    fileprivate var _status: RVData_API_v1_GroupMemberStatus? = nil
  }

  struct Status: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupDefinition: RVData_API_v1_GroupDefinition {
      get {return _groupDefinition ?? RVData_API_v1_GroupDefinition()}
      set {_groupDefinition = newValue}
    }
    /// Returns true if `groupDefinition` has been explicitly set.
    var hasGroupDefinition: Bool {return self._groupDefinition != nil}
    /// Clears the value of `groupDefinition`. Subsequent reads from it will return its default value.
    mutating func clearGroupDefinition() {self._groupDefinition = nil}

    var memberName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _groupDefinition: RVData_API_v1_GroupDefinition? = nil
  }

  struct AddMember: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var result: RVData_API_v1_Link_Response.AddMember.OneOf_Result? = nil

    var groupDefinition: RVData_API_v1_GroupDefinition {
      get {
        if case .groupDefinition(let v)? = result {return v}
        return RVData_API_v1_GroupDefinition()
      }
      set {result = .groupDefinition(newValue)}
    }

    var accept: RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts {
      get {
        if case .accept(let v)? = result {return v}
        return RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts()
      }
      set {result = .accept(newValue)}
    }

    var decline: RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline {
      get {
        if case .decline(let v)? = result {return v}
        return RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline()
      }
      set {result = .decline(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Result: Equatable, Sendable {
      case groupDefinition(RVData_API_v1_GroupDefinition)
      case accept(RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts)
      case decline(RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline)

    }

    struct RemoteMachineAccepts: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct RemoteMachineDecline: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var reason: RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline.DeclineReason = .alreadyInGroup

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum DeclineReason: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case alreadyInGroup // = 0
        case userDeclined // = 1
        case UNRECOGNIZED(Int)

        init() {
          self = .alreadyInGroup
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .alreadyInGroup
          case 1: self = .userDeclined
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .alreadyInGroup: return 0
          case .userDeclined: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline.DeclineReason] = [
          .alreadyInGroup,
          .userDeclined,
        ]

      }

      init() {}
    }

    init() {}
  }

  struct RemoveMember: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_GroupMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_GroupMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ip"),
    2: .same(proto: "port"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_GroupMember, rhs: RVData_API_v1_GroupMember) -> Bool {
    if lhs.ip != rhs.ip {return false}
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_GroupMemberStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_GroupMemberStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ip"),
    2: .same(proto: "port"),
    3: .same(proto: "name"),
    4: .same(proto: "platform"),
    5: .standard(proto: "os_version"),
    6: .standard(proto: "host_description"),
    7: .standard(proto: "api_version"),
    8: .standard(proto: "connection_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.platform) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.osVersion) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.hostDescription) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.apiVersion) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.connectionStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.platform != .platformUnknown {
      try visitor.visitSingularEnumField(value: self.platform, fieldNumber: 4)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 5)
    }
    if !self.hostDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.hostDescription, fieldNumber: 6)
    }
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 7)
    }
    if self.connectionStatus != .connectionStatusUnknown {
      try visitor.visitSingularEnumField(value: self.connectionStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_GroupMemberStatus, rhs: RVData_API_v1_GroupMemberStatus) -> Bool {
    if lhs.ip != rhs.ip {return false}
    if lhs.port != rhs.port {return false}
    if lhs.name != rhs.name {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.hostDescription != rhs.hostDescription {return false}
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.connectionStatus != rhs.connectionStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_ConnectionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONNECTION_STATUS_UNKNOWN"),
    1: .same(proto: "CONNECTION_STATUS_CONNECTED"),
    2: .same(proto: "CONNECTION_STATUS_DISCONNECTED"),
  ]
}

extension RVData_API_v1_GroupMemberStatus.API_v1_GroupMemberStatus_Platform: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_UNKNOWN"),
    1: .same(proto: "PLATFORM_MACOS"),
    2: .same(proto: "PLATFORM_WIN32"),
    3: .same(proto: "PLATFORM_WEB"),
  ]
}

extension RVData_API_v1_GroupDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_GroupDefinition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "secret"),
    3: .same(proto: "name"),
    4: .same(proto: "members"),
    5: .standard(proto: "group_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.secret) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.members) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._groupIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.secret.isEmpty {
      try visitor.visitSingularStringField(value: self.secret, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 4)
    }
    try { if let v = self._groupIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_GroupDefinition, rhs: RVData_API_v1_GroupDefinition) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.secret != rhs.secret {return false}
    if lhs.name != rhs.name {return false}
    if lhs.members != rhs.members {return false}
    if lhs._groupIdentifier != rhs._groupIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Link_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "heartbeat"),
    2: .same(proto: "status"),
    3: .standard(proto: "add_member"),
    4: .standard(proto: "remove_member"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Link_Request.Heartbeat?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .heartbeat(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Link_Request.Status?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .status(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Link_Request.AddMember?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .addMember(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .addMember(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Link_Request.RemoveMember?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .removeMember(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .removeMember(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .status?: try {
      guard case .status(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .addMember?: try {
      guard case .addMember(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .removeMember?: try {
      guard case .removeMember(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Request, rhs: RVData_API_v1_Link_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Request.Heartbeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Request.protoMessageName + ".Heartbeat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "port"),
    2: .standard(proto: "if_modified_since"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.port) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ifModifiedSince) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.port != 0 {
      try visitor.visitSingularUInt32Field(value: self.port, fieldNumber: 1)
    }
    if !self.ifModifiedSince.isEmpty {
      try visitor.visitSingularStringField(value: self.ifModifiedSince, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Request.Heartbeat, rhs: RVData_API_v1_Link_Request.Heartbeat) -> Bool {
    if lhs.port != rhs.port {return false}
    if lhs.ifModifiedSince != rhs.ifModifiedSince {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Request.Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Request.protoMessageName + ".Status"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Request.Status, rhs: RVData_API_v1_Link_Request.Status) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Request.AddMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Request.protoMessageName + ".AddMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_definition"),
    2: .standard(proto: "member_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_GroupDefinition?
        var hadOneofValue = false
        if let current = self.addType {
          hadOneofValue = true
          if case .groupDefinition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.addType = .groupDefinition(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_GroupMember?
        var hadOneofValue = false
        if let current = self.addType {
          hadOneofValue = true
          if case .memberDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.addType = .memberDetails(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.addType {
    case .groupDefinition?: try {
      guard case .groupDefinition(let v)? = self.addType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .memberDetails?: try {
      guard case .memberDetails(let v)? = self.addType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Request.AddMember, rhs: RVData_API_v1_Link_Request.AddMember) -> Bool {
    if lhs.addType != rhs.addType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Request.RemoveMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Request.protoMessageName + ".RemoveMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._memberDetails) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._memberDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Request.RemoveMember, rhs: RVData_API_v1_Link_Request.RemoveMember) -> Bool {
    if lhs._memberDetails != rhs._memberDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Link_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "heartbeat"),
    2: .same(proto: "status"),
    3: .standard(proto: "add_member"),
    4: .standard(proto: "remove_member"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Link_Response.Heartbeat?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .heartbeat(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Link_Response.Status?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .status(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Link_Response.AddMember?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .addMember(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .addMember(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Link_Response.RemoveMember?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .removeMember(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .removeMember(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .status?: try {
      guard case .status(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .addMember?: try {
      guard case .addMember(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .removeMember?: try {
      guard case .removeMember(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response, rhs: RVData_API_v1_Link_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.Heartbeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.protoMessageName + ".Heartbeat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_definition"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._groupDefinition) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._groupDefinition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.Heartbeat, rhs: RVData_API_v1_Link_Response.Heartbeat) -> Bool {
    if lhs._groupDefinition != rhs._groupDefinition {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.protoMessageName + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_definition"),
    2: .standard(proto: "member_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._groupDefinition) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.memberName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._groupDefinition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.memberName.isEmpty {
      try visitor.visitSingularStringField(value: self.memberName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.Status, rhs: RVData_API_v1_Link_Response.Status) -> Bool {
    if lhs._groupDefinition != rhs._groupDefinition {return false}
    if lhs.memberName != rhs.memberName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.AddMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.protoMessageName + ".AddMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_definition"),
    2: .same(proto: "accept"),
    3: .same(proto: "decline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_GroupDefinition?
        var hadOneofValue = false
        if let current = self.result {
          hadOneofValue = true
          if case .groupDefinition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.result = .groupDefinition(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts?
        var hadOneofValue = false
        if let current = self.result {
          hadOneofValue = true
          if case .accept(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.result = .accept(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline?
        var hadOneofValue = false
        if let current = self.result {
          hadOneofValue = true
          if case .decline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.result = .decline(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.result {
    case .groupDefinition?: try {
      guard case .groupDefinition(let v)? = self.result else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .accept?: try {
      guard case .accept(let v)? = self.result else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .decline?: try {
      guard case .decline(let v)? = self.result else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.AddMember, rhs: RVData_API_v1_Link_Response.AddMember) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.AddMember.protoMessageName + ".RemoteMachineAccepts"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts, rhs: RVData_API_v1_Link_Response.AddMember.RemoteMachineAccepts) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.AddMember.protoMessageName + ".RemoteMachineDecline"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reason != .alreadyInGroup {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline, rhs: RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Link_Response.AddMember.RemoteMachineDecline.DeclineReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALREADY_IN_GROUP"),
    1: .same(proto: "USER_DECLINED"),
  ]
}

extension RVData_API_v1_Link_Response.RemoveMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Link_Response.protoMessageName + ".RemoveMember"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Link_Response.RemoveMember, rhs: RVData_API_v1_Link_Response.RemoveMember) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
