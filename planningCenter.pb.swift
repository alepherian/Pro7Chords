// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: planningCenter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_PlanningCenterPlan: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var planIDNum: UInt32 = 0

  var parentIDNum: UInt32 = 0

  var seriesTitle: String = String()

  var planTitle: String = String()

  var dateList: String = String()

  var createdDate: RVData_Timestamp {
    get {return _createdDate ?? RVData_Timestamp()}
    set {_createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return self._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {self._createdDate = nil}

  var updateDate: RVData_Timestamp {
    get {return _updateDate ?? RVData_Timestamp()}
    set {_updateDate = newValue}
  }
  /// Returns true if `updateDate` has been explicitly set.
  var hasUpdateDate: Bool {return self._updateDate != nil}
  /// Clears the value of `updateDate`. Subsequent reads from it will return its default value.
  mutating func clearUpdateDate() {self._updateDate = nil}

  var lastUpdateCheckDate: RVData_Timestamp {
    get {return _lastUpdateCheckDate ?? RVData_Timestamp()}
    set {_lastUpdateCheckDate = newValue}
  }
  /// Returns true if `lastUpdateCheckDate` has been explicitly set.
  var hasLastUpdateCheckDate: Bool {return self._lastUpdateCheckDate != nil}
  /// Clears the value of `lastUpdateCheckDate`. Subsequent reads from it will return its default value.
  mutating func clearLastUpdateCheckDate() {self._lastUpdateCheckDate = nil}

  var planIDStr: String = String()

  var parentIDStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PlanItem: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var itemType: RVData_PlanningCenterPlan.PlanItem.PlanItemType = .item

    var pcoIDNum: UInt32 = 0

    var serviceIDNum: UInt32 = 0

    var parentIDNum: UInt32 = 0

    var name: String = String()

    var attachments: [RVData_PlanningCenterPlan.PlanItem.Attachment] = []

    var updateDate: RVData_Timestamp {
      get {return _updateDate ?? RVData_Timestamp()}
      set {_updateDate = newValue}
    }
    /// Returns true if `updateDate` has been explicitly set.
    var hasUpdateDate: Bool {return self._updateDate != nil}
    /// Clears the value of `updateDate`. Subsequent reads from it will return its default value.
    mutating func clearUpdateDate() {self._updateDate = nil}

    var linkedSong: RVData_PlanningCenterPlan.PlanItem.SongItem {
      get {return _linkedSong ?? RVData_PlanningCenterPlan.PlanItem.SongItem()}
      set {_linkedSong = newValue}
    }
    /// Returns true if `linkedSong` has been explicitly set.
    var hasLinkedSong: Bool {return self._linkedSong != nil}
    /// Clears the value of `linkedSong`. Subsequent reads from it will return its default value.
    mutating func clearLinkedSong() {self._linkedSong = nil}

    var pcoIDStr: String = String()

    var serviceIDStr: String = String()

    var parentIDStr: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum PlanItemType: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case item // = 0
      case song // = 1
      case media // = 2
      case header // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .item
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .item
        case 1: self = .song
        case 2: self = .media
        case 3: self = .header
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .item: return 0
        case .song: return 1
        case .media: return 2
        case .header: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [RVData_PlanningCenterPlan.PlanItem.PlanItemType] = [
        .item,
        .song,
        .media,
        .header,
      ]

    }

    struct Attachment: @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var name: String {
        get {return _storage._name}
        set {_uniqueStorage()._name = newValue}
      }

      var url: RVData_URL {
        get {return _storage._url ?? RVData_URL()}
        set {_uniqueStorage()._url = newValue}
      }
      /// Returns true if `url` has been explicitly set.
      var hasURL: Bool {return _storage._url != nil}
      /// Clears the value of `url`. Subsequent reads from it will return its default value.
      mutating func clearURL() {_uniqueStorage()._url = nil}

      var createdDate: RVData_Timestamp {
        get {return _storage._createdDate ?? RVData_Timestamp()}
        set {_uniqueStorage()._createdDate = newValue}
      }
      /// Returns true if `createdDate` has been explicitly set.
      var hasCreatedDate: Bool {return _storage._createdDate != nil}
      /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
      mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

      var linkedPath: RVData_URL {
        get {return _storage._linkedPath ?? RVData_URL()}
        set {_uniqueStorage()._linkedPath = newValue}
      }
      /// Returns true if `linkedPath` has been explicitly set.
      var hasLinkedPath: Bool {return _storage._linkedPath != nil}
      /// Clears the value of `linkedPath`. Subsequent reads from it will return its default value.
      mutating func clearLinkedPath() {_uniqueStorage()._linkedPath = nil}

      var pcoIDNum: UInt32 {
        get {return _storage._pcoIDNum}
        set {_uniqueStorage()._pcoIDNum = newValue}
      }

      var needsUpdate: Bool {
        get {return _storage._needsUpdate}
        set {_uniqueStorage()._needsUpdate = newValue}
      }

      var updateDate: RVData_Timestamp {
        get {return _storage._updateDate ?? RVData_Timestamp()}
        set {_uniqueStorage()._updateDate = newValue}
      }
      /// Returns true if `updateDate` has been explicitly set.
      var hasUpdateDate: Bool {return _storage._updateDate != nil}
      /// Clears the value of `updateDate`. Subsequent reads from it will return its default value.
      mutating func clearUpdateDate() {_uniqueStorage()._updateDate = nil}

      var pcoIDStr: String {
        get {return _storage._pcoIDStr}
        set {_uniqueStorage()._pcoIDStr = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct SongItem: @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var pcoIDNum: UInt32 {
        get {return _storage._pcoIDNum}
        set {_uniqueStorage()._pcoIDNum = newValue}
      }

      var arrangementIDNum: UInt32 {
        get {return _storage._arrangementIDNum}
        set {_uniqueStorage()._arrangementIDNum = newValue}
      }

      var ccli: RVData_Presentation.CCLI {
        get {return _storage._ccli ?? RVData_Presentation.CCLI()}
        set {_uniqueStorage()._ccli = newValue}
      }
      /// Returns true if `ccli` has been explicitly set.
      var hasCcli: Bool {return _storage._ccli != nil}
      /// Clears the value of `ccli`. Subsequent reads from it will return its default value.
      mutating func clearCcli() {_uniqueStorage()._ccli = nil}

      var sequence: RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence {
        get {return _storage._sequence ?? RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence()}
        set {_uniqueStorage()._sequence = newValue}
      }
      /// Returns true if `sequence` has been explicitly set.
      var hasSequence: Bool {return _storage._sequence != nil}
      /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
      mutating func clearSequence() {_uniqueStorage()._sequence = nil}

      var pcoIDStr: String {
        get {return _storage._pcoIDStr}
        set {_uniqueStorage()._pcoIDStr = newValue}
      }

      var arrangementIDStr: String {
        get {return _storage._arrangementIDStr}
        set {_uniqueStorage()._arrangementIDStr = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct Sequence: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var pcoIDNum: UInt32 = 0

        var name: String = String()

        var groupNames: [String] = []

        var pcoIDStr: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    fileprivate var _updateDate: RVData_Timestamp? = nil
    fileprivate var _linkedSong: RVData_PlanningCenterPlan.PlanItem.SongItem? = nil
  }

  init() {}

  fileprivate var _createdDate: RVData_Timestamp? = nil
  fileprivate var _updateDate: RVData_Timestamp? = nil
  fileprivate var _lastUpdateCheckDate: RVData_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_PlanningCenterPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlanningCenterPlan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plan_id_num"),
    2: .standard(proto: "parent_id_num"),
    3: .standard(proto: "series_title"),
    4: .standard(proto: "plan_title"),
    5: .standard(proto: "date_list"),
    6: .standard(proto: "created_date"),
    7: .standard(proto: "update_date"),
    8: .standard(proto: "last_update_check_date"),
    9: .standard(proto: "plan_id_str"),
    10: .standard(proto: "parent_id_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.planIDNum) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.parentIDNum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.seriesTitle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.planTitle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dateList) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdDate) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateDate) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateCheckDate) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.planIDStr) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.parentIDStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.planIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.planIDNum, fieldNumber: 1)
    }
    if self.parentIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.parentIDNum, fieldNumber: 2)
    }
    if !self.seriesTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.seriesTitle, fieldNumber: 3)
    }
    if !self.planTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.planTitle, fieldNumber: 4)
    }
    if !self.dateList.isEmpty {
      try visitor.visitSingularStringField(value: self.dateList, fieldNumber: 5)
    }
    try { if let v = self._createdDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._updateDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._lastUpdateCheckDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.planIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.planIDStr, fieldNumber: 9)
    }
    if !self.parentIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.parentIDStr, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PlanningCenterPlan, rhs: RVData_PlanningCenterPlan) -> Bool {
    if lhs.planIDNum != rhs.planIDNum {return false}
    if lhs.parentIDNum != rhs.parentIDNum {return false}
    if lhs.seriesTitle != rhs.seriesTitle {return false}
    if lhs.planTitle != rhs.planTitle {return false}
    if lhs.dateList != rhs.dateList {return false}
    if lhs._createdDate != rhs._createdDate {return false}
    if lhs._updateDate != rhs._updateDate {return false}
    if lhs._lastUpdateCheckDate != rhs._lastUpdateCheckDate {return false}
    if lhs.planIDStr != rhs.planIDStr {return false}
    if lhs.parentIDStr != rhs.parentIDStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_PlanningCenterPlan.PlanItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_PlanningCenterPlan.protoMessageName + ".PlanItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_type"),
    2: .standard(proto: "pco_id_num"),
    3: .standard(proto: "service_id_num"),
    4: .standard(proto: "parent_id_num"),
    5: .same(proto: "name"),
    6: .same(proto: "attachments"),
    7: .standard(proto: "update_date"),
    8: .standard(proto: "linked_song"),
    9: .standard(proto: "pco_id_str"),
    10: .standard(proto: "service_id_str"),
    11: .standard(proto: "parent_id_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.itemType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pcoIDNum) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.serviceIDNum) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.parentIDNum) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.attachments) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._updateDate) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._linkedSong) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.pcoIDStr) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.serviceIDStr) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.parentIDStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.itemType != .item {
      try visitor.visitSingularEnumField(value: self.itemType, fieldNumber: 1)
    }
    if self.pcoIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pcoIDNum, fieldNumber: 2)
    }
    if self.serviceIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.serviceIDNum, fieldNumber: 3)
    }
    if self.parentIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.parentIDNum, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 6)
    }
    try { if let v = self._updateDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._linkedSong {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.pcoIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.pcoIDStr, fieldNumber: 9)
    }
    if !self.serviceIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceIDStr, fieldNumber: 10)
    }
    if !self.parentIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.parentIDStr, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PlanningCenterPlan.PlanItem, rhs: RVData_PlanningCenterPlan.PlanItem) -> Bool {
    if lhs.itemType != rhs.itemType {return false}
    if lhs.pcoIDNum != rhs.pcoIDNum {return false}
    if lhs.serviceIDNum != rhs.serviceIDNum {return false}
    if lhs.parentIDNum != rhs.parentIDNum {return false}
    if lhs.name != rhs.name {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs._updateDate != rhs._updateDate {return false}
    if lhs._linkedSong != rhs._linkedSong {return false}
    if lhs.pcoIDStr != rhs.pcoIDStr {return false}
    if lhs.serviceIDStr != rhs.serviceIDStr {return false}
    if lhs.parentIDStr != rhs.parentIDStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_PlanningCenterPlan.PlanItem.PlanItemType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLAN_ITEM_TYPE_ITEM"),
    1: .same(proto: "PLAN_ITEM_TYPE_SONG"),
    2: .same(proto: "PLAN_ITEM_TYPE_MEDIA"),
    3: .same(proto: "PLAN_ITEM_TYPE_HEADER"),
  ]
}

extension RVData_PlanningCenterPlan.PlanItem.Attachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_PlanningCenterPlan.PlanItem.protoMessageName + ".Attachment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .standard(proto: "created_date"),
    4: .standard(proto: "linked_path"),
    5: .standard(proto: "pco_id_num"),
    6: .standard(proto: "needs_update"),
    7: .standard(proto: "update_date"),
    8: .standard(proto: "pco_id_str"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _url: RVData_URL? = nil
    var _createdDate: RVData_Timestamp? = nil
    var _linkedPath: RVData_URL? = nil
    var _pcoIDNum: UInt32 = 0
    var _needsUpdate: Bool = false
    var _updateDate: RVData_Timestamp? = nil
    var _pcoIDStr: String = String()

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _url = source._url
      _createdDate = source._createdDate
      _linkedPath = source._linkedPath
      _pcoIDNum = source._pcoIDNum
      _needsUpdate = source._needsUpdate
      _updateDate = source._updateDate
      _pcoIDStr = source._pcoIDStr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._url) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdDate) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._linkedPath) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._pcoIDNum) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._needsUpdate) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._updateDate) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._pcoIDStr) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      try { if let v = _storage._url {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._linkedPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._pcoIDNum != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._pcoIDNum, fieldNumber: 5)
      }
      if _storage._needsUpdate != false {
        try visitor.visitSingularBoolField(value: _storage._needsUpdate, fieldNumber: 6)
      }
      try { if let v = _storage._updateDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._pcoIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pcoIDStr, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PlanningCenterPlan.PlanItem.Attachment, rhs: RVData_PlanningCenterPlan.PlanItem.Attachment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        if _storage._linkedPath != rhs_storage._linkedPath {return false}
        if _storage._pcoIDNum != rhs_storage._pcoIDNum {return false}
        if _storage._needsUpdate != rhs_storage._needsUpdate {return false}
        if _storage._updateDate != rhs_storage._updateDate {return false}
        if _storage._pcoIDStr != rhs_storage._pcoIDStr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_PlanningCenterPlan.PlanItem.SongItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_PlanningCenterPlan.PlanItem.protoMessageName + ".SongItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pco_id_num"),
    2: .standard(proto: "arrangement_id_num"),
    3: .same(proto: "ccli"),
    4: .same(proto: "sequence"),
    5: .standard(proto: "pco_id_str"),
    6: .standard(proto: "arrangement_id_str"),
  ]

  fileprivate class _StorageClass {
    var _pcoIDNum: UInt32 = 0
    var _arrangementIDNum: UInt32 = 0
    var _ccli: RVData_Presentation.CCLI? = nil
    var _sequence: RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence? = nil
    var _pcoIDStr: String = String()
    var _arrangementIDStr: String = String()

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pcoIDNum = source._pcoIDNum
      _arrangementIDNum = source._arrangementIDNum
      _ccli = source._ccli
      _sequence = source._sequence
      _pcoIDStr = source._pcoIDStr
      _arrangementIDStr = source._arrangementIDStr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._pcoIDNum) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._arrangementIDNum) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ccli) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._sequence) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._pcoIDStr) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._arrangementIDStr) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._pcoIDNum != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._pcoIDNum, fieldNumber: 1)
      }
      if _storage._arrangementIDNum != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._arrangementIDNum, fieldNumber: 2)
      }
      try { if let v = _storage._ccli {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._sequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._pcoIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pcoIDStr, fieldNumber: 5)
      }
      if !_storage._arrangementIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._arrangementIDStr, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PlanningCenterPlan.PlanItem.SongItem, rhs: RVData_PlanningCenterPlan.PlanItem.SongItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pcoIDNum != rhs_storage._pcoIDNum {return false}
        if _storage._arrangementIDNum != rhs_storage._arrangementIDNum {return false}
        if _storage._ccli != rhs_storage._ccli {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._pcoIDStr != rhs_storage._pcoIDStr {return false}
        if _storage._arrangementIDStr != rhs_storage._arrangementIDStr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_PlanningCenterPlan.PlanItem.SongItem.protoMessageName + ".Sequence"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pco_id_num"),
    2: .same(proto: "name"),
    3: .standard(proto: "group_names"),
    4: .standard(proto: "pco_id_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.pcoIDNum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.groupNames) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pcoIDStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pcoIDNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pcoIDNum, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.groupNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.groupNames, fieldNumber: 3)
    }
    if !self.pcoIDStr.isEmpty {
      try visitor.visitSingularStringField(value: self.pcoIDStr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence, rhs: RVData_PlanningCenterPlan.PlanItem.SongItem.Sequence) -> Bool {
    if lhs.pcoIDNum != rhs.pcoIDNum {return false}
    if lhs.name != rhs.name {return false}
    if lhs.groupNames != rhs.groupNames {return false}
    if lhs.pcoIDStr != rhs.pcoIDStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
