// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proApiV1Clear.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_API_v1_ClearGroup: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: RVData_API_v1_Identifier {
    get {return _id ?? RVData_API_v1_Identifier()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var icon: String = String()

  var tint: RVData_API_v1_Color {
    get {return _tint ?? RVData_API_v1_Color()}
    set {_tint = newValue}
  }
  /// Returns true if `tint` has been explicitly set.
  var hasTint: Bool {return self._tint != nil}
  /// Clears the value of `tint`. Subsequent reads from it will return its default value.
  mutating func clearTint() {self._tint = nil}

  var layers: [RVData_API_v1_ClearGroup.API_v1_ClearGroupLayerType] = []

  var stopTimelineAnnouncements: Bool = false

  var stopTimelinePresentation: Bool = false

  var clearNextPresentation_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum API_v1_ClearGroupLayerType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case music // = 0
    case audioEffects // = 1
    case props // = 2
    case messages // = 3
    case announcements // = 4
    case presentation // = 5
    case presentationMedia // = 6
    case videoInput // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .music
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .music
      case 1: self = .audioEffects
      case 2: self = .props
      case 3: self = .messages
      case 4: self = .announcements
      case 5: self = .presentation
      case 6: self = .presentationMedia
      case 7: self = .videoInput
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .music: return 0
      case .audioEffects: return 1
      case .props: return 2
      case .messages: return 3
      case .announcements: return 4
      case .presentation: return 5
      case .presentationMedia: return 6
      case .videoInput: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [RVData_API_v1_ClearGroup.API_v1_ClearGroupLayerType] = [
      .music,
      .audioEffects,
      .props,
      .messages,
      .announcements,
      .presentation,
      .presentationMedia,
      .videoInput,
    ]

  }

  init() {}

  fileprivate var _id: RVData_API_v1_Identifier? = nil
  fileprivate var _tint: RVData_API_v1_Color? = nil
}

struct RVData_API_v1_Clear_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: RVData_API_v1_Clear_Request.OneOf_Request? = nil

  var clearLayer_p: RVData_API_v1_Clear_Request.ClearLayer {
    get {
      if case .clearLayer_p(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.ClearLayer()
    }
    set {request = .clearLayer_p(newValue)}
  }

  var createGroup: RVData_API_v1_Clear_Request.CreateGroup {
    get {
      if case .createGroup(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.CreateGroup()
    }
    set {request = .createGroup(newValue)}
  }

  var getGroup: RVData_API_v1_Clear_Request.GetGroup {
    get {
      if case .getGroup(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.GetGroup()
    }
    set {request = .getGroup(newValue)}
  }

  var putGroup: RVData_API_v1_Clear_Request.PutGroup {
    get {
      if case .putGroup(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.PutGroup()
    }
    set {request = .putGroup(newValue)}
  }

  var getGroupIcon: RVData_API_v1_Clear_Request.GetGroupIcon {
    get {
      if case .getGroupIcon(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.GetGroupIcon()
    }
    set {request = .getGroupIcon(newValue)}
  }

  var putGroupIcon: RVData_API_v1_Clear_Request.PutGroupIcon {
    get {
      if case .putGroupIcon(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.PutGroupIcon()
    }
    set {request = .putGroupIcon(newValue)}
  }

  var deleteGroup: RVData_API_v1_Clear_Request.DeleteGroup {
    get {
      if case .deleteGroup(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.DeleteGroup()
    }
    set {request = .deleteGroup(newValue)}
  }

  var triggerGroup: RVData_API_v1_Clear_Request.TriggerGroup {
    get {
      if case .triggerGroup(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.TriggerGroup()
    }
    set {request = .triggerGroup(newValue)}
  }

  var getGroups: RVData_API_v1_Clear_Request.GetGroups {
    get {
      if case .getGroups(let v)? = request {return v}
      return RVData_API_v1_Clear_Request.GetGroups()
    }
    set {request = .getGroups(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable, Sendable {
    case clearLayer_p(RVData_API_v1_Clear_Request.ClearLayer)
    case createGroup(RVData_API_v1_Clear_Request.CreateGroup)
    case getGroup(RVData_API_v1_Clear_Request.GetGroup)
    case putGroup(RVData_API_v1_Clear_Request.PutGroup)
    case getGroupIcon(RVData_API_v1_Clear_Request.GetGroupIcon)
    case putGroupIcon(RVData_API_v1_Clear_Request.PutGroupIcon)
    case deleteGroup(RVData_API_v1_Clear_Request.DeleteGroup)
    case triggerGroup(RVData_API_v1_Clear_Request.TriggerGroup)
    case getGroups(RVData_API_v1_Clear_Request.GetGroups)

  }

  struct ClearLayer: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: RVData_API_v1_LayerType = .audio

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CreateGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var group: RVData_API_v1_ClearGroup {
      get {return _group ?? RVData_API_v1_ClearGroup()}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _group: RVData_API_v1_ClearGroup? = nil
  }

  struct GetGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var group: RVData_API_v1_ClearGroup {
      get {return _group ?? RVData_API_v1_ClearGroup()}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _group: RVData_API_v1_ClearGroup? = nil
  }

  struct GetGroupIcon: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutGroupIcon: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var contentType: String = String()

    var icon: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct DeleteGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct TriggerGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetGroups: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct RVData_API_v1_Clear_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: RVData_API_v1_Clear_Response.OneOf_Response? = nil

  var clearLayer_p: RVData_API_v1_Clear_Response.ClearLayer {
    get {
      if case .clearLayer_p(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.ClearLayer()
    }
    set {response = .clearLayer_p(newValue)}
  }

  var createGroup: RVData_API_v1_Clear_Response.CreateGroup {
    get {
      if case .createGroup(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.CreateGroup()
    }
    set {response = .createGroup(newValue)}
  }

  var getGroup: RVData_API_v1_Clear_Response.GetGroup {
    get {
      if case .getGroup(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.GetGroup()
    }
    set {response = .getGroup(newValue)}
  }

  var putGroup: RVData_API_v1_Clear_Response.PutGroup {
    get {
      if case .putGroup(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.PutGroup()
    }
    set {response = .putGroup(newValue)}
  }

  var deleteGroup: RVData_API_v1_Clear_Response.DeleteGroup {
    get {
      if case .deleteGroup(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.DeleteGroup()
    }
    set {response = .deleteGroup(newValue)}
  }

  var triggerGroup: RVData_API_v1_Clear_Response.TriggerGroup {
    get {
      if case .triggerGroup(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.TriggerGroup()
    }
    set {response = .triggerGroup(newValue)}
  }

  var getGroups: RVData_API_v1_Clear_Response.GetGroups {
    get {
      if case .getGroups(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.GetGroups()
    }
    set {response = .getGroups(newValue)}
  }

  var getGroupIcon: RVData_API_v1_Clear_Response.GetGroupIcon {
    get {
      if case .getGroupIcon(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.GetGroupIcon()
    }
    set {response = .getGroupIcon(newValue)}
  }

  var putGroupIcon: RVData_API_v1_Clear_Response.PutGroupIcon {
    get {
      if case .putGroupIcon(let v)? = response {return v}
      return RVData_API_v1_Clear_Response.PutGroupIcon()
    }
    set {response = .putGroupIcon(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Response: Equatable, Sendable {
    case clearLayer_p(RVData_API_v1_Clear_Response.ClearLayer)
    case createGroup(RVData_API_v1_Clear_Response.CreateGroup)
    case getGroup(RVData_API_v1_Clear_Response.GetGroup)
    case putGroup(RVData_API_v1_Clear_Response.PutGroup)
    case deleteGroup(RVData_API_v1_Clear_Response.DeleteGroup)
    case triggerGroup(RVData_API_v1_Clear_Response.TriggerGroup)
    case getGroups(RVData_API_v1_Clear_Response.GetGroups)
    case getGroupIcon(RVData_API_v1_Clear_Response.GetGroupIcon)
    case putGroupIcon(RVData_API_v1_Clear_Response.PutGroupIcon)

  }

  struct ClearLayer: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var group: RVData_API_v1_ClearGroup {
      get {return _group ?? RVData_API_v1_ClearGroup()}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _group: RVData_API_v1_ClearGroup? = nil
  }

  struct DeleteGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct TriggerGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct CreateGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var group: RVData_API_v1_ClearGroup {
      get {return _group ?? RVData_API_v1_ClearGroup()}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _group: RVData_API_v1_ClearGroup? = nil
  }

  struct GetGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var group: RVData_API_v1_ClearGroup {
      get {return _group ?? RVData_API_v1_ClearGroup()}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _group: RVData_API_v1_ClearGroup? = nil
  }

  struct GetGroups: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groups: [RVData_API_v1_ClearGroup] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GetGroupIcon: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var contentType: String = String()

    var icon: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PutGroupIcon: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_API_v1_ClearGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_ClearGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "icon"),
    3: .same(proto: "tint"),
    4: .same(proto: "layers"),
    5: .standard(proto: "stop_timeline_announcements"),
    6: .standard(proto: "stop_timeline_presentation"),
    7: .standard(proto: "clear_next_presentation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tint) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.layers) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.stopTimelineAnnouncements) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.stopTimelinePresentation) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.clearNextPresentation_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 2)
    }
    try { if let v = self._tint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.layers.isEmpty {
      try visitor.visitPackedEnumField(value: self.layers, fieldNumber: 4)
    }
    if self.stopTimelineAnnouncements != false {
      try visitor.visitSingularBoolField(value: self.stopTimelineAnnouncements, fieldNumber: 5)
    }
    if self.stopTimelinePresentation != false {
      try visitor.visitSingularBoolField(value: self.stopTimelinePresentation, fieldNumber: 6)
    }
    if self.clearNextPresentation_p != false {
      try visitor.visitSingularBoolField(value: self.clearNextPresentation_p, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_ClearGroup, rhs: RVData_API_v1_ClearGroup) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs._tint != rhs._tint {return false}
    if lhs.layers != rhs.layers {return false}
    if lhs.stopTimelineAnnouncements != rhs.stopTimelineAnnouncements {return false}
    if lhs.stopTimelinePresentation != rhs.stopTimelinePresentation {return false}
    if lhs.clearNextPresentation_p != rhs.clearNextPresentation_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_ClearGroup.API_v1_ClearGroupLayerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "music"),
    1: .same(proto: "audio_effects"),
    2: .same(proto: "props"),
    3: .same(proto: "messages"),
    4: .same(proto: "announcements"),
    5: .same(proto: "presentation"),
    6: .same(proto: "presentation_media"),
    7: .same(proto: "video_input"),
  ]
}

extension RVData_API_v1_Clear_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Clear_Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clear_layer"),
    2: .standard(proto: "create_group"),
    3: .standard(proto: "get_group"),
    4: .standard(proto: "put_group"),
    5: .standard(proto: "get_group_icon"),
    6: .standard(proto: "put_group_icon"),
    7: .standard(proto: "delete_group"),
    8: .standard(proto: "trigger_group"),
    9: .standard(proto: "get_groups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Clear_Request.ClearLayer?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .clearLayer_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .clearLayer_p(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Clear_Request.CreateGroup?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .createGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .createGroup(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Clear_Request.GetGroup?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getGroup(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Clear_Request.PutGroup?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .putGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .putGroup(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Clear_Request.GetGroupIcon?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getGroupIcon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getGroupIcon(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Clear_Request.PutGroupIcon?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .putGroupIcon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .putGroupIcon(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Clear_Request.DeleteGroup?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .deleteGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .deleteGroup(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Clear_Request.TriggerGroup?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .triggerGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .triggerGroup(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Clear_Request.GetGroups?
        var hadOneofValue = false
        if let current = self.request {
          hadOneofValue = true
          if case .getGroups(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.request = .getGroups(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.request {
    case .clearLayer_p?: try {
      guard case .clearLayer_p(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .createGroup?: try {
      guard case .createGroup(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getGroup?: try {
      guard case .getGroup(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .putGroup?: try {
      guard case .putGroup(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .getGroupIcon?: try {
      guard case .getGroupIcon(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .putGroupIcon?: try {
      guard case .putGroupIcon(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .deleteGroup?: try {
      guard case .deleteGroup(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .triggerGroup?: try {
      guard case .triggerGroup(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .getGroups?: try {
      guard case .getGroups(let v)? = self.request else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request, rhs: RVData_API_v1_Clear_Request) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.ClearLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".ClearLayer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.layer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layer != .audio {
      try visitor.visitSingularEnumField(value: self.layer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.ClearLayer, rhs: RVData_API_v1_Clear_Request.ClearLayer) -> Bool {
    if lhs.layer != rhs.layer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.CreateGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".CreateGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.CreateGroup, rhs: RVData_API_v1_Clear_Request.CreateGroup) -> Bool {
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.GetGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".GetGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.GetGroup, rhs: RVData_API_v1_Clear_Request.GetGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.PutGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".PutGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.PutGroup, rhs: RVData_API_v1_Clear_Request.PutGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.GetGroupIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".GetGroupIcon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.GetGroupIcon, rhs: RVData_API_v1_Clear_Request.GetGroupIcon) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.PutGroupIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".PutGroupIcon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "content_type"),
    3: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularBytesField(value: self.icon, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.PutGroupIcon, rhs: RVData_API_v1_Clear_Request.PutGroupIcon) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.DeleteGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".DeleteGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.DeleteGroup, rhs: RVData_API_v1_Clear_Request.DeleteGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.TriggerGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".TriggerGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.TriggerGroup, rhs: RVData_API_v1_Clear_Request.TriggerGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Request.GetGroups: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Request.protoMessageName + ".GetGroups"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Request.GetGroups, rhs: RVData_API_v1_Clear_Request.GetGroups) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".API_v1_Clear_Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "clear_layer"),
    2: .standard(proto: "create_group"),
    3: .standard(proto: "get_group"),
    4: .standard(proto: "put_group"),
    5: .standard(proto: "delete_group"),
    6: .standard(proto: "trigger_group"),
    7: .standard(proto: "get_groups"),
    8: .standard(proto: "get_group_icon"),
    9: .standard(proto: "put_group_icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: RVData_API_v1_Clear_Response.ClearLayer?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .clearLayer_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .clearLayer_p(v)
        }
      }()
      case 2: try {
        var v: RVData_API_v1_Clear_Response.CreateGroup?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .createGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .createGroup(v)
        }
      }()
      case 3: try {
        var v: RVData_API_v1_Clear_Response.GetGroup?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getGroup(v)
        }
      }()
      case 4: try {
        var v: RVData_API_v1_Clear_Response.PutGroup?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .putGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .putGroup(v)
        }
      }()
      case 5: try {
        var v: RVData_API_v1_Clear_Response.DeleteGroup?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .deleteGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .deleteGroup(v)
        }
      }()
      case 6: try {
        var v: RVData_API_v1_Clear_Response.TriggerGroup?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .triggerGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .triggerGroup(v)
        }
      }()
      case 7: try {
        var v: RVData_API_v1_Clear_Response.GetGroups?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getGroups(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getGroups(v)
        }
      }()
      case 8: try {
        var v: RVData_API_v1_Clear_Response.GetGroupIcon?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getGroupIcon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getGroupIcon(v)
        }
      }()
      case 9: try {
        var v: RVData_API_v1_Clear_Response.PutGroupIcon?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .putGroupIcon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .putGroupIcon(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .clearLayer_p?: try {
      guard case .clearLayer_p(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .createGroup?: try {
      guard case .createGroup(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .getGroup?: try {
      guard case .getGroup(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .putGroup?: try {
      guard case .putGroup(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .deleteGroup?: try {
      guard case .deleteGroup(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .triggerGroup?: try {
      guard case .triggerGroup(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .getGroups?: try {
      guard case .getGroups(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .getGroupIcon?: try {
      guard case .getGroupIcon(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .putGroupIcon?: try {
      guard case .putGroupIcon(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response, rhs: RVData_API_v1_Clear_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.ClearLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".ClearLayer"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.ClearLayer, rhs: RVData_API_v1_Clear_Response.ClearLayer) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.PutGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".PutGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.PutGroup, rhs: RVData_API_v1_Clear_Response.PutGroup) -> Bool {
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.DeleteGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".DeleteGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.DeleteGroup, rhs: RVData_API_v1_Clear_Response.DeleteGroup) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.TriggerGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".TriggerGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.TriggerGroup, rhs: RVData_API_v1_Clear_Response.TriggerGroup) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.CreateGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".CreateGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.CreateGroup, rhs: RVData_API_v1_Clear_Response.CreateGroup) -> Bool {
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.GetGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".GetGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.GetGroup, rhs: RVData_API_v1_Clear_Response.GetGroup) -> Bool {
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.GetGroups: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".GetGroups"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groups) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.GetGroups, rhs: RVData_API_v1_Clear_Response.GetGroups) -> Bool {
    if lhs.groups != rhs.groups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.GetGroupIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".GetGroupIcon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "content_type"),
    2: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 1)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularBytesField(value: self.icon, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.GetGroupIcon, rhs: RVData_API_v1_Clear_Response.GetGroupIcon) -> Bool {
    if lhs.contentType != rhs.contentType {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_API_v1_Clear_Response.PutGroupIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_API_v1_Clear_Response.protoMessageName + ".PutGroupIcon"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_API_v1_Clear_Response.PutGroupIcon, rhs: RVData_API_v1_Clear_Response.PutGroupIcon) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
