// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: audio.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RVData_Audio: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SettingsDocument: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var outputSetup: RVData_Audio.OutputSetup {
      get {return _outputSetup ?? RVData_Audio.OutputSetup()}
      set {_outputSetup = newValue}
    }
    /// Returns true if `outputSetup` has been explicitly set.
    var hasOutputSetup: Bool {return self._outputSetup != nil}
    /// Clears the value of `outputSetup`. Subsequent reads from it will return its default value.
    mutating func clearOutputSetup() {self._outputSetup = nil}

    var monitorDevice: RVData_Audio.Device {
      get {return _monitorDevice ?? RVData_Audio.Device()}
      set {_monitorDevice = newValue}
    }
    /// Returns true if `monitorDevice` has been explicitly set.
    var hasMonitorDevice: Bool {return self._monitorDevice != nil}
    /// Clears the value of `monitorDevice`. Subsequent reads from it will return its default value.
    mutating func clearMonitorDevice() {self._monitorDevice = nil}

    var monitorOnMains: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _outputSetup: RVData_Audio.OutputSetup? = nil
    fileprivate var _monitorDevice: RVData_Audio.Device? = nil
  }

  struct OutputSetup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var audioDevice: RVData_Audio.Device {
      get {return _audioDevice ?? RVData_Audio.Device()}
      set {_audioDevice = newValue}
    }
    /// Returns true if `audioDevice` has been explicitly set.
    var hasAudioDevice: Bool {return self._audioDevice != nil}
    /// Clears the value of `audioDevice`. Subsequent reads from it will return its default value.
    mutating func clearAudioDevice() {self._audioDevice = nil}

    var logicalChannels: [RVData_Audio.LogicalChannel] = []

    var audioDelay: Double = 0

    var masterLevel: Double = 0

    var physicalChanels: [RVData_Audio.PhysicalChannel] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
    fileprivate var _audioDevice: RVData_Audio.Device? = nil
  }

  struct Device: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var renderID: String = String()

    var inputChannelCount: UInt32 = 0

    var outputChannelCount: UInt32 = 0

    var formats: [RVData_Audio.Device.Format] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Format: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var sampleRate: UInt32 = 0

      var bitDepth: UInt32 = 0

      var type: RVData_Audio.Device.Format.TypeEnum = .int

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
        typealias RawValue = Int
        case int // = 0
        case float // = 1
        case UNRECOGNIZED(Int)

        init() {
          self = .int
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .int
          case 1: self = .float
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .int: return 0
          case .float: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static let allCases: [RVData_Audio.Device.Format.TypeEnum] = [
          .int,
          .float,
        ]

      }

      init() {}
    }

    init() {}
  }

  struct LogicalChannel: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: RVData_UUID {
      get {return _uuid ?? RVData_UUID()}
      set {_uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return self._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {self._uuid = nil}

    var name: String = String()

    var index: UInt32 = 0

    var muted: Bool = false

    var physicalAudioChannels: [RVData_Audio.LogicalChannel.OutputChannel] = []

    var solo: Bool = false

    var testTone: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct OutputChannel: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var index: UInt32 = 0

      var muted: Bool = false

      var solo: Bool = false

      var testTone: Bool = false

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _uuid: RVData_UUID? = nil
  }

  struct PhysicalChannel: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: UInt32 = 0

    var muteEnable: Bool = false

    var soloEnable: Bool = false

    var toneEnable: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rv.data"

extension RVData_Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Audio"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio, rhs: RVData_Audio) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.SettingsDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.protoMessageName + ".SettingsDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_setup"),
    2: .standard(proto: "monitor_device"),
    3: .standard(proto: "monitor_on_mains"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._outputSetup) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._monitorDevice) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.monitorOnMains) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._outputSetup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._monitorDevice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.monitorOnMains != false {
      try visitor.visitSingularBoolField(value: self.monitorOnMains, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.SettingsDocument, rhs: RVData_Audio.SettingsDocument) -> Bool {
    if lhs._outputSetup != rhs._outputSetup {return false}
    if lhs._monitorDevice != rhs._monitorDevice {return false}
    if lhs.monitorOnMains != rhs.monitorOnMains {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.OutputSetup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.protoMessageName + ".OutputSetup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .standard(proto: "audio_device"),
    3: .standard(proto: "logical_channels"),
    4: .standard(proto: "audio_delay"),
    5: .standard(proto: "master_level"),
    6: .standard(proto: "physical_chanels"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._audioDevice) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.logicalChannels) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.audioDelay) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.masterLevel) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.physicalChanels) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._audioDevice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.logicalChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logicalChannels, fieldNumber: 3)
    }
    if self.audioDelay.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.audioDelay, fieldNumber: 4)
    }
    if self.masterLevel.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.masterLevel, fieldNumber: 5)
    }
    if !self.physicalChanels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.physicalChanels, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.OutputSetup, rhs: RVData_Audio.OutputSetup) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs._audioDevice != rhs._audioDevice {return false}
    if lhs.logicalChannels != rhs.logicalChannels {return false}
    if lhs.audioDelay != rhs.audioDelay {return false}
    if lhs.masterLevel != rhs.masterLevel {return false}
    if lhs.physicalChanels != rhs.physicalChanels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.protoMessageName + ".Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "renderID"),
    3: .standard(proto: "input_channel_count"),
    4: .standard(proto: "output_channel_count"),
    5: .same(proto: "formats"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.renderID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.inputChannelCount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.outputChannelCount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.formats) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.renderID.isEmpty {
      try visitor.visitSingularStringField(value: self.renderID, fieldNumber: 2)
    }
    if self.inputChannelCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.inputChannelCount, fieldNumber: 3)
    }
    if self.outputChannelCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.outputChannelCount, fieldNumber: 4)
    }
    if !self.formats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.formats, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.Device, rhs: RVData_Audio.Device) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.renderID != rhs.renderID {return false}
    if lhs.inputChannelCount != rhs.inputChannelCount {return false}
    if lhs.outputChannelCount != rhs.outputChannelCount {return false}
    if lhs.formats != rhs.formats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.Device.Format: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.Device.protoMessageName + ".Format"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_rate"),
    2: .standard(proto: "bit_depth"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.sampleRate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.bitDepth) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sampleRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.sampleRate, fieldNumber: 1)
    }
    if self.bitDepth != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitDepth, fieldNumber: 2)
    }
    if self.type != .int {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.Device.Format, rhs: RVData_Audio.Device.Format) -> Bool {
    if lhs.sampleRate != rhs.sampleRate {return false}
    if lhs.bitDepth != rhs.bitDepth {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.Device.Format.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_INT"),
    1: .same(proto: "TYPE_FLOAT"),
  ]
}

extension RVData_Audio.LogicalChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.protoMessageName + ".LogicalChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .same(proto: "index"),
    4: .same(proto: "muted"),
    5: .standard(proto: "physical_audio_channels"),
    6: .same(proto: "solo"),
    7: .standard(proto: "test_tone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.physicalAudioChannels) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.solo) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.testTone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 3)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 4)
    }
    if !self.physicalAudioChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.physicalAudioChannels, fieldNumber: 5)
    }
    if self.solo != false {
      try visitor.visitSingularBoolField(value: self.solo, fieldNumber: 6)
    }
    if self.testTone != false {
      try visitor.visitSingularBoolField(value: self.testTone, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.LogicalChannel, rhs: RVData_Audio.LogicalChannel) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.index != rhs.index {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.physicalAudioChannels != rhs.physicalAudioChannels {return false}
    if lhs.solo != rhs.solo {return false}
    if lhs.testTone != rhs.testTone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.LogicalChannel.OutputChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.LogicalChannel.protoMessageName + ".OutputChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "muted"),
    3: .same(proto: "solo"),
    4: .standard(proto: "test_tone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.solo) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.testTone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 2)
    }
    if self.solo != false {
      try visitor.visitSingularBoolField(value: self.solo, fieldNumber: 3)
    }
    if self.testTone != false {
      try visitor.visitSingularBoolField(value: self.testTone, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.LogicalChannel.OutputChannel, rhs: RVData_Audio.LogicalChannel.OutputChannel) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.solo != rhs.solo {return false}
    if lhs.testTone != rhs.testTone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RVData_Audio.PhysicalChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RVData_Audio.protoMessageName + ".PhysicalChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "mute_enable"),
    3: .standard(proto: "solo_enable"),
    4: .standard(proto: "tone_enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muteEnable) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.soloEnable) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.toneEnable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    if self.muteEnable != false {
      try visitor.visitSingularBoolField(value: self.muteEnable, fieldNumber: 2)
    }
    if self.soloEnable != false {
      try visitor.visitSingularBoolField(value: self.soloEnable, fieldNumber: 3)
    }
    if self.toneEnable != false {
      try visitor.visitSingularBoolField(value: self.toneEnable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RVData_Audio.PhysicalChannel, rhs: RVData_Audio.PhysicalChannel) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.muteEnable != rhs.muteEnable {return false}
    if lhs.soloEnable != rhs.soloEnable {return false}
    if lhs.toneEnable != rhs.toneEnable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
